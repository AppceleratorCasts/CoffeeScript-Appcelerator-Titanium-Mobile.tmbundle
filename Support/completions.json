{"extra_chars":"._$","images":{"Namespace":"Namespace.png","Method":"Method.png","Property":"Property.png"},"tool_tip_prefix":"<style>\n\nbody {\n\tbackground: transparent;\n}\nhtml,body,table{\n\tfont-size: 10px;\n\tfont-family: \"Lucida Grande\", \"Trebuchet MS\", Verdana, sans-serif;\n}\n#root {\n\tbackground-color: #eef;\n\tbackground: -webkit-gradient(linear, left top, left bottom, from(#EEE), to(#DDD));\n\t-webkit-border-radius: 1ex;\n\tpadding: 1ex 3ex;\n\t-webkit-transition: all 0.75s ease-out;\n\tcolor: rgba(0,0,0,0.25);\n}\n#root code span {\n\tdisplay: block;\n\tpadding-left: 4ex;\n}\n#root code span.info {\n\tpadding-left: 6ex;\n\tfont-size: 83.3333%\n}\ncode{\n\tfont-family: inherit\n}\ncode b{\n\tcolor: #000;\n\tfont-weight: normal;\n\tfont-family: \"Luxi Mono\", Consolas, Monaco, monospace;\n\ttext-shadow: #fff 0 1px 2px;\n}\n* {\n\tfont-size: 100%\n}\nbody {\n\tfont-size: 12px\n}\n#root > p:first-of-type {\n\tmargin-top: 0\n}\n\n</style>\n<script>\n\nwindow.addEventListener('load',function(){\n\t\n\ts = document.getElementById('root').style;\n\ts.color = 'rgba(64,64,64,1)';\n\t\n},false);\n\n</script>\n<div id=root>\n","suggestions":[{"tool_tip_format":"html","tool_tip":"<p>The top level Titanium module.</p><hr /><p>Titanium provides a number of built-in objects in the Javascript that are not part of the Titanium namespace.  Specifically, the following are available.</p>\n<h4 id=\"json\">JSON</h4>\n<p>Titanium has a built-in JSON parser with two main functions: <tt>parse</tt> and <tt>stringify</tt>.  <tt>JSON.parse</tt> will safely evaluate a string encoded as Javascript into a Javascript object.  <tt>JSON.stringify</tt> will encode a Javascript object into a string.</p>\n<h4 id=\"timers\">Timers</h4>\n<p>Titanium has built-in support for one-shot and repeating timers with two main functions: <tt>setTimeout</tt> and <tt>setInterval</tt>.  <tt>setTimeout</tt> takes 2 arguments: function and timeout in milliseconds after which the function should be executed and returns a timer handle that can be used to cancel a pending timer with <tt>clearTimeout</tt>.  <tt>setInterval</tt> takes 2 arguments: function and timeout in milliseconds for how often the function should be executed until cancelled and returns a timer handle that can be used to cancel a timer with <tt>clearInterval</tt>.</p>\n<h4 id=\"alert\">Alert</h4>\n<p>Titanium has a built-in convenience function <tt>alert</tt> which can be used as a shortcut to <a href=\"Titanium.UI.createAlertDialog.html\">Titanium.UI.createAlertDialog</a> for creating a message box.  Note that unlike a web browser-based version of <tt>alert</tt>, the method is asynchronous.</p>","insert":"$0","match":"Titanium","display":"(Namespace)\tTitanium","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.addEventListener","display":"(Method)\t\tTitanium.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.fireEvent","display":"(Method)\t\tTitanium.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>one or more filenames to include as if the Javascript code was written in place.  This is similar to a C <tt>#include</tt> function.</p><p><code class=\"usage\"><b><u>(Method)Titanium.include</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>filename to include</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Titanium.include","display":"(Method)\t\tTitanium.include\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.removeEventListener","display":"(Method)\t\tTitanium.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the user-agent string used by Titanium</p>","insert":"$0","match":"Titanium.userAgent","display":"(Property)\tTitanium.userAgent\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the version of Titanium that is executing</p>","insert":"$0","match":"Titanium.version","display":"(Property)\tTitanium.version\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Titanium module.</p><hr /><p>Titanium provides a number of built-in objects in the Javascript that are not part of the Titanium namespace.  Specifically, the following are available.</p>\n<h4 id=\"json\">JSON</h4>\n<p>Titanium has a built-in JSON parser with two main functions: <tt>parse</tt> and <tt>stringify</tt>.  <tt>JSON.parse</tt> will safely evaluate a string encoded as Javascript into a Javascript object.  <tt>JSON.stringify</tt> will encode a Javascript object into a string.</p>\n<h4 id=\"timers\">Timers</h4>\n<p>Titanium has built-in support for one-shot and repeating timers with two main functions: <tt>setTimeout</tt> and <tt>setInterval</tt>.  <tt>setTimeout</tt> takes 2 arguments: function and timeout in milliseconds after which the function should be executed and returns a timer handle that can be used to cancel a pending timer with <tt>clearTimeout</tt>.  <tt>setInterval</tt> takes 2 arguments: function and timeout in milliseconds for how often the function should be executed until cancelled and returns a timer handle that can be used to cancel a timer with <tt>clearInterval</tt>.</p>\n<h4 id=\"alert\">Alert</h4>\n<p>Titanium has a built-in convenience function <tt>alert</tt> which can be used as a shortcut to <a href=\"Titanium.UI.createAlertDialog.html\">Titanium.UI.createAlertDialog</a> for creating a message box.  Note that unlike a web browser-based version of <tt>alert</tt>, the method is asynchronous.</p>","insert":"$0","match":"Ti","display":"(Namespace)\tTi","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.addEventListener","display":"(Method)\t\tTi.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.fireEvent","display":"(Method)\t\tTi.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>one or more filenames to include as if the Javascript code was written in place.  This is similar to a C <tt>#include</tt> function.</p><p><code class=\"usage\"><b><u>(Method)Ti.include</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>filename to include</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Ti.include","display":"(Method)\t\tTi.include\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.removeEventListener","display":"(Method)\t\tTi.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the user-agent string used by Titanium</p>","insert":"$0","match":"Ti.userAgent","display":"(Property)\tTi.userAgent\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the version of Titanium that is executing</p>","insert":"$0","match":"Ti.version","display":"(Property)\tTi.version\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level API module.  The API module is mainly used for logging.</p><hr />","insert":"$0","match":"Titanium.API","display":"(Namespace)\tTitanium.API","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.API.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.API.addEventListener","display":"(Method)\t\tTitanium.API.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging debug messages</p><p><code class=\"usage\"><b><u>(Method)Titanium.API.debug</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Titanium.API.debug","display":"(Method)\t\tTitanium.API.debug\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging error messages</p><p><code class=\"usage\"><b><u>(Method)Titanium.API.error</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Titanium.API.error","display":"(Method)\t\tTitanium.API.error\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.API.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.API.fireEvent","display":"(Method)\t\tTitanium.API.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging informational messages</p><p><code class=\"usage\"><b><u>(Method)Titanium.API.info</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Titanium.API.info","display":"(Method)\t\tTitanium.API.info\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging custom severity messages</p><p><code class=\"usage\"><b><u>(Method)Titanium.API.log</u></b><i>:void()</i><br>(\n\t\t<span><b>level</b><i>:string</i></span>\n\t\t<span class='info'>the log level</span>\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${2:level}', '${0:message}'})","match":"Titanium.API.log","display":"(Method)\t\tTitanium.API.log\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.API.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.API.removeEventListener","display":"(Method)\t\tTitanium.API.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging warning messages</p><p><code class=\"usage\"><b><u>(Method)Titanium.API.warn</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Titanium.API.warn","display":"(Method)\t\tTitanium.API.warn\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level API module.  The API module is mainly used for logging.</p><hr />","insert":"$0","match":"Ti.API","display":"(Namespace)\tTi.API","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.API.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.API.addEventListener","display":"(Method)\t\tTi.API.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging debug messages</p><p><code class=\"usage\"><b><u>(Method)Ti.API.debug</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Ti.API.debug","display":"(Method)\t\tTi.API.debug\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging error messages</p><p><code class=\"usage\"><b><u>(Method)Ti.API.error</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Ti.API.error","display":"(Method)\t\tTi.API.error\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.API.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.API.fireEvent","display":"(Method)\t\tTi.API.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging informational messages</p><p><code class=\"usage\"><b><u>(Method)Ti.API.info</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Ti.API.info","display":"(Method)\t\tTi.API.info\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging custom severity messages</p><p><code class=\"usage\"><b><u>(Method)Ti.API.log</u></b><i>:void()</i><br>(\n\t\t<span><b>level</b><i>:string</i></span>\n\t\t<span class='info'>the log level</span>\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${2:level}', '${0:message}'})","match":"Ti.API.log","display":"(Method)\t\tTi.API.log\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.API.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.API.removeEventListener","display":"(Method)\t\tTi.API.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>function for logging warning messages</p><p><code class=\"usage\"><b><u>(Method)Ti.API.warn</u></b><i>:void()</i><br>(\n\t\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message to log</span>\n)\n</code>","insert":"(${1:'${0:message}'})","match":"Ti.API.warn","display":"(Method)\t\tTi.API.warn\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Accelerometer module.  The Accelerometer modules contains methods and properties for using the device accelerometer.</p><hr /><p>You'll want to be selective about turning on and off the device accelerometer.  It's recommended you turn off the accelerometer when you're not using it.</p>\n<p>You can turn off the accelerometer by simply removing your event listener function.  You can turn it back on by re-adding the same function with <tt>addEventListener</tt>.</p>\n<pre><code>Titanium.Accelerometer.removeEventListener('update',myFunction);\n</code></pre>","insert":"$0","match":"Titanium.Accelerometer","display":"(Namespace)\tTitanium.Accelerometer","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Accelerometer.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Accelerometer.addEventListener","display":"(Method)\t\tTitanium.Accelerometer.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Accelerometer.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Accelerometer.fireEvent","display":"(Method)\t\tTitanium.Accelerometer.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Accelerometer.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Accelerometer.removeEventListener","display":"(Method)\t\tTitanium.Accelerometer.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Accelerometer module.  The Accelerometer modules contains methods and properties for using the device accelerometer.</p><hr /><p>You'll want to be selective about turning on and off the device accelerometer.  It's recommended you turn off the accelerometer when you're not using it.</p>\n<p>You can turn off the accelerometer by simply removing your event listener function.  You can turn it back on by re-adding the same function with <tt>addEventListener</tt>.</p>\n<pre><code>Titanium.Accelerometer.removeEventListener('update',myFunction);\n</code></pre>","insert":"$0","match":"Ti.Accelerometer","display":"(Namespace)\tTi.Accelerometer","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Accelerometer.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Accelerometer.addEventListener","display":"(Method)\t\tTi.Accelerometer.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Accelerometer.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Accelerometer.fireEvent","display":"(Method)\t\tTi.Accelerometer.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Accelerometer.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Accelerometer.removeEventListener","display":"(Method)\t\tTi.Accelerometer.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Analytics module.  The Analytics module is used for transmitting developer-defined Analytics event for your application to the Appcelerator Analytics product. It can be used to augment additional context or application-specific information which can then be accessed during analysis using Analytics.</p><hr />","insert":"$0","match":"Titanium.Analytics","display":"(Namespace)\tTitanium.Analytics","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>send a generic event for the application session</p><p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.addEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the event type</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:type}', '${3:name}', {${0:}\\}})","match":"Titanium.Analytics.addEvent","display":"(Method)\t\tTitanium.Analytics.addEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Analytics.addEventListener","display":"(Method)\t\tTitanium.Analytics.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics feature event for the application session</p><p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.featureEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Analytics.featureEvent","display":"(Method)\t\tTitanium.Analytics.featureEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Analytics.fireEvent","display":"(Method)\t\tTitanium.Analytics.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics nav event for the application session</p><p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.navEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>from</b><i>:string</i></span>\n\t\t<span class='info'>the from</tt> location in the nav event</span>\n\t\t<span><b>to</b><i>:string</i></span>\n\t\t<span class='info'>the to</tt> location in the nav event</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:from}', '${3:to}', '${4:name}', {${0:}\\}})","match":"Titanium.Analytics.navEvent","display":"(Method)\t\tTitanium.Analytics.navEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Analytics.removeEventListener","display":"(Method)\t\tTitanium.Analytics.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send a analytics settings event for the application session</p><p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.settingsEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Analytics.settingsEvent","display":"(Method)\t\tTitanium.Analytics.settingsEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics timed event for the application session</p><p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.timedEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>start</b><i>:date</i></span>\n\t\t<span class='info'>the event start as a Date object</span>\n\t\t<span><b>stop</b><i>:date</i></span>\n\t\t<span class='info'>the event end as a Date object</span>\n\t\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>the event duration</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', ${3:start}, ${4:stop}, ${5:duration}, {${0:}\\}})","match":"Titanium.Analytics.timedEvent","display":"(Method)\t\tTitanium.Analytics.timedEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics user event for the application session</p><p><code class=\"usage\"><b><u>(Method)Titanium.Analytics.userEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Analytics.userEvent","display":"(Method)\t\tTitanium.Analytics.userEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Analytics module.  The Analytics module is used for transmitting developer-defined Analytics event for your application to the Appcelerator Analytics product. It can be used to augment additional context or application-specific information which can then be accessed during analysis using Analytics.</p><hr />","insert":"$0","match":"Ti.Analytics","display":"(Namespace)\tTi.Analytics","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>send a generic event for the application session</p><p><code class=\"usage\"><b><u>(Method)Ti.Analytics.addEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the event type</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:type}', '${3:name}', {${0:}\\}})","match":"Ti.Analytics.addEvent","display":"(Method)\t\tTi.Analytics.addEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Analytics.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Analytics.addEventListener","display":"(Method)\t\tTi.Analytics.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics feature event for the application session</p><p><code class=\"usage\"><b><u>(Method)Ti.Analytics.featureEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Analytics.featureEvent","display":"(Method)\t\tTi.Analytics.featureEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Analytics.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Analytics.fireEvent","display":"(Method)\t\tTi.Analytics.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics nav event for the application session</p><p><code class=\"usage\"><b><u>(Method)Ti.Analytics.navEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>from</b><i>:string</i></span>\n\t\t<span class='info'>the from</tt> location in the nav event</span>\n\t\t<span><b>to</b><i>:string</i></span>\n\t\t<span class='info'>the to</tt> location in the nav event</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:from}', '${3:to}', '${4:name}', {${0:}\\}})","match":"Ti.Analytics.navEvent","display":"(Method)\t\tTi.Analytics.navEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Analytics.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Analytics.removeEventListener","display":"(Method)\t\tTi.Analytics.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send a analytics settings event for the application session</p><p><code class=\"usage\"><b><u>(Method)Ti.Analytics.settingsEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Analytics.settingsEvent","display":"(Method)\t\tTi.Analytics.settingsEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics timed event for the application session</p><p><code class=\"usage\"><b><u>(Method)Ti.Analytics.timedEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>start</b><i>:date</i></span>\n\t\t<span class='info'>the event start as a Date object</span>\n\t\t<span><b>stop</b><i>:date</i></span>\n\t\t<span class='info'>the event end as a Date object</span>\n\t\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>the event duration</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', ${3:start}, ${4:stop}, ${5:duration}, {${0:}\\}})","match":"Ti.Analytics.timedEvent","display":"(Method)\t\tTi.Analytics.timedEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send an analytics user event for the application session</p><p><code class=\"usage\"><b><u>(Method)Ti.Analytics.userEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>event data or null if not specified. the object must be serializable as JSON</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Analytics.userEvent","display":"(Method)\t\tTi.Analytics.userEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level App module.  The App module is mainly used for accessing information about the application at runtime.</p><hr />","insert":"$0","match":"Titanium.App","display":"(Namespace)\tTitanium.App","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.App.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.App.addEventListener","display":"(Method)\t\tTitanium.App.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a cross-context application event.  listeners in any Javascript context can receive these events if they have added themselves as a listener with the event name.  NOTE: you can only pass JSON serializable data in the data payload of the event object since the data must be transportable between contexts.</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>optional data payload for the event. NOTE: you can only pass JSON serializable data since the data must be transportable between contexts.</span>\n)\n</code>","insert":"(${1:'${2:name}', {${3:}\\}, '${4:name}', {${0:}\\}})","match":"Titanium.App.fireEvent","display":"(Method)\t\tTitanium.App.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.App.getArguments","display":"(Method)\t\tTitanium.App.getArguments\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.App.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.App.removeEventListener","display":"(Method)\t\tTitanium.App.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the application's copyright</p>","insert":"$0","match":"Titanium.App.copyright","display":"(Property)\tTitanium.App.copyright\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's description</p>","insert":"$0","match":"Titanium.App.description","display":"(Property)\tTitanium.App.description\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's globally unique id (this is system generated and consistent through all versions)</p>","insert":"$0","match":"Titanium.App.guid","display":"(Property)\tTitanium.App.guid\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's app id as specified in Titanium Developer</p>","insert":"$0","match":"Titanium.App.id","display":"(Property)\tTitanium.App.id\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>property for controlling whether the phone screen will be locked on idle time. Can be set to true to disable the timer</p>","insert":"$0","match":"Titanium.App.idleTimerDisabled","display":"(Property)\tTitanium.App.idleTimerDisabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's name</p>","insert":"$0","match":"Titanium.App.name","display":"(Property)\tTitanium.App.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a boolean to indicate whether proximity detection is enabled</p>","insert":"$0","match":"Titanium.App.proximityDetection","display":"(Property)\tTitanium.App.proximityDetection\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the state of the device's proximity detector</p>","insert":"$0","match":"Titanium.App.proximityState","display":"(Property)\tTitanium.App.proximityState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's publisher</p>","insert":"$0","match":"Titanium.App.publisher","display":"(Property)\tTitanium.App.publisher\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application url</p>","insert":"$0","match":"Titanium.App.url","display":"(Property)\tTitanium.App.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's version</p>","insert":"$0","match":"Titanium.App.version","display":"(Property)\tTitanium.App.version\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level App module.  The App module is mainly used for accessing information about the application at runtime.</p><hr />","insert":"$0","match":"Ti.App","display":"(Namespace)\tTi.App","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.App.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.App.addEventListener","display":"(Method)\t\tTi.App.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a cross-context application event.  listeners in any Javascript context can receive these events if they have added themselves as a listener with the event name.  NOTE: you can only pass JSON serializable data in the data payload of the event object since the data must be transportable between contexts.</p><p><code class=\"usage\"><b><u>(Method)Ti.App.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the event name</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>optional data payload for the event. NOTE: you can only pass JSON serializable data since the data must be transportable between contexts.</span>\n)\n</code>","insert":"(${1:'${2:name}', {${3:}\\}, '${4:name}', {${0:}\\}})","match":"Ti.App.fireEvent","display":"(Method)\t\tTi.App.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.App.getArguments","display":"(Method)\t\tTi.App.getArguments\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.App.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.App.removeEventListener","display":"(Method)\t\tTi.App.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the application's copyright</p>","insert":"$0","match":"Ti.App.copyright","display":"(Property)\tTi.App.copyright\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's description</p>","insert":"$0","match":"Ti.App.description","display":"(Property)\tTi.App.description\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's globally unique id (this is system generated and consistent through all versions)</p>","insert":"$0","match":"Ti.App.guid","display":"(Property)\tTi.App.guid\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's app id as specified in Titanium Developer</p>","insert":"$0","match":"Ti.App.id","display":"(Property)\tTi.App.id\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>property for controlling whether the phone screen will be locked on idle time. Can be set to true to disable the timer</p>","insert":"$0","match":"Ti.App.idleTimerDisabled","display":"(Property)\tTi.App.idleTimerDisabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's name</p>","insert":"$0","match":"Ti.App.name","display":"(Property)\tTi.App.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a boolean to indicate whether proximity detection is enabled</p>","insert":"$0","match":"Ti.App.proximityDetection","display":"(Property)\tTi.App.proximityDetection\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the state of the device's proximity detector</p>","insert":"$0","match":"Ti.App.proximityState","display":"(Property)\tTi.App.proximityState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's publisher</p>","insert":"$0","match":"Ti.App.publisher","display":"(Property)\tTi.App.publisher\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application url</p>","insert":"$0","match":"Ti.App.url","display":"(Property)\tTi.App.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the application's version</p>","insert":"$0","match":"Ti.App.version","display":"(Property)\tTi.App.version\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The App Properties module is used for storing application related property/value pairs which persist beyond application sessions.</p><hr />","insert":"$0","match":"Titanium.App.Properties","display":"(Namespace)\tTitanium.App.Properties","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.App.Properties.addEventListener","display":"(Method)\t\tTitanium.App.Properties.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.App.Properties.fireEvent","display":"(Method)\t\tTitanium.App.Properties.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a boolean value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.getBool</u></b><i>:boolean()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a boolean value for property</span>\n\t\t<span><b>default</b><i>:boolean</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Titanium.App.Properties.getBool","display":"(Method)\t\tTitanium.App.Properties.getBool\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a double value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.getDouble</u></b><i>:double()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a double value for property</span>\n\t\t<span><b>default</b><i>:double</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Titanium.App.Properties.getDouble","display":"(Method)\t\tTitanium.App.Properties.getDouble\t:double()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return an integer value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.getInt</u></b><i>:int()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a integer value for property</span>\n\t\t<span><b>default</b><i>:int</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Titanium.App.Properties.getInt","display":"(Method)\t\tTitanium.App.Properties.getInt\t:int()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a value as an array</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.getList</u></b><i>:array()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return an array value for property</span>\n\t\t<span><b>default</b><i>:array</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Titanium.App.Properties.getList","display":"(Method)\t\tTitanium.App.Properties.getList\t:array()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a string value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.getString</u></b><i>:string()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a string value for property</span>\n\t\t<span><b>default</b><i>:string</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', '${0:default}'})","match":"Titanium.App.Properties.getString","display":"(Method)\t\tTitanium.App.Properties.getString\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the property exists</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.hasProperty</u></b><i>:boolean()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name to check</span>\n)\n</code>","insert":"(${1:'${0:property}'})","match":"Titanium.App.Properties.hasProperty","display":"(Method)\t\tTitanium.App.Properties.hasProperty\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.App.Properties.listProperties","display":"(Method)\t\tTitanium.App.Properties.listProperties\t:array()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.App.Properties.removeEventListener","display":"(Method)\t\tTitanium.App.Properties.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove an existing property</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.removeProperty</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name to remove</span>\n)\n</code>","insert":"(${1:'${0:property}'})","match":"Titanium.App.Properties.removeProperty","display":"(Method)\t\tTitanium.App.Properties.removeProperty\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as a boolean value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.setBool</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:boolean</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}})","match":"Titanium.App.Properties.setBool","display":"(Method)\t\tTitanium.App.Properties.setBool\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as a double value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.setDouble</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:double</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}})","match":"Titanium.App.Properties.setDouble","display":"(Method)\t\tTitanium.App.Properties.setDouble\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as an integer value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.setInt</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:int</i></span>\n\t\t<span class='info'>value</span>\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:int</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}, '${4:property}', ${5:value}})","match":"Titanium.App.Properties.setInt","display":"(Method)\t\tTitanium.App.Properties.setInt\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as an array value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.setList</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:array</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}})","match":"Titanium.App.Properties.setList","display":"(Method)\t\tTitanium.App.Properties.setList\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as a string value</p><p><code class=\"usage\"><b><u>(Method)Titanium.App.Properties.setString</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', '${0:value}'})","match":"Titanium.App.Properties.setString","display":"(Method)\t\tTitanium.App.Properties.setString\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The App Properties module is used for storing application related property/value pairs which persist beyond application sessions.</p><hr />","insert":"$0","match":"Ti.App.Properties","display":"(Namespace)\tTi.App.Properties","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.App.Properties.addEventListener","display":"(Method)\t\tTi.App.Properties.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.App.Properties.fireEvent","display":"(Method)\t\tTi.App.Properties.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a boolean value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.getBool</u></b><i>:boolean()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a boolean value for property</span>\n\t\t<span><b>default</b><i>:boolean</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Ti.App.Properties.getBool","display":"(Method)\t\tTi.App.Properties.getBool\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a double value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.getDouble</u></b><i>:double()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a double value for property</span>\n\t\t<span><b>default</b><i>:double</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Ti.App.Properties.getDouble","display":"(Method)\t\tTi.App.Properties.getDouble\t:double()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return an integer value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.getInt</u></b><i>:int()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a integer value for property</span>\n\t\t<span><b>default</b><i>:int</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Ti.App.Properties.getInt","display":"(Method)\t\tTi.App.Properties.getInt\t:int()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a value as an array</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.getList</u></b><i>:array()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return an array value for property</span>\n\t\t<span><b>default</b><i>:array</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:default}})","match":"Ti.App.Properties.getList","display":"(Method)\t\tTi.App.Properties.getList\t:array()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a string value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.getString</u></b><i>:string()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>return a string value for property</span>\n\t\t<span><b>default</b><i>:string</i></span>\n\t\t<span class='info'>optional default value if property is not found</span>\n)\n</code>","insert":"(${1:'${2:property}', '${0:default}'})","match":"Ti.App.Properties.getString","display":"(Method)\t\tTi.App.Properties.getString\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the property exists</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.hasProperty</u></b><i>:boolean()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name to check</span>\n)\n</code>","insert":"(${1:'${0:property}'})","match":"Ti.App.Properties.hasProperty","display":"(Method)\t\tTi.App.Properties.hasProperty\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.App.Properties.listProperties","display":"(Method)\t\tTi.App.Properties.listProperties\t:array()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.App.Properties.removeEventListener","display":"(Method)\t\tTi.App.Properties.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove an existing property</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.removeProperty</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name to remove</span>\n)\n</code>","insert":"(${1:'${0:property}'})","match":"Ti.App.Properties.removeProperty","display":"(Method)\t\tTi.App.Properties.removeProperty\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as a boolean value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.setBool</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:boolean</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}})","match":"Ti.App.Properties.setBool","display":"(Method)\t\tTi.App.Properties.setBool\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as a double value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.setDouble</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:double</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}})","match":"Ti.App.Properties.setDouble","display":"(Method)\t\tTi.App.Properties.setDouble\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as an integer value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.setInt</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:int</i></span>\n\t\t<span class='info'>value</span>\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:int</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}, '${4:property}', ${5:value}})","match":"Ti.App.Properties.setInt","display":"(Method)\t\tTi.App.Properties.setInt\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as an array value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.setList</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:array</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', ${3:value}})","match":"Ti.App.Properties.setList","display":"(Method)\t\tTi.App.Properties.setList\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set a property as a string value</p><p><code class=\"usage\"><b><u>(Method)Ti.App.Properties.setString</u></b><i>:void()</i><br>(\n\t\t<span><b>property</b><i>:string</i></span>\n\t\t<span class='info'>property name</span>\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value</span>\n)\n</code>","insert":"(${1:'${2:property}', '${0:value}'})","match":"Ti.App.Properties.setString","display":"(Method)\t\tTi.App.Properties.setString\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Contacts module.  The Contacts module is used accessing the device Address Book.</p><hr />","insert":"$0","match":"Titanium.Contacts","display":"(Namespace)\tTitanium.Contacts","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Contacts.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Contacts.addEventListener","display":"(Method)\t\tTitanium.Contacts.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Contacts.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Contacts.fireEvent","display":"(Method)\t\tTitanium.Contacts.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Contacts.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Contacts.removeEventListener","display":"(Method)\t\tTitanium.Contacts.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Contacts module.  The Contacts module is used accessing the device Address Book.</p><hr />","insert":"$0","match":"Ti.Contacts","display":"(Namespace)\tTi.Contacts","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Contacts.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Contacts.addEventListener","display":"(Method)\t\tTi.Contacts.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Contacts.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Contacts.fireEvent","display":"(Method)\t\tTi.Contacts.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Contacts.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Contacts.removeEventListener","display":"(Method)\t\tTi.Contacts.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Database module.  The Database module is used for creating and accessing the in-application Database. </p><hr />","insert":"$0","match":"Titanium.Database","display":"(Namespace)\tTitanium.Database","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Database.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Database.addEventListener","display":"(Method)\t\tTitanium.Database.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Database.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Database.fireEvent","display":"(Method)\t\tTitanium.Database.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>install a database from the application Resources folder (at build time) and return a reference to the opened database. it is safe to call this method multiple times since this method will only install once if it doesn't already exist on the device.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Database.install</u></b><i>:object()</i><br>(\n\t\t<span><b>path</b><i>:string</i></span>\n\t\t<span class='info'>the path (relative to the main application Resources folder at build time) to the db to install. this file must be in the SQLite 3 file format.</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the database</span>\n)\n</code>","insert":"(${1:'${2:path}', '${0:name}'})","match":"Titanium.Database.install","display":"(Method)\t\tTitanium.Database.install\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open a database. if it doesn't yet exist, create it.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Database.open</u></b><i>:object()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the database</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Titanium.Database.open","display":"(Method)\t\tTitanium.Database.open\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Database.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Database.removeEventListener","display":"(Method)\t\tTitanium.Database.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Database module.  The Database module is used for creating and accessing the in-application Database. </p><hr />","insert":"$0","match":"Ti.Database","display":"(Namespace)\tTi.Database","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Database.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Database.addEventListener","display":"(Method)\t\tTi.Database.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Database.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Database.fireEvent","display":"(Method)\t\tTi.Database.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>install a database from the application Resources folder (at build time) and return a reference to the opened database. it is safe to call this method multiple times since this method will only install once if it doesn't already exist on the device.</p><p><code class=\"usage\"><b><u>(Method)Ti.Database.install</u></b><i>:object()</i><br>(\n\t\t<span><b>path</b><i>:string</i></span>\n\t\t<span class='info'>the path (relative to the main application Resources folder at build time) to the db to install. this file must be in the SQLite 3 file format.</span>\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the database</span>\n)\n</code>","insert":"(${1:'${2:path}', '${0:name}'})","match":"Ti.Database.install","display":"(Method)\t\tTi.Database.install\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open a database. if it doesn't yet exist, create it.</p><p><code class=\"usage\"><b><u>(Method)Ti.Database.open</u></b><i>:object()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the database</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Ti.Database.open","display":"(Method)\t\tTi.Database.open\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Database.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Database.removeEventListener","display":"(Method)\t\tTi.Database.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The Database instance returned by <a href=\"Titanium.Database.open-method.html\">Titanium.Database.open</a> or <a href=\"Titanium.Database.install-method.html\">Titanium.Database.install</a>. </p><hr />","insert":"$0","match":"Titanium.Database.DB","display":"(Namespace)\tTitanium.Database.DB","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Database.DB.close","display":"(Method)\t\tTitanium.Database.DB.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a SQL statement against the database and returns a ResultSet</p><p><code class=\"usage\"><b><u>(Method)Titanium.Database.DB.execute</u></b><i>:object()</i><br>(\n\t\t<span><b>sql</b><i>:string</i></span>\n\t\t<span class='info'>the SQL to execute</span>\n\t\t<span><b>vararg</b><i>:array,...</i></span>\n\t\t<span class='info'>one or more optional variable arguments passed to this function or an array of objects to be replaced in the query using ?</tt> substitution.</span>\n)\n</code>","insert":"(${1:'${2:sql}', ${3:vararg}})","match":"Titanium.Database.DB.execute","display":"(Method)\t\tTitanium.Database.DB.execute\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Database.DB.remove","display":"(Method)\t\tTitanium.Database.DB.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the last row identifier by the last INSERT query</p>","insert":"$0","match":"Titanium.Database.DB.lastInsertRowId","display":"(Property)\tTitanium.Database.DB.lastInsertRowId\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the name of the database</p>","insert":"$0","match":"Titanium.Database.DB.name","display":"(Property)\tTitanium.Database.DB.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of rows affected by the last query</p>","insert":"$0","match":"Titanium.Database.DB.rowsAffected","display":"(Property)\tTitanium.Database.DB.rowsAffected\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Database instance returned by <a href=\"Titanium.Database.open-method.html\">Titanium.Database.open</a> or <a href=\"Titanium.Database.install-method.html\">Titanium.Database.install</a>. </p><hr />","insert":"$0","match":"Ti.Database.DB","display":"(Namespace)\tTi.Database.DB","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Database.DB.close","display":"(Method)\t\tTi.Database.DB.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a SQL statement against the database and returns a ResultSet</p><p><code class=\"usage\"><b><u>(Method)Ti.Database.DB.execute</u></b><i>:object()</i><br>(\n\t\t<span><b>sql</b><i>:string</i></span>\n\t\t<span class='info'>the SQL to execute</span>\n\t\t<span><b>vararg</b><i>:array,...</i></span>\n\t\t<span class='info'>one or more optional variable arguments passed to this function or an array of objects to be replaced in the query using ?</tt> substitution.</span>\n)\n</code>","insert":"(${1:'${2:sql}', ${3:vararg}})","match":"Ti.Database.DB.execute","display":"(Method)\t\tTi.Database.DB.execute\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Database.DB.remove","display":"(Method)\t\tTi.Database.DB.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the last row identifier by the last INSERT query</p>","insert":"$0","match":"Ti.Database.DB.lastInsertRowId","display":"(Property)\tTi.Database.DB.lastInsertRowId\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the name of the database</p>","insert":"$0","match":"Ti.Database.DB.name","display":"(Property)\tTi.Database.DB.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of rows affected by the last query</p>","insert":"$0","match":"Ti.Database.DB.rowsAffected","display":"(Property)\tTi.Database.DB.rowsAffected\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The ResultSet instance returned by invoking a database SQL <tt>execute</tt>.</p><hr />","insert":"$0","match":"Titanium.Database.ResultSet","display":"(Namespace)\tTitanium.Database.ResultSet","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Database.ResultSet.close","display":"(Method)\t\tTitanium.Database.ResultSet.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>retrieve a row value by field index</p><p><code class=\"usage\"><b><u>(Method)Titanium.Database.ResultSet.field</u></b><i>:object()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>column index (which is zero based)</span>\n)\n</code>","insert":"(${1:${2:index}})","match":"Titanium.Database.ResultSet.field","display":"(Method)\t\tTitanium.Database.ResultSet.field\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>retrieve a row value by field name</p><p><code class=\"usage\"><b><u>(Method)Titanium.Database.ResultSet.fieldByName</u></b><i>:object()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>column name from SQL query</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Titanium.Database.ResultSet.fieldByName","display":"(Method)\t\tTitanium.Database.ResultSet.fieldByName\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Database.ResultSet.fieldCount","display":"(Method)\t\tTitanium.Database.ResultSet.fieldCount\t:int()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return the field name for field index</p><p><code class=\"usage\"><b><u>(Method)Titanium.Database.ResultSet.fieldName</u></b><i>:string()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>field name column index (which is zero based)</span>\n)\n</code>","insert":"(${1:${2:index}})","match":"Titanium.Database.ResultSet.fieldName","display":"(Method)\t\tTitanium.Database.ResultSet.fieldName\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Database.ResultSet.isValidRow","display":"(Method)\t\tTitanium.Database.ResultSet.isValidRow\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Database.ResultSet.next","display":"(Method)\t\tTitanium.Database.ResultSet.next\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the number of rows in the result set</p>","insert":"$0","match":"Titanium.Database.ResultSet.rowCount","display":"(Property)\tTitanium.Database.ResultSet.rowCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the current row is still valid</p>","insert":"$0","match":"Titanium.Database.ResultSet.validRow","display":"(Property)\tTitanium.Database.ResultSet.validRow\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The ResultSet instance returned by invoking a database SQL <tt>execute</tt>.</p><hr />","insert":"$0","match":"Ti.Database.ResultSet","display":"(Namespace)\tTi.Database.ResultSet","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Database.ResultSet.close","display":"(Method)\t\tTi.Database.ResultSet.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>retrieve a row value by field index</p><p><code class=\"usage\"><b><u>(Method)Ti.Database.ResultSet.field</u></b><i>:object()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>column index (which is zero based)</span>\n)\n</code>","insert":"(${1:${2:index}})","match":"Ti.Database.ResultSet.field","display":"(Method)\t\tTi.Database.ResultSet.field\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>retrieve a row value by field name</p><p><code class=\"usage\"><b><u>(Method)Ti.Database.ResultSet.fieldByName</u></b><i>:object()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>column name from SQL query</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Ti.Database.ResultSet.fieldByName","display":"(Method)\t\tTi.Database.ResultSet.fieldByName\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Database.ResultSet.fieldCount","display":"(Method)\t\tTi.Database.ResultSet.fieldCount\t:int()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return the field name for field index</p><p><code class=\"usage\"><b><u>(Method)Ti.Database.ResultSet.fieldName</u></b><i>:string()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>field name column index (which is zero based)</span>\n)\n</code>","insert":"(${1:${2:index}})","match":"Ti.Database.ResultSet.fieldName","display":"(Method)\t\tTi.Database.ResultSet.fieldName\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Database.ResultSet.isValidRow","display":"(Method)\t\tTi.Database.ResultSet.isValidRow\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Database.ResultSet.next","display":"(Method)\t\tTi.Database.ResultSet.next\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the number of rows in the result set</p>","insert":"$0","match":"Ti.Database.ResultSet.rowCount","display":"(Property)\tTi.Database.ResultSet.rowCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the current row is still valid</p>","insert":"$0","match":"Ti.Database.ResultSet.validRow","display":"(Property)\tTi.Database.ResultSet.validRow\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Facebook module.  The Facebook module is used for connecting your application with \nFacebook through Facebook Connect.</p><hr />","insert":"$0","match":"Titanium.Facebook","display":"(Namespace)\tTitanium.Facebook","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.addEventListener","display":"(Method)\t\tTitanium.Facebook.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Facebook.LoginButton.html\">Titanium.Facebook.LoginButton</a><p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.createLoginButton</u></b><i>:object()</i><br>(\n\t\t<span><b>params</b><i>:object</i></span>\n\t\t<span class='info'>the parameters for the request. the following keys are valid: apikey</tt> (the application API key), <tt>secret</tt> (the application API secret or null if using a session proxy), <tt>sessionProxy</tt> (the URL to the application session proxy), <tt>style</tt> (the button style - which is either <tt>normal</tt> or <tt>wide</tt>).</span>\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.Facebook.createLoginButton","display":"(Method)\t\tTitanium.Facebook.createLoginButton\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a FB API execute request</p><p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.execute</u></b><i>:void()</i><br>(\n\t\t<span><b>method</b><i>:string</i></span>\n\t\t<span class='info'>method to execute</span>\n\t\t<span><b>params</b><i>:object</i></span>\n\t\t<span class='info'>JSON serializable object or null (if no parameters) to send with the request</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback function to execute upon receiving a response. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed.</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>the data payload for the request. Must either null, a string or a Blob object.</span>\n)\n</code>","insert":"(${1:'${2:method}', {${3:}\\}, function ${4:callback}(${5:}){${6:}\\}, {${0:}\\}})","match":"Titanium.Facebook.execute","display":"(Method)\t\tTitanium.Facebook.execute\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Facebook.fireEvent","display":"(Method)\t\tTitanium.Facebook.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>checks the existing permission and returns true if the user has granted the requested permission</p><p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.hasPermission</u></b><i>:boolean()</i><br>(\n\t\t<span><b>permission</b><i>:string</i></span>\n\t\t<span class='info'>the permission to check</span>\n)\n</code>","insert":"(${1:'${0:permission}'})","match":"Titanium.Facebook.hasPermission","display":"(Method)\t\tTitanium.Facebook.hasPermission\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Facebook.isLoggedIn","display":"(Method)\t\tTitanium.Facebook.isLoggedIn\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a stream request to FB</p><p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.publishStream</u></b><i>:void()</i><br>(\n\t\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the stream post</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>the data to include in the post. Must be JSON serializable or null.</span>\n\t\t<span><b>target</b><i>:string</i></span>\n\t\t<span class='info'>the target user id to publish the stream or null if the logged in users account</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback function to execute upon receiving a response. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed. the <tt>cancel</tt> property will be set to true if the user cancelled the dialog.</span>\n)\n</code>","insert":"(${1:'${2:title}', {${3:}\\}, '${4:target}', function ${5:callback}(${6:}){${0:}\\}})","match":"Titanium.Facebook.publishStream","display":"(Method)\t\tTitanium.Facebook.publishStream\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a FQL query against the FB API</p><p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.query</u></b><i>:void()</i><br>(\n\t\t<span><b>fql</b><i>:string</i></span>\n\t\t<span class='info'>the FQL query to execute</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback to execute with results once the query is completed. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed.</span>\n)\n</code>","insert":"(${1:'${2:fql}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.query","display":"(Method)\t\tTitanium.Facebook.query\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.removeEventListener","display":"(Method)\t\tTitanium.Facebook.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>request a special permission from the user</p><p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.requestPermission</u></b><i>:void()</i><br>(\n\t\t<span><b>permission</b><i>:string</i></span>\n\t\t<span class='info'>name of the permission</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback function to execute upon receiving a response. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed. the <tt>cancel</tt> property will be set to true if the user cancelled the dialog.</span>\n)\n</code>","insert":"(${1:'${2:permission}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.requestPermission","display":"(Method)\t\tTitanium.Facebook.requestPermission\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return true if the user has logged in</p>","insert":"$0","match":"Titanium.Facebook.loggedIn","display":"(Property)\tTitanium.Facebook.loggedIn\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return a dictionary of permissions with the keys being the name of the permission and the value being a boolean of true if granted, false if not granted</p>","insert":"$0","match":"Titanium.Facebook.permissions","display":"(Property)\tTitanium.Facebook.permissions\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the special properties of the session</p>","insert":"$0","match":"Titanium.Facebook.session","display":"(Property)\tTitanium.Facebook.session\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the unique user id returned from Facebook. returns 0 if not logged in</p>","insert":"$0","match":"Titanium.Facebook.userId","display":"(Property)\tTitanium.Facebook.userId\t:long","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Facebook module.  The Facebook module is used for connecting your application with \nFacebook through Facebook Connect.</p><hr />","insert":"$0","match":"Ti.Facebook","display":"(Namespace)\tTi.Facebook","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.addEventListener","display":"(Method)\t\tTi.Facebook.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Facebook.LoginButton.html\">Titanium.Facebook.LoginButton</a><p><code class=\"usage\"><b><u>(Method)Ti.Facebook.createLoginButton</u></b><i>:object()</i><br>(\n\t\t<span><b>params</b><i>:object</i></span>\n\t\t<span class='info'>the parameters for the request. the following keys are valid: apikey</tt> (the application API key), <tt>secret</tt> (the application API secret or null if using a session proxy), <tt>sessionProxy</tt> (the URL to the application session proxy), <tt>style</tt> (the button style - which is either <tt>normal</tt> or <tt>wide</tt>).</span>\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.Facebook.createLoginButton","display":"(Method)\t\tTi.Facebook.createLoginButton\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a FB API execute request</p><p><code class=\"usage\"><b><u>(Method)Ti.Facebook.execute</u></b><i>:void()</i><br>(\n\t\t<span><b>method</b><i>:string</i></span>\n\t\t<span class='info'>method to execute</span>\n\t\t<span><b>params</b><i>:object</i></span>\n\t\t<span class='info'>JSON serializable object or null (if no parameters) to send with the request</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback function to execute upon receiving a response. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed.</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>the data payload for the request. Must either null, a string or a Blob object.</span>\n)\n</code>","insert":"(${1:'${2:method}', {${3:}\\}, function ${4:callback}(${5:}){${6:}\\}, {${0:}\\}})","match":"Ti.Facebook.execute","display":"(Method)\t\tTi.Facebook.execute\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Facebook.fireEvent","display":"(Method)\t\tTi.Facebook.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>checks the existing permission and returns true if the user has granted the requested permission</p><p><code class=\"usage\"><b><u>(Method)Ti.Facebook.hasPermission</u></b><i>:boolean()</i><br>(\n\t\t<span><b>permission</b><i>:string</i></span>\n\t\t<span class='info'>the permission to check</span>\n)\n</code>","insert":"(${1:'${0:permission}'})","match":"Ti.Facebook.hasPermission","display":"(Method)\t\tTi.Facebook.hasPermission\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Facebook.isLoggedIn","display":"(Method)\t\tTi.Facebook.isLoggedIn\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a stream request to FB</p><p><code class=\"usage\"><b><u>(Method)Ti.Facebook.publishStream</u></b><i>:void()</i><br>(\n\t\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the stream post</span>\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>the data to include in the post. Must be JSON serializable or null.</span>\n\t\t<span><b>target</b><i>:string</i></span>\n\t\t<span class='info'>the target user id to publish the stream or null if the logged in users account</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback function to execute upon receiving a response. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed. the <tt>cancel</tt> property will be set to true if the user cancelled the dialog.</span>\n)\n</code>","insert":"(${1:'${2:title}', {${3:}\\}, '${4:target}', function ${5:callback}(${6:}){${0:}\\}})","match":"Ti.Facebook.publishStream","display":"(Method)\t\tTi.Facebook.publishStream\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>execute a FQL query against the FB API</p><p><code class=\"usage\"><b><u>(Method)Ti.Facebook.query</u></b><i>:void()</i><br>(\n\t\t<span><b>fql</b><i>:string</i></span>\n\t\t<span class='info'>the FQL query to execute</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback to execute with results once the query is completed. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed.</span>\n)\n</code>","insert":"(${1:'${2:fql}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.query","display":"(Method)\t\tTi.Facebook.query\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.removeEventListener","display":"(Method)\t\tTi.Facebook.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>request a special permission from the user</p><p><code class=\"usage\"><b><u>(Method)Ti.Facebook.requestPermission</u></b><i>:void()</i><br>(\n\t\t<span><b>permission</b><i>:string</i></span>\n\t\t<span class='info'>name of the permission</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the callback function to execute upon receiving a response. the result object will contain a success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed. the <tt>cancel</tt> property will be set to true if the user cancelled the dialog.</span>\n)\n</code>","insert":"(${1:'${2:permission}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.requestPermission","display":"(Method)\t\tTi.Facebook.requestPermission\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return true if the user has logged in</p>","insert":"$0","match":"Ti.Facebook.loggedIn","display":"(Property)\tTi.Facebook.loggedIn\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return a dictionary of permissions with the keys being the name of the permission and the value being a boolean of true if granted, false if not granted</p>","insert":"$0","match":"Ti.Facebook.permissions","display":"(Property)\tTi.Facebook.permissions\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the special properties of the session</p>","insert":"$0","match":"Ti.Facebook.session","display":"(Property)\tTi.Facebook.session\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the unique user id returned from Facebook. returns 0 if not logged in</p>","insert":"$0","match":"Ti.Facebook.userId","display":"(Property)\tTi.Facebook.userId\t:long","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Login Button created by <a href=\"Titanium.Facebook.createLoginButton-method.html\">Titanium.Facebook.createLoginButton</a>.</p><hr />","insert":"$0","match":"Titanium.Facebook.LoginButton","display":"(Namespace)\tTitanium.Facebook.LoginButton","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Facebook.LoginButton.add","display":"(Method)\t\tTitanium.Facebook.LoginButton.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.LoginButton.addEventListener","display":"(Method)\t\tTitanium.Facebook.LoginButton.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.LoginButton.animate","display":"(Method)\t\tTitanium.Facebook.LoginButton.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Facebook.LoginButton.fireEvent","display":"(Method)\t\tTitanium.Facebook.LoginButton.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Facebook.LoginButton.hide","display":"(Method)\t\tTitanium.Facebook.LoginButton.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Facebook.LoginButton.remove","display":"(Method)\t\tTitanium.Facebook.LoginButton.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Facebook.LoginButton.removeEventListener","display":"(Method)\t\tTitanium.Facebook.LoginButton.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Facebook.LoginButton.show","display":"(Method)\t\tTitanium.Facebook.LoginButton.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.Facebook.LoginButton.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.Facebook.LoginButton.toImage","display":"(Method)\t\tTitanium.Facebook.LoginButton.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.Facebook.LoginButton.anchorPoint","display":"(Property)\tTitanium.Facebook.LoginButton.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.Facebook.LoginButton.animatedCenterPoint","display":"(Property)\tTitanium.Facebook.LoginButton.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.Facebook.LoginButton.backgroundColor","display":"(Property)\tTitanium.Facebook.LoginButton.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.Facebook.LoginButton.backgroundGradient","display":"(Property)\tTitanium.Facebook.LoginButton.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.Facebook.LoginButton.backgroundImage","display":"(Property)\tTitanium.Facebook.LoginButton.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.Facebook.LoginButton.backgroundLeftCap","display":"(Property)\tTitanium.Facebook.LoginButton.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.Facebook.LoginButton.backgroundTopCap","display":"(Property)\tTitanium.Facebook.LoginButton.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.Facebook.LoginButton.borderColor","display":"(Property)\tTitanium.Facebook.LoginButton.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.Facebook.LoginButton.borderRadius","display":"(Property)\tTitanium.Facebook.LoginButton.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.Facebook.LoginButton.borderWidth","display":"(Property)\tTitanium.Facebook.LoginButton.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Facebook.LoginButton.bottom","display":"(Property)\tTitanium.Facebook.LoginButton.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.Facebook.LoginButton.center","display":"(Property)\tTitanium.Facebook.LoginButton.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.Facebook.LoginButton.height","display":"(Property)\tTitanium.Facebook.LoginButton.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Facebook.LoginButton.left","display":"(Property)\tTitanium.Facebook.LoginButton.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.Facebook.LoginButton.opacity","display":"(Property)\tTitanium.Facebook.LoginButton.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Facebook.LoginButton.right","display":"(Property)\tTitanium.Facebook.LoginButton.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.Facebook.LoginButton.size","display":"(Property)\tTitanium.Facebook.LoginButton.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Facebook.LoginButton.top","display":"(Property)\tTitanium.Facebook.LoginButton.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.Facebook.LoginButton.touchEnabled","display":"(Property)\tTitanium.Facebook.LoginButton.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.Facebook.LoginButton.transform","display":"(Property)\tTitanium.Facebook.LoginButton.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.Facebook.LoginButton.visible","display":"(Property)\tTitanium.Facebook.LoginButton.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.Facebook.LoginButton.width","display":"(Property)\tTitanium.Facebook.LoginButton.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.Facebook.LoginButton.zIndex","display":"(Property)\tTitanium.Facebook.LoginButton.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Login Button created by <a href=\"Titanium.Facebook.createLoginButton-method.html\">Titanium.Facebook.createLoginButton</a>.</p><hr />","insert":"$0","match":"Ti.Facebook.LoginButton","display":"(Namespace)\tTi.Facebook.LoginButton","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Facebook.LoginButton.add","display":"(Method)\t\tTi.Facebook.LoginButton.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.LoginButton.addEventListener","display":"(Method)\t\tTi.Facebook.LoginButton.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.LoginButton.animate","display":"(Method)\t\tTi.Facebook.LoginButton.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Facebook.LoginButton.fireEvent","display":"(Method)\t\tTi.Facebook.LoginButton.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Facebook.LoginButton.hide","display":"(Method)\t\tTi.Facebook.LoginButton.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Facebook.LoginButton.remove","display":"(Method)\t\tTi.Facebook.LoginButton.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Facebook.LoginButton.removeEventListener","display":"(Method)\t\tTi.Facebook.LoginButton.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Facebook.LoginButton.show","display":"(Method)\t\tTi.Facebook.LoginButton.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.Facebook.LoginButton.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.Facebook.LoginButton.toImage","display":"(Method)\t\tTi.Facebook.LoginButton.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.Facebook.LoginButton.anchorPoint","display":"(Property)\tTi.Facebook.LoginButton.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.Facebook.LoginButton.animatedCenterPoint","display":"(Property)\tTi.Facebook.LoginButton.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.Facebook.LoginButton.backgroundColor","display":"(Property)\tTi.Facebook.LoginButton.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.Facebook.LoginButton.backgroundGradient","display":"(Property)\tTi.Facebook.LoginButton.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.Facebook.LoginButton.backgroundImage","display":"(Property)\tTi.Facebook.LoginButton.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.Facebook.LoginButton.backgroundLeftCap","display":"(Property)\tTi.Facebook.LoginButton.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.Facebook.LoginButton.backgroundTopCap","display":"(Property)\tTi.Facebook.LoginButton.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.Facebook.LoginButton.borderColor","display":"(Property)\tTi.Facebook.LoginButton.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.Facebook.LoginButton.borderRadius","display":"(Property)\tTi.Facebook.LoginButton.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.Facebook.LoginButton.borderWidth","display":"(Property)\tTi.Facebook.LoginButton.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Facebook.LoginButton.bottom","display":"(Property)\tTi.Facebook.LoginButton.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.Facebook.LoginButton.center","display":"(Property)\tTi.Facebook.LoginButton.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.Facebook.LoginButton.height","display":"(Property)\tTi.Facebook.LoginButton.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Facebook.LoginButton.left","display":"(Property)\tTi.Facebook.LoginButton.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.Facebook.LoginButton.opacity","display":"(Property)\tTi.Facebook.LoginButton.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Facebook.LoginButton.right","display":"(Property)\tTi.Facebook.LoginButton.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.Facebook.LoginButton.size","display":"(Property)\tTi.Facebook.LoginButton.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Facebook.LoginButton.top","display":"(Property)\tTi.Facebook.LoginButton.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.Facebook.LoginButton.touchEnabled","display":"(Property)\tTi.Facebook.LoginButton.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.Facebook.LoginButton.transform","display":"(Property)\tTi.Facebook.LoginButton.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.Facebook.LoginButton.visible","display":"(Property)\tTi.Facebook.LoginButton.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.Facebook.LoginButton.width","display":"(Property)\tTi.Facebook.LoginButton.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.Facebook.LoginButton.zIndex","display":"(Property)\tTi.Facebook.LoginButton.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Filesystem module.  The Filesystem module is used for reading and saving files and \ndirectories on the device.</p><hr />","insert":"$0","match":"Titanium.Filesystem","display":"(Namespace)\tTitanium.Filesystem","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Filesystem.addEventListener","display":"(Method)\t\tTitanium.Filesystem.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Filesystem.File.html\">Titanium.Filesystem.File</a><p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.createFile</u></b><i>:object()</i><br>(\n{\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Filesystem.createFile","display":"(Method)\t\tTitanium.Filesystem.createFile\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.createTempDirectory","display":"(Method)\t\tTitanium.Filesystem.createTempDirectory\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.createTempFile","display":"(Method)\t\tTitanium.Filesystem.createTempFile\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Filesystem.fireEvent","display":"(Method)\t\tTitanium.Filesystem.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a fully formed file path as a <a href=\"Titanium.Filesystem.File-object.html\">Titanium.Filesystem.File</a> object</p><p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.getFile</u></b><i>:Titanium.Filesystem.File()</i><br>(\n\t\t<span><b>path</b><i>:string</i></span>\n\t\t<span class='info'>one or more path arguments to form the full path joined together with the platform specific path separator. if a relative path is passed, the full path will be relative to the application resource folder.</span>\n)\n</code>","insert":"(${1:'${0:path}'})","match":"Titanium.Filesystem.getFile","display":"(Method)\t\tTitanium.Filesystem.getFile\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.isExteralStoragePresent","display":"(Method)\t\tTitanium.Filesystem.isExteralStoragePresent\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Filesystem.removeEventListener","display":"(Method)\t\tTitanium.Filesystem.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>constant for append mode for file operations</p>","insert":"$0","match":"Titanium.Filesystem.MODE_APPEND","display":"(Property)\tTitanium.Filesystem.MODE_APPEND\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for read mode for file operations</p>","insert":"$0","match":"Titanium.Filesystem.MODE_READ","display":"(Property)\tTitanium.Filesystem.MODE_READ\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for write mode for file operations</p>","insert":"$0","match":"Titanium.Filesystem.MODE_WRITE","display":"(Property)\tTitanium.Filesystem.MODE_WRITE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application data directory is located. this directory should be used to place applications-specific files. on iPhone, this directory is also backed up.</p>","insert":"$0","match":"Titanium.Filesystem.applicationDataDirectory","display":"(Property)\tTitanium.Filesystem.applicationDataDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application is located</p>","insert":"$0","match":"Titanium.Filesystem.applicationDirectory","display":"(Property)\tTitanium.Filesystem.applicationDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly platform specific line ending constant</p>","insert":"$0","match":"Titanium.Filesystem.lineEnding","display":"(Property)\tTitanium.Filesystem.lineEnding\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application resources are located</p>","insert":"$0","match":"Titanium.Filesystem.resourcesDirectory","display":"(Property)\tTitanium.Filesystem.resourcesDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly path separator constant</p>","insert":"$0","match":"Titanium.Filesystem.separator","display":"(Property)\tTitanium.Filesystem.separator\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application can place temporary files</p>","insert":"$0","match":"Titanium.Filesystem.tempDirectory","display":"(Property)\tTitanium.Filesystem.tempDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Filesystem module.  The Filesystem module is used for reading and saving files and \ndirectories on the device.</p><hr />","insert":"$0","match":"Ti.Filesystem","display":"(Namespace)\tTi.Filesystem","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Filesystem.addEventListener","display":"(Method)\t\tTi.Filesystem.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Filesystem.File.html\">Titanium.Filesystem.File</a><p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.createFile</u></b><i>:object()</i><br>(\n{\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Filesystem.createFile","display":"(Method)\t\tTi.Filesystem.createFile\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.createTempDirectory","display":"(Method)\t\tTi.Filesystem.createTempDirectory\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.createTempFile","display":"(Method)\t\tTi.Filesystem.createTempFile\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Filesystem.fireEvent","display":"(Method)\t\tTi.Filesystem.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a fully formed file path as a <a href=\"Titanium.Filesystem.File-object.html\">Titanium.Filesystem.File</a> object</p><p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.getFile</u></b><i>:Titanium.Filesystem.File()</i><br>(\n\t\t<span><b>path</b><i>:string</i></span>\n\t\t<span class='info'>one or more path arguments to form the full path joined together with the platform specific path separator. if a relative path is passed, the full path will be relative to the application resource folder.</span>\n)\n</code>","insert":"(${1:'${0:path}'})","match":"Ti.Filesystem.getFile","display":"(Method)\t\tTi.Filesystem.getFile\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.isExteralStoragePresent","display":"(Method)\t\tTi.Filesystem.isExteralStoragePresent\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Filesystem.removeEventListener","display":"(Method)\t\tTi.Filesystem.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>constant for append mode for file operations</p>","insert":"$0","match":"Ti.Filesystem.MODE_APPEND","display":"(Property)\tTi.Filesystem.MODE_APPEND\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for read mode for file operations</p>","insert":"$0","match":"Ti.Filesystem.MODE_READ","display":"(Property)\tTi.Filesystem.MODE_READ\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for write mode for file operations</p>","insert":"$0","match":"Ti.Filesystem.MODE_WRITE","display":"(Property)\tTi.Filesystem.MODE_WRITE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application data directory is located. this directory should be used to place applications-specific files. on iPhone, this directory is also backed up.</p>","insert":"$0","match":"Ti.Filesystem.applicationDataDirectory","display":"(Property)\tTi.Filesystem.applicationDataDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application is located</p>","insert":"$0","match":"Ti.Filesystem.applicationDirectory","display":"(Property)\tTi.Filesystem.applicationDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly platform specific line ending constant</p>","insert":"$0","match":"Ti.Filesystem.lineEnding","display":"(Property)\tTi.Filesystem.lineEnding\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application resources are located</p>","insert":"$0","match":"Ti.Filesystem.resourcesDirectory","display":"(Property)\tTi.Filesystem.resourcesDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly path separator constant</p>","insert":"$0","match":"Ti.Filesystem.separator","display":"(Property)\tTi.Filesystem.separator\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly constant where your application can place temporary files</p>","insert":"$0","match":"Ti.Filesystem.tempDirectory","display":"(Property)\tTi.Filesystem.tempDirectory\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The File object which support various filesystem based operations.</p><hr />","insert":"$0","match":"Titanium.Filesystem.File","display":"(Namespace)\tTitanium.Filesystem.File","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Filesystem.File.addEventListener","display":"(Method)\t\tTitanium.Filesystem.File.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.createDirectory","display":"(Method)\t\tTitanium.Filesystem.File.createDirectory\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.createFile","display":"(Method)\t\tTitanium.Filesystem.File.createFile\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.createTimestamp","display":"(Method)\t\tTitanium.Filesystem.File.createTimestamp\t:long()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>delete the file directory path</p><p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.deleteDirectory</u></b><i>:boolean()</i><br>(\n\t\t<span><b>recursive</b><i>:boolean</i></span>\n\t\t<span class='info'>pass true to recursively delete any contents. defaults to false</span>\n)\n</code>","insert":"(${1:${2:recursive}})","match":"Titanium.Filesystem.File.deleteDirectory","display":"(Method)\t\tTitanium.Filesystem.File.deleteDirectory\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.deleteFile","display":"(Method)\t\tTitanium.Filesystem.File.deleteFile\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.executable","display":"(Method)\t\tTitanium.Filesystem.File.executable\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.exists","display":"(Method)\t\tTitanium.Filesystem.File.exists\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.extension","display":"(Method)\t\tTitanium.Filesystem.File.extension\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Filesystem.File.fireEvent","display":"(Method)\t\tTitanium.Filesystem.File.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.getDirectoryListing","display":"(Method)\t\tTitanium.Filesystem.File.getDirectoryListing\t:array()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.getParent","display":"(Method)\t\tTitanium.Filesystem.File.getParent\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.hidden","display":"(Method)\t\tTitanium.Filesystem.File.hidden\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.modificationTimestamp","display":"(Method)\t\tTitanium.Filesystem.File.modificationTimestamp\t:long()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>move the file to another path</p><p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.move</u></b><i>:boolean()</i><br>(\n\t\t<span><b>newpath</b><i>:string|object</i></span>\n\t\t<span class='info'>new location</span>\n)\n</code>","insert":"(${1:${2:newpath}})","match":"Titanium.Filesystem.File.move","display":"(Method)\t\tTitanium.Filesystem.File.move\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.name","display":"(Method)\t\tTitanium.Filesystem.File.name\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.nativePath","display":"(Method)\t\tTitanium.Filesystem.File.nativePath\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.read","display":"(Method)\t\tTitanium.Filesystem.File.read\t:Titanium.Blob()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.readonly","display":"(Method)\t\tTitanium.Filesystem.File.readonly\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Filesystem.File.removeEventListener","display":"(Method)\t\tTitanium.Filesystem.File.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>rename the file</p><p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.rename</u></b><i>:boolean()</i><br>(\n\t\t<span><b>newname</b><i>:string</i></span>\n\t\t<span class='info'>new name</span>\n)\n</code>","insert":"(${1:'${0:newname}'})","match":"Titanium.Filesystem.File.rename","display":"(Method)\t\tTitanium.Filesystem.File.rename\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.setExecutable","display":"(Method)\t\tTitanium.Filesystem.File.setExecutable\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.setHidden","display":"(Method)\t\tTitanium.Filesystem.File.setHidden\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.setReadonly","display":"(Method)\t\tTitanium.Filesystem.File.setReadonly\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.spaceAvailable","display":"(Method)\t\tTitanium.Filesystem.File.spaceAvailable\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.symbolicLink","display":"(Method)\t\tTitanium.Filesystem.File.symbolicLink\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>write the contents to file</p><p><code class=\"usage\"><b><u>(Method)Titanium.Filesystem.File.write</u></b><i>:boolean()</i><br>(\n\t\t<span><b>contents</b><i>:string|object</i></span>\n\t\t<span class='info'>write the contents of string, blob or [[Titanium.Filesystem.File]] to file</span>\n)\n</code>","insert":"(${1:${2:contents}})","match":"Titanium.Filesystem.File.write","display":"(Method)\t\tTitanium.Filesystem.File.write\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Filesystem.File.writeable","display":"(Method)\t\tTitanium.Filesystem.File.writeable\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The File object which support various filesystem based operations.</p><hr />","insert":"$0","match":"Ti.Filesystem.File","display":"(Namespace)\tTi.Filesystem.File","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Filesystem.File.addEventListener","display":"(Method)\t\tTi.Filesystem.File.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.createDirectory","display":"(Method)\t\tTi.Filesystem.File.createDirectory\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.createFile","display":"(Method)\t\tTi.Filesystem.File.createFile\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.createTimestamp","display":"(Method)\t\tTi.Filesystem.File.createTimestamp\t:long()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>delete the file directory path</p><p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.deleteDirectory</u></b><i>:boolean()</i><br>(\n\t\t<span><b>recursive</b><i>:boolean</i></span>\n\t\t<span class='info'>pass true to recursively delete any contents. defaults to false</span>\n)\n</code>","insert":"(${1:${2:recursive}})","match":"Ti.Filesystem.File.deleteDirectory","display":"(Method)\t\tTi.Filesystem.File.deleteDirectory\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.deleteFile","display":"(Method)\t\tTi.Filesystem.File.deleteFile\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.executable","display":"(Method)\t\tTi.Filesystem.File.executable\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.exists","display":"(Method)\t\tTi.Filesystem.File.exists\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.extension","display":"(Method)\t\tTi.Filesystem.File.extension\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Filesystem.File.fireEvent","display":"(Method)\t\tTi.Filesystem.File.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.getDirectoryListing","display":"(Method)\t\tTi.Filesystem.File.getDirectoryListing\t:array()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.getParent","display":"(Method)\t\tTi.Filesystem.File.getParent\t:Titanium.Filesystem.File()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.hidden","display":"(Method)\t\tTi.Filesystem.File.hidden\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.modificationTimestamp","display":"(Method)\t\tTi.Filesystem.File.modificationTimestamp\t:long()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>move the file to another path</p><p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.move</u></b><i>:boolean()</i><br>(\n\t\t<span><b>newpath</b><i>:string|object</i></span>\n\t\t<span class='info'>new location</span>\n)\n</code>","insert":"(${1:${2:newpath}})","match":"Ti.Filesystem.File.move","display":"(Method)\t\tTi.Filesystem.File.move\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.name","display":"(Method)\t\tTi.Filesystem.File.name\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.nativePath","display":"(Method)\t\tTi.Filesystem.File.nativePath\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.read","display":"(Method)\t\tTi.Filesystem.File.read\t:Titanium.Blob()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.readonly","display":"(Method)\t\tTi.Filesystem.File.readonly\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Filesystem.File.removeEventListener","display":"(Method)\t\tTi.Filesystem.File.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>rename the file</p><p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.rename</u></b><i>:boolean()</i><br>(\n\t\t<span><b>newname</b><i>:string</i></span>\n\t\t<span class='info'>new name</span>\n)\n</code>","insert":"(${1:'${0:newname}'})","match":"Ti.Filesystem.File.rename","display":"(Method)\t\tTi.Filesystem.File.rename\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.setExecutable","display":"(Method)\t\tTi.Filesystem.File.setExecutable\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.setHidden","display":"(Method)\t\tTi.Filesystem.File.setHidden\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.setReadonly","display":"(Method)\t\tTi.Filesystem.File.setReadonly\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.spaceAvailable","display":"(Method)\t\tTi.Filesystem.File.spaceAvailable\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.symbolicLink","display":"(Method)\t\tTi.Filesystem.File.symbolicLink\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>write the contents to file</p><p><code class=\"usage\"><b><u>(Method)Ti.Filesystem.File.write</u></b><i>:boolean()</i><br>(\n\t\t<span><b>contents</b><i>:string|object</i></span>\n\t\t<span class='info'>write the contents of string, blob or [[Titanium.Filesystem.File]] to file</span>\n)\n</code>","insert":"(${1:${2:contents}})","match":"Ti.Filesystem.File.write","display":"(Method)\t\tTi.Filesystem.File.write\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Filesystem.File.writeable","display":"(Method)\t\tTi.Filesystem.File.writeable\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Geolocation module.  The Geolocation module is used for accessing device location based information.</p><hr />","insert":"$0","match":"Titanium.Geolocation","display":"(Namespace)\tTitanium.Geolocation","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Geolocation.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Geolocation.addEventListener","display":"(Method)\t\tTitanium.Geolocation.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Geolocation.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Geolocation.fireEvent","display":"(Method)\t\tTitanium.Geolocation.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Geolocation.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Geolocation.removeEventListener","display":"(Method)\t\tTitanium.Geolocation.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Geolocation.setShowCalibration","display":"(Method)\t\tTitanium.Geolocation.setShowCalibration\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Titanium.Geolocation.ACCURACY_BEST","display":"(Property)\tTitanium.Geolocation.ACCURACY_BEST\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Titanium.Geolocation.ACCURACY_HUNDRED_METERS","display":"(Property)\tTitanium.Geolocation.ACCURACY_HUNDRED_METERS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Titanium.Geolocation.ACCURACY_KILOMETER","display":"(Property)\tTitanium.Geolocation.ACCURACY_KILOMETER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Titanium.Geolocation.ACCURACY_NEAREST_TEN_METERS","display":"(Property)\tTitanium.Geolocation.ACCURACY_NEAREST_TEN_METERS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Titanium.Geolocation.ACCURACY_THREE_KILOMETERS","display":"(Property)\tTitanium.Geolocation.ACCURACY_THREE_KILOMETERS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the user has enabled or disable location services for the device (not the application).  This is an iPhone only property.</p>","insert":"$0","match":"Titanium.Geolocation.locationServicesEnabled","display":"(Property)\tTitanium.Geolocation.locationServicesEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the calibration UI can show</p>","insert":"$0","match":"Titanium.Geolocation.showCalibration","display":"(Property)\tTitanium.Geolocation.showCalibration\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Geolocation module.  The Geolocation module is used for accessing device location based information.</p><hr />","insert":"$0","match":"Ti.Geolocation","display":"(Namespace)\tTi.Geolocation","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Geolocation.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Geolocation.addEventListener","display":"(Method)\t\tTi.Geolocation.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Geolocation.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Geolocation.fireEvent","display":"(Method)\t\tTi.Geolocation.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Geolocation.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Geolocation.removeEventListener","display":"(Method)\t\tTi.Geolocation.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Geolocation.setShowCalibration","display":"(Method)\t\tTi.Geolocation.setShowCalibration\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Ti.Geolocation.ACCURACY_BEST","display":"(Property)\tTi.Geolocation.ACCURACY_BEST\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Ti.Geolocation.ACCURACY_HUNDRED_METERS","display":"(Property)\tTi.Geolocation.ACCURACY_HUNDRED_METERS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Ti.Geolocation.ACCURACY_KILOMETER","display":"(Property)\tTi.Geolocation.ACCURACY_KILOMETER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Ti.Geolocation.ACCURACY_NEAREST_TEN_METERS","display":"(Property)\tTi.Geolocation.ACCURACY_NEAREST_TEN_METERS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>accuracy constant</p>","insert":"$0","match":"Ti.Geolocation.ACCURACY_THREE_KILOMETERS","display":"(Property)\tTi.Geolocation.ACCURACY_THREE_KILOMETERS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the user has enabled or disable location services for the device (not the application).  This is an iPhone only property.</p>","insert":"$0","match":"Ti.Geolocation.locationServicesEnabled","display":"(Property)\tTi.Geolocation.locationServicesEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the calibration UI can show</p>","insert":"$0","match":"Ti.Geolocation.showCalibration","display":"(Property)\tTi.Geolocation.showCalibration\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Gestures module.  The Gesture module is responsible for high level device gestures that are device-wide.</p><hr />","insert":"$0","match":"Titanium.Gesture","display":"(Namespace)\tTitanium.Gesture","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Gesture.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Gesture.addEventListener","display":"(Method)\t\tTitanium.Gesture.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Gesture.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Gesture.fireEvent","display":"(Method)\t\tTitanium.Gesture.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Gesture.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Gesture.removeEventListener","display":"(Method)\t\tTitanium.Gesture.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Gestures module.  The Gesture module is responsible for high level device gestures that are device-wide.</p><hr />","insert":"$0","match":"Ti.Gesture","display":"(Namespace)\tTi.Gesture","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Gesture.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Gesture.addEventListener","display":"(Method)\t\tTi.Gesture.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Gesture.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Gesture.fireEvent","display":"(Method)\t\tTi.Gesture.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Gesture.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Gesture.removeEventListener","display":"(Method)\t\tTi.Gesture.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Map module.  The Map module is used for creating in-application native maps.</p><hr />","insert":"$0","match":"Titanium.Map","display":"(Namespace)\tTitanium.Map","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Map.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.addEventListener","display":"(Method)\t\tTitanium.Map.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Map.Annotation.html\">Titanium.Map.Annotation</a><p><code class=\"usage\"><b><u>(Method)Titanium.Map.createAnnotation</u></b><i>:object()</i><br>(\n{\n\t<span><b>animate</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the pin should animate when dropped</p></span>\n\t<span><b>leftButton</b><i>:int,string</i></span>\n\t\t<span class='info'>the left button image on the annotation. must either be a button type constant or url</p></span>\n\t<span><b>leftView</b><i>:object</i></span>\n\t\t<span class='info'>a left view that is displayed on the annotation</p></span>\n\t<span><b>pincolor</b><i>:int</i></span>\n\t\t<span class='info'>the pin color as one of <a href=\"Titanium.Map.ANNOTATION_RED.html\">Titanium.Map.ANNOTATION_RED</a>, <a href=\"Titanium.Map.ANNOTATION_GREEN.html\">Titanium.Map.ANNOTATION_GREEN</a> or <a href=\"Titanium.Map.ANNOTATION_PURPLE.html\">Titanium.Map.ANNOTATION_PURPLE</a>.</p></span>\n\t<span><b>rightButton</b><i>:int,string</i></span>\n\t\t<span class='info'>the right button image on the annotation. must either be a button type constant or url</p></span>\n\t<span><b>rightView</b><i>:object</i></span>\n\t\t<span class='info'>a right view that is displayed on the annotation</p></span>\n\t<span><b>subtitle</b><i>:string</i></span>\n\t\t<span class='info'>the secondary title of the annotation view</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the primary title of the annotation view</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Map.createAnnotation","display":"(Method)\t\tTitanium.Map.createAnnotation\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Map.MapView.html\">Titanium.Map.MapView</a><p><code class=\"usage\"><b><u>(Method)Titanium.Map.createMapView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animate</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean is mapping actions should be animated</p></span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>annotations</b><i>:array</i></span>\n\t\t<span class='info'>an array of annotations to add to the map</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>location</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p></span>\n\t<span><b>mapType</b><i>:int</i></span>\n\t\t<span class='info'>the map type constant of either <a href=\"Titanium.Map.STANDARD_TYPE-property.html\">Titanium.Map.STANDARD_TYPE</a>, <a href=\"Titanium.Map.SATELLITE_TYPE-property.html\">Titanium.Map.SATELLITE_TYPE</a> or <a href=\"Titanium.Map.HYBRID_TYPE-property.html\">Titanium.Map.HYBRID_TYPE</a>.</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>region</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p></span>\n\t<span><b>regionFit</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the map should attempt to fit the map view into the region in the visible view</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>userLocation</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the map should show the user's current device location as a pin on the map</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Map.createMapView","display":"(Method)\t\tTitanium.Map.createMapView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Map.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Map.fireEvent","display":"(Method)\t\tTitanium.Map.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Map.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.removeEventListener","display":"(Method)\t\tTitanium.Map.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The head of the pin is green. Green pins indicate starting points on the map.</p>","insert":"$0","match":"Titanium.Map.ANNOTATION_GREEN","display":"(Property)\tTitanium.Map.ANNOTATION_GREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The head of the pin is purple. Purple pins indicate user-specified points on the map.</p>","insert":"$0","match":"Titanium.Map.ANNOTATION_PURPLE","display":"(Property)\tTitanium.Map.ANNOTATION_PURPLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The head of the pin is red. Red pins indicate destination points on the map.</p>","insert":"$0","match":"Titanium.Map.ANNOTATION_RED","display":"(Property)\tTitanium.Map.ANNOTATION_RED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Displays a satellite image of the area with road and road name information layered on top.</p>","insert":"$0","match":"Titanium.Map.HYBRID_TYPE","display":"(Property)\tTitanium.Map.HYBRID_TYPE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Displays satellite imagery of the area.</p>","insert":"$0","match":"Titanium.Map.SATELLITE_TYPE","display":"(Property)\tTitanium.Map.SATELLITE_TYPE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Displays a street map that shows the position of all roads and some road names.</p>","insert":"$0","match":"Titanium.Map.STANDARD_TYPE","display":"(Property)\tTitanium.Map.STANDARD_TYPE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Map module.  The Map module is used for creating in-application native maps.</p><hr />","insert":"$0","match":"Ti.Map","display":"(Namespace)\tTi.Map","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Map.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.addEventListener","display":"(Method)\t\tTi.Map.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Map.Annotation.html\">Titanium.Map.Annotation</a><p><code class=\"usage\"><b><u>(Method)Ti.Map.createAnnotation</u></b><i>:object()</i><br>(\n{\n\t<span><b>animate</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the pin should animate when dropped</p></span>\n\t<span><b>leftButton</b><i>:int,string</i></span>\n\t\t<span class='info'>the left button image on the annotation. must either be a button type constant or url</p></span>\n\t<span><b>leftView</b><i>:object</i></span>\n\t\t<span class='info'>a left view that is displayed on the annotation</p></span>\n\t<span><b>pincolor</b><i>:int</i></span>\n\t\t<span class='info'>the pin color as one of <a href=\"Titanium.Map.ANNOTATION_RED.html\">Titanium.Map.ANNOTATION_RED</a>, <a href=\"Titanium.Map.ANNOTATION_GREEN.html\">Titanium.Map.ANNOTATION_GREEN</a> or <a href=\"Titanium.Map.ANNOTATION_PURPLE.html\">Titanium.Map.ANNOTATION_PURPLE</a>.</p></span>\n\t<span><b>rightButton</b><i>:int,string</i></span>\n\t\t<span class='info'>the right button image on the annotation. must either be a button type constant or url</p></span>\n\t<span><b>rightView</b><i>:object</i></span>\n\t\t<span class='info'>a right view that is displayed on the annotation</p></span>\n\t<span><b>subtitle</b><i>:string</i></span>\n\t\t<span class='info'>the secondary title of the annotation view</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the primary title of the annotation view</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Map.createAnnotation","display":"(Method)\t\tTi.Map.createAnnotation\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Map.MapView.html\">Titanium.Map.MapView</a><p><code class=\"usage\"><b><u>(Method)Ti.Map.createMapView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animate</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean is mapping actions should be animated</p></span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>annotations</b><i>:array</i></span>\n\t\t<span class='info'>an array of annotations to add to the map</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>location</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p></span>\n\t<span><b>mapType</b><i>:int</i></span>\n\t\t<span class='info'>the map type constant of either <a href=\"Titanium.Map.STANDARD_TYPE-property.html\">Titanium.Map.STANDARD_TYPE</a>, <a href=\"Titanium.Map.SATELLITE_TYPE-property.html\">Titanium.Map.SATELLITE_TYPE</a> or <a href=\"Titanium.Map.HYBRID_TYPE-property.html\">Titanium.Map.HYBRID_TYPE</a>.</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>region</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p></span>\n\t<span><b>regionFit</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the map should attempt to fit the map view into the region in the visible view</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>userLocation</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the map should show the user's current device location as a pin on the map</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Map.createMapView","display":"(Method)\t\tTi.Map.createMapView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Map.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Map.fireEvent","display":"(Method)\t\tTi.Map.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Map.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.removeEventListener","display":"(Method)\t\tTi.Map.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The head of the pin is green. Green pins indicate starting points on the map.</p>","insert":"$0","match":"Ti.Map.ANNOTATION_GREEN","display":"(Property)\tTi.Map.ANNOTATION_GREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The head of the pin is purple. Purple pins indicate user-specified points on the map.</p>","insert":"$0","match":"Ti.Map.ANNOTATION_PURPLE","display":"(Property)\tTi.Map.ANNOTATION_PURPLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The head of the pin is red. Red pins indicate destination points on the map.</p>","insert":"$0","match":"Ti.Map.ANNOTATION_RED","display":"(Property)\tTi.Map.ANNOTATION_RED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Displays a satellite image of the area with road and road name information layered on top.</p>","insert":"$0","match":"Ti.Map.HYBRID_TYPE","display":"(Property)\tTi.Map.HYBRID_TYPE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Displays satellite imagery of the area.</p>","insert":"$0","match":"Ti.Map.SATELLITE_TYPE","display":"(Property)\tTi.Map.SATELLITE_TYPE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Displays a street map that shows the position of all roads and some road names.</p>","insert":"$0","match":"Ti.Map.STANDARD_TYPE","display":"(Property)\tTi.Map.STANDARD_TYPE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An Annotation object that is created by the method <a href=\"Titanium.Map.createAnnotation.html\">Titanium.Map.createAnnotation</a>. This object gives you low level control over annotations that can be added to a Map View.</p><hr />","insert":"$0","match":"Titanium.Map.Annotation","display":"(Namespace)\tTitanium.Map.Annotation","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Map.Annotation.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.Annotation.addEventListener","display":"(Method)\t\tTitanium.Map.Annotation.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Map.Annotation.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Map.Annotation.fireEvent","display":"(Method)\t\tTitanium.Map.Annotation.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Map.Annotation.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.Annotation.removeEventListener","display":"(Method)\t\tTitanium.Map.Annotation.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the pin should animate when dropped</p>","insert":"$0","match":"Titanium.Map.Annotation.animate","display":"(Property)\tTitanium.Map.Annotation.animate\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left button image on the annotation. must either be a button type constant or url</p>","insert":"$0","match":"Titanium.Map.Annotation.leftButton","display":"(Property)\tTitanium.Map.Annotation.leftButton\t:int,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a left view that is displayed on the annotation</p>","insert":"$0","match":"Titanium.Map.Annotation.leftView","display":"(Property)\tTitanium.Map.Annotation.leftView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the pin color as one of <a href=\"Titanium.Map.ANNOTATION_RED.html\">Titanium.Map.ANNOTATION_RED</a>, <a href=\"Titanium.Map.ANNOTATION_GREEN.html\">Titanium.Map.ANNOTATION_GREEN</a> or <a href=\"Titanium.Map.ANNOTATION_PURPLE.html\">Titanium.Map.ANNOTATION_PURPLE</a>.</p>","insert":"$0","match":"Titanium.Map.Annotation.pincolor","display":"(Property)\tTitanium.Map.Annotation.pincolor\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right button image on the annotation. must either be a button type constant or url</p>","insert":"$0","match":"Titanium.Map.Annotation.rightButton","display":"(Property)\tTitanium.Map.Annotation.rightButton\t:int,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a right view that is displayed on the annotation</p>","insert":"$0","match":"Titanium.Map.Annotation.rightView","display":"(Property)\tTitanium.Map.Annotation.rightView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the secondary title of the annotation view</p>","insert":"$0","match":"Titanium.Map.Annotation.subtitle","display":"(Property)\tTitanium.Map.Annotation.subtitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the primary title of the annotation view</p>","insert":"$0","match":"Titanium.Map.Annotation.title","display":"(Property)\tTitanium.Map.Annotation.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An Annotation object that is created by the method <a href=\"Titanium.Map.createAnnotation.html\">Titanium.Map.createAnnotation</a>. This object gives you low level control over annotations that can be added to a Map View.</p><hr />","insert":"$0","match":"Ti.Map.Annotation","display":"(Namespace)\tTi.Map.Annotation","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Map.Annotation.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.Annotation.addEventListener","display":"(Method)\t\tTi.Map.Annotation.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Map.Annotation.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Map.Annotation.fireEvent","display":"(Method)\t\tTi.Map.Annotation.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Map.Annotation.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.Annotation.removeEventListener","display":"(Method)\t\tTi.Map.Annotation.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the pin should animate when dropped</p>","insert":"$0","match":"Ti.Map.Annotation.animate","display":"(Property)\tTi.Map.Annotation.animate\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left button image on the annotation. must either be a button type constant or url</p>","insert":"$0","match":"Ti.Map.Annotation.leftButton","display":"(Property)\tTi.Map.Annotation.leftButton\t:int,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a left view that is displayed on the annotation</p>","insert":"$0","match":"Ti.Map.Annotation.leftView","display":"(Property)\tTi.Map.Annotation.leftView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the pin color as one of <a href=\"Titanium.Map.ANNOTATION_RED.html\">Titanium.Map.ANNOTATION_RED</a>, <a href=\"Titanium.Map.ANNOTATION_GREEN.html\">Titanium.Map.ANNOTATION_GREEN</a> or <a href=\"Titanium.Map.ANNOTATION_PURPLE.html\">Titanium.Map.ANNOTATION_PURPLE</a>.</p>","insert":"$0","match":"Ti.Map.Annotation.pincolor","display":"(Property)\tTi.Map.Annotation.pincolor\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right button image on the annotation. must either be a button type constant or url</p>","insert":"$0","match":"Ti.Map.Annotation.rightButton","display":"(Property)\tTi.Map.Annotation.rightButton\t:int,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a right view that is displayed on the annotation</p>","insert":"$0","match":"Ti.Map.Annotation.rightView","display":"(Property)\tTi.Map.Annotation.rightView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the secondary title of the annotation view</p>","insert":"$0","match":"Ti.Map.Annotation.subtitle","display":"(Property)\tTi.Map.Annotation.subtitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the primary title of the annotation view</p>","insert":"$0","match":"Ti.Map.Annotation.title","display":"(Property)\tTi.Map.Annotation.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The MapView is an object created by <a href=\"Titanium.Map.createView\">Titanium.Map.createView</a> and is used for embedding native mapping capabilities as a view in your application.  With native maps, you can control the mapping location, the type of map, the zoom level and you can add custom annotations directly to the map.</p><hr /><p>For Android, you will need to <a href=\"http://code.google.com/android/maps-api-signup.html\">obtain a map key from Google</a> to use maps in your application.</p>","insert":"$0","match":"Titanium.Map.MapView","display":"(Namespace)\tTitanium.Map.MapView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Map.MapView.add","display":"(Method)\t\tTitanium.Map.MapView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add a new annotation to the map</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.addAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Map.MapView.addAnnotation","display":"(Method)\t\tTitanium.Map.MapView.addAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add one or more new annotation to the map</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.addAnnotations</u></b><i>:void()</i><br>(\n\t\t<span><b>annotations</b><i>:array</i></span>\n\t\t<span class='info'>an array of either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.</span>\n)\n</code>","insert":"(${1:${2:annotations}})","match":"Titanium.Map.MapView.addAnnotations","display":"(Method)\t\tTitanium.Map.MapView.addAnnotations\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.MapView.addEventListener","display":"(Method)\t\tTitanium.Map.MapView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.MapView.animate","display":"(Method)\t\tTitanium.Map.MapView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>cause the annotation to be deselected (hidden)</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.deselectAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:string,object</i></span>\n\t\t<span class='info'>either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Titanium.Map.MapView.deselectAnnotation","display":"(Method)\t\tTitanium.Map.MapView.deselectAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Map.MapView.fireEvent","display":"(Method)\t\tTitanium.Map.MapView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Map.MapView.hide","display":"(Method)\t\tTitanium.Map.MapView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Map.MapView.remove","display":"(Method)\t\tTitanium.Map.MapView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Map.MapView.removeAllAnnotations","display":"(Method)\t\tTitanium.Map.MapView.removeAllAnnotations\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove an existing annotation from the map</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.removeAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:string,object</i></span>\n\t\t<span class='info'>either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Titanium.Map.MapView.removeAnnotation","display":"(Method)\t\tTitanium.Map.MapView.removeAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove one or more existing annotations from the map</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.removeAnnotations</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:array</i></span>\n\t\t<span class='info'>an array of either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Titanium.Map.MapView.removeAnnotations","display":"(Method)\t\tTitanium.Map.MapView.removeAnnotations\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Map.MapView.removeEventListener","display":"(Method)\t\tTitanium.Map.MapView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>cause the annotation to be selected (shown)</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.selectAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:string,object</i></span>\n\t\t<span class='info'>either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Titanium.Map.MapView.selectAnnotation","display":"(Method)\t\tTitanium.Map.MapView.selectAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Map.MapView.show","display":"(Method)\t\tTitanium.Map.MapView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.Map.MapView.toImage","display":"(Method)\t\tTitanium.Map.MapView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>zoom in or out of the map</p><p><code class=\"usage\"><b><u>(Method)Titanium.Map.MapView.zoom</u></b><i>:void()</i><br>(\n\t\t<span><b>level</b><i>:double</i></span>\n\t\t<span class='info'>zoom level (can be positive or negative)</span>\n)\n</code>","insert":"(${1:${2:level}})","match":"Titanium.Map.MapView.zoom","display":"(Method)\t\tTitanium.Map.MapView.zoom\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.Map.MapView.anchorPoint","display":"(Property)\tTitanium.Map.MapView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean is mapping actions should be animated</p>","insert":"$0","match":"Titanium.Map.MapView.animate","display":"(Property)\tTitanium.Map.MapView.animate\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.Map.MapView.animatedCenterPoint","display":"(Property)\tTitanium.Map.MapView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of annotations to add to the map</p>","insert":"$0","match":"Titanium.Map.MapView.annotations","display":"(Property)\tTitanium.Map.MapView.annotations\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.Map.MapView.backgroundColor","display":"(Property)\tTitanium.Map.MapView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.Map.MapView.backgroundGradient","display":"(Property)\tTitanium.Map.MapView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.Map.MapView.backgroundImage","display":"(Property)\tTitanium.Map.MapView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.Map.MapView.backgroundLeftCap","display":"(Property)\tTitanium.Map.MapView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.Map.MapView.backgroundTopCap","display":"(Property)\tTitanium.Map.MapView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.Map.MapView.borderColor","display":"(Property)\tTitanium.Map.MapView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.Map.MapView.borderRadius","display":"(Property)\tTitanium.Map.MapView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.Map.MapView.borderWidth","display":"(Property)\tTitanium.Map.MapView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Map.MapView.bottom","display":"(Property)\tTitanium.Map.MapView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.Map.MapView.center","display":"(Property)\tTitanium.Map.MapView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.Map.MapView.height","display":"(Property)\tTitanium.Map.MapView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Map.MapView.left","display":"(Property)\tTitanium.Map.MapView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p>","insert":"$0","match":"Titanium.Map.MapView.location","display":"(Property)\tTitanium.Map.MapView.location\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the map type constant of either <a href=\"Titanium.Map.STANDARD_TYPE-property.html\">Titanium.Map.STANDARD_TYPE</a>, <a href=\"Titanium.Map.SATELLITE_TYPE-property.html\">Titanium.Map.SATELLITE_TYPE</a> or <a href=\"Titanium.Map.HYBRID_TYPE-property.html\">Titanium.Map.HYBRID_TYPE</a>.</p>","insert":"$0","match":"Titanium.Map.MapView.mapType","display":"(Property)\tTitanium.Map.MapView.mapType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.Map.MapView.opacity","display":"(Property)\tTitanium.Map.MapView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p>","insert":"$0","match":"Titanium.Map.MapView.region","display":"(Property)\tTitanium.Map.MapView.region\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the map should attempt to fit the map view into the region in the visible view</p>","insert":"$0","match":"Titanium.Map.MapView.regionFit","display":"(Property)\tTitanium.Map.MapView.regionFit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Map.MapView.right","display":"(Property)\tTitanium.Map.MapView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.Map.MapView.size","display":"(Property)\tTitanium.Map.MapView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Map.MapView.top","display":"(Property)\tTitanium.Map.MapView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.Map.MapView.touchEnabled","display":"(Property)\tTitanium.Map.MapView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.Map.MapView.transform","display":"(Property)\tTitanium.Map.MapView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the map should show the user's current device location as a pin on the map</p>","insert":"$0","match":"Titanium.Map.MapView.userLocation","display":"(Property)\tTitanium.Map.MapView.userLocation\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.Map.MapView.visible","display":"(Property)\tTitanium.Map.MapView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.Map.MapView.width","display":"(Property)\tTitanium.Map.MapView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.Map.MapView.zIndex","display":"(Property)\tTitanium.Map.MapView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The MapView is an object created by <a href=\"Titanium.Map.createView\">Titanium.Map.createView</a> and is used for embedding native mapping capabilities as a view in your application.  With native maps, you can control the mapping location, the type of map, the zoom level and you can add custom annotations directly to the map.</p><hr /><p>For Android, you will need to <a href=\"http://code.google.com/android/maps-api-signup.html\">obtain a map key from Google</a> to use maps in your application.</p>","insert":"$0","match":"Ti.Map.MapView","display":"(Namespace)\tTi.Map.MapView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Map.MapView.add","display":"(Method)\t\tTi.Map.MapView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add a new annotation to the map</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.addAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Map.MapView.addAnnotation","display":"(Method)\t\tTi.Map.MapView.addAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add one or more new annotation to the map</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.addAnnotations</u></b><i>:void()</i><br>(\n\t\t<span><b>annotations</b><i>:array</i></span>\n\t\t<span class='info'>an array of either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.</span>\n)\n</code>","insert":"(${1:${2:annotations}})","match":"Ti.Map.MapView.addAnnotations","display":"(Method)\t\tTi.Map.MapView.addAnnotations\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.MapView.addEventListener","display":"(Method)\t\tTi.Map.MapView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.MapView.animate","display":"(Method)\t\tTi.Map.MapView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>cause the annotation to be deselected (hidden)</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.deselectAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:string,object</i></span>\n\t\t<span class='info'>either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Ti.Map.MapView.deselectAnnotation","display":"(Method)\t\tTi.Map.MapView.deselectAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Map.MapView.fireEvent","display":"(Method)\t\tTi.Map.MapView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Map.MapView.hide","display":"(Method)\t\tTi.Map.MapView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Map.MapView.remove","display":"(Method)\t\tTi.Map.MapView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Map.MapView.removeAllAnnotations","display":"(Method)\t\tTi.Map.MapView.removeAllAnnotations\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove an existing annotation from the map</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.removeAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:string,object</i></span>\n\t\t<span class='info'>either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Ti.Map.MapView.removeAnnotation","display":"(Method)\t\tTi.Map.MapView.removeAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove one or more existing annotations from the map</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.removeAnnotations</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:array</i></span>\n\t\t<span class='info'>an array of either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Ti.Map.MapView.removeAnnotations","display":"(Method)\t\tTi.Map.MapView.removeAnnotations\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Map.MapView.removeEventListener","display":"(Method)\t\tTi.Map.MapView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>cause the annotation to be selected (shown)</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.selectAnnotation</u></b><i>:void()</i><br>(\n\t\t<span><b>annotation</b><i>:string,object</i></span>\n\t\t<span class='info'>either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.</span>\n)\n</code>","insert":"(${1:${2:annotation}})","match":"Ti.Map.MapView.selectAnnotation","display":"(Method)\t\tTi.Map.MapView.selectAnnotation\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Map.MapView.show","display":"(Method)\t\tTi.Map.MapView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.Map.MapView.toImage","display":"(Method)\t\tTi.Map.MapView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>zoom in or out of the map</p><p><code class=\"usage\"><b><u>(Method)Ti.Map.MapView.zoom</u></b><i>:void()</i><br>(\n\t\t<span><b>level</b><i>:double</i></span>\n\t\t<span class='info'>zoom level (can be positive or negative)</span>\n)\n</code>","insert":"(${1:${2:level}})","match":"Ti.Map.MapView.zoom","display":"(Method)\t\tTi.Map.MapView.zoom\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.Map.MapView.anchorPoint","display":"(Property)\tTi.Map.MapView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean is mapping actions should be animated</p>","insert":"$0","match":"Ti.Map.MapView.animate","display":"(Property)\tTi.Map.MapView.animate\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.Map.MapView.animatedCenterPoint","display":"(Property)\tTi.Map.MapView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of annotations to add to the map</p>","insert":"$0","match":"Ti.Map.MapView.annotations","display":"(Property)\tTi.Map.MapView.annotations\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.Map.MapView.backgroundColor","display":"(Property)\tTi.Map.MapView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.Map.MapView.backgroundGradient","display":"(Property)\tTi.Map.MapView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.Map.MapView.backgroundImage","display":"(Property)\tTi.Map.MapView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.Map.MapView.backgroundLeftCap","display":"(Property)\tTi.Map.MapView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.Map.MapView.backgroundTopCap","display":"(Property)\tTi.Map.MapView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.Map.MapView.borderColor","display":"(Property)\tTi.Map.MapView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.Map.MapView.borderRadius","display":"(Property)\tTi.Map.MapView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.Map.MapView.borderWidth","display":"(Property)\tTi.Map.MapView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Map.MapView.bottom","display":"(Property)\tTi.Map.MapView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.Map.MapView.center","display":"(Property)\tTi.Map.MapView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.Map.MapView.height","display":"(Property)\tTi.Map.MapView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Map.MapView.left","display":"(Property)\tTi.Map.MapView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p>","insert":"$0","match":"Ti.Map.MapView.location","display":"(Property)\tTi.Map.MapView.location\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the map type constant of either <a href=\"Titanium.Map.STANDARD_TYPE-property.html\">Titanium.Map.STANDARD_TYPE</a>, <a href=\"Titanium.Map.SATELLITE_TYPE-property.html\">Titanium.Map.SATELLITE_TYPE</a> or <a href=\"Titanium.Map.HYBRID_TYPE-property.html\">Titanium.Map.HYBRID_TYPE</a>.</p>","insert":"$0","match":"Ti.Map.MapView.mapType","display":"(Property)\tTi.Map.MapView.mapType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.Map.MapView.opacity","display":"(Property)\tTi.Map.MapView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a dictionary that specifies the following properties specifying the region location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.</p>","insert":"$0","match":"Ti.Map.MapView.region","display":"(Property)\tTi.Map.MapView.region\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the map should attempt to fit the map view into the region in the visible view</p>","insert":"$0","match":"Ti.Map.MapView.regionFit","display":"(Property)\tTi.Map.MapView.regionFit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Map.MapView.right","display":"(Property)\tTi.Map.MapView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.Map.MapView.size","display":"(Property)\tTi.Map.MapView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Map.MapView.top","display":"(Property)\tTi.Map.MapView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.Map.MapView.touchEnabled","display":"(Property)\tTi.Map.MapView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.Map.MapView.transform","display":"(Property)\tTi.Map.MapView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the map should show the user's current device location as a pin on the map</p>","insert":"$0","match":"Ti.Map.MapView.userLocation","display":"(Property)\tTi.Map.MapView.userLocation\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.Map.MapView.visible","display":"(Property)\tTi.Map.MapView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.Map.MapView.width","display":"(Property)\tTi.Map.MapView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.Map.MapView.zIndex","display":"(Property)\tTi.Map.MapView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Media module.  The Media module is used accessing the device's media related  functionality such as playing audio or recording video.</p><hr />","insert":"$0","match":"Titanium.Media","display":"(Namespace)\tTitanium.Media","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Media.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.addEventListener","display":"(Method)\t\tTitanium.Media.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.beep","display":"(Method)\t\tTitanium.Media.beep\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.AudioPlayer.html\">Titanium.Media.AudioPlayer</a><p><code class=\"usage\"><b><u>(Method)Titanium.Media.createAudioPlayer</u></b><i>:object()</i><br>(\n{\n\t<span><b>STATE_BUFFERING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the buffering from the network state</p></span>\n\t<span><b>STATE_INITIALIZED</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the initialization state</p></span>\n\t<span><b>STATE_PAUSED</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the paused state</p></span>\n\t<span><b>STATE_PLAYING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the playing state</p></span>\n\t<span><b>STATE_STARTING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the starting playback state</p></span>\n\t<span><b>STATE_STOPPED</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the stopped state</p></span>\n\t<span><b>STATE_STOPPING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the stopping state</p></span>\n\t<span><b>STATE_WAITING_FOR_DATA</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the waiting for audio data from the network state</p></span>\n\t<span><b>STATE_WAITING_FOR_QUEUE</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the waiting for audio data to fill the queue state</p></span>\n\t<span><b>allowBackground</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p></span>\n\t<span><b>audioSessionMode</b><i>:int</i></span>\n\t\t<span class='info'>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p></span>\n\t<span><b>bitRate</b><i>:double</i></span>\n\t\t<span class='info'>bit rate of the current playback stream</p></span>\n\t<span><b>idle</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is idle</p></span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is paused</p></span>\n\t<span><b>playing</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is streaming audio</p></span>\n\t<span><b>progress</b><i>:double</i></span>\n\t\t<span class='info'>returns the current playback progress. Will return zero if sampleRate has not yet been detected</p></span>\n\t<span><b>state</b><i>:int</i></span>\n\t\t<span class='info'>returns int for the current state of playback</p></span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>returns the url for the current playback</p></span>\n\t<span><b>waiting</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is waiting for audio data from the network</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.createAudioPlayer","display":"(Method)\t\tTitanium.Media.createAudioPlayer\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.AudioRecorder.html\">Titanium.Media.AudioRecorder</a><p><code class=\"usage\"><b><u>(Method)Titanium.Media.createAudioRecorder</u></b><i>:object()</i><br>(\n{\n\t<span><b>audioSessionMode</b><i>:int</i></span>\n\t\t<span class='info'>the default audio session mode to be used for this recorder. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p></span>\n\t<span><b>compression</b><i>:int</i></span>\n\t\t<span class='info'>audio compression constant to be used for the recording</p></span>\n\t<span><b>format</b><i>:int</i></span>\n\t\t<span class='info'>audio format constant for used for the recording</p></span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly property to indicate if paused</p></span>\n\t<span><b>recording</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly property to indicate if recording</p></span>\n\t<span><b>stopped</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly property to indicate if stopped</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.createAudioRecorder","display":"(Method)\t\tTitanium.Media.createAudioRecorder\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.Sound.html\">Titanium.Media.Sound</a><p><code class=\"usage\"><b><u>(Method)Titanium.Media.createSound</u></b><i>:object()</i><br>(\n{\n\t<span><b>allowBackground</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p></span>\n\t<span><b>audioSessionMode</b><i>:int</i></span>\n\t\t<span class='info'>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p></span>\n\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>the duration of the audio.</p></span>\n\t<span><b>looping</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the audio should loop upon completion</p></span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the audio is paused</p></span>\n\t<span><b>playing</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the audio is playing</p></span>\n\t<span><b>time</b><i>:float</i></span>\n\t\t<span class='info'>the time position of the audio.</p></span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to the audio</p></span>\n\t<span><b>volume</b><i>:float</i></span>\n\t\t<span class='info'>the volume of the audio. this volume only affects the media, not the device audio.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.createSound","display":"(Method)\t\tTitanium.Media.createSound\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a><p><code class=\"usage\"><b><u>(Method)Titanium.Media.createVideoPlayer</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>autoplay</b><i>:boolean</i></span>\n\t\t<span class='info'>indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>background color for the view. deprecated, set the background color on the view.</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>contentURL</b><i>:string</i></span>\n\t\t<span class='info'>deprecated. use url property instead.</p></span>\n\t<span><b>duration</b><i>:double</i></span>\n\t\t<span class='info'>The duration of the movie, or 0.0 if not known.</p></span>\n\t<span><b>endPlaybackTime</b><i>:double</i></span>\n\t\t<span class='info'>The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.</p></span>\n\t<span><b>fullscreen</b><i>:boolean</i></span>\n\t\t<span class='info'>Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>initialPlaybackTime</b><i>:double</i></span>\n\t\t<span class='info'>The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>loadState</b><i>:int</i></span>\n\t\t<span class='info'>Returns the network load state of the movie player.</p></span>\n\t<span><b>media</b><i>:object</i></span>\n\t\t<span class='info'>the media object, either a File or Blob.</p></span>\n\t<span><b>mediaControlStyle</b><i>:int</i></span>\n\t\t<span class='info'>The style of the playback controls. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a></p></span>\n\t<span><b>mediaTypes</b><i>:int</i></span>\n\t\t<span class='info'>The types of media in the movie, or <a href=\"Titanium.Media.VIDEO_MEDIA_TYPE_NONE-property.html\">Titanium.Media.VIDEO_MEDIA_TYPE_NONE</a> if not known.</p></span>\n\t<span><b>movieControlMode</b><i>:int</i></span>\n\t\t<span class='info'>deprecated in 3.2+ of the iPhone SDK - use <tt>mediaControlStyle</tt>. Provides the ability to set the control mode of the movie player. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a>.</p></span>\n\t<span><b>naturalSize</b><i>:object</i></span>\n\t\t<span class='info'>returns a dictionary with properties <tt>width</tt> and <tt>height</tt>. Returns the natural size of the movie or 0 for both properties if not known or applicable.</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>playableDuration</b><i>:double</i></span>\n\t\t<span class='info'>The currently playable duration of the movie, for progressively downloaded network content.</p></span>\n\t<span><b>playbackState</b><i>:int</i></span>\n\t\t<span class='info'>Returns the current playback state of the music player</p></span>\n\t<span><b>playing</b><i>:boolean</i></span>\n\t\t<span class='info'>Boolean to indicate if the player has started playing.</p></span>\n\t<span><b>repeatMode</b><i>:int</i></span>\n\t\t<span class='info'>Determines how the movie player repeats when reaching the end of playback. Defaults to <a href=\"Titanium.Media.VIDEO_REPEAT_MODE_NONE-property.html\">Titanium.Media.VIDEO_REPEAT_MODE_NONE</a>.</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>scalingMode</b><i>:int</i></span>\n\t\t<span class='info'>Determines how the content scales to fit the view. Defaults to <a href=\"Titanium.Media.VIDEO_SCALING_ASPECT_FIT-property.html\">Titanium.Media.VIDEO_SCALING_ASPECT_FIT</a>.</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>sourceType</b><i>:int</i></span>\n\t\t<span class='info'>The playback type of the movie. Defaults to <a href=\"Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN-property.html\">Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN</a>. Specifying a playback type before playing the movie can result in faster load times.</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url of the media.</p></span>\n\t<span><b>useApplicationAudioSession</b><i>:boolean</i></span>\n\t\t<span class='info'>Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.createVideoPlayer","display":"(Method)\t\tTitanium.Media.createVideoPlayer\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Media.fireEvent","display":"(Method)\t\tTitanium.Media.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.hideCamera","display":"(Method)\t\tTitanium.Media.hideCamera\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.isCameraSupported","display":"(Method)\t\tTitanium.Media.isCameraSupported\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return boolean to indicate if the media type is supported</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.isMediaTypeSupported</u></b><i>:boolean()</i><br>(\n\t\t<span><b>media</b><i>:string</i></span>\n\t\t<span class='info'>media type as a string of either camera</tt>, <tt>photo</tt> or <tt>photogallery</tt>.</span>\n\t\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the type of media to check</span>\n)\n</code>","insert":"(${1:'${2:media}', '${0:type}'})","match":"Titanium.Media.isMediaTypeSupported","display":"(Method)\t\tTitanium.Media.isMediaTypeSupported\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the photo gallery picker</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.openPhotoGallery</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>pass a dictionary with the following supported keys: success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the camera should auto hide after the media capture is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>saveToPhotoGallery</tt> boolean if the media should be saved to the photo gallery upon successful capture, <tt>allowEditing</tt> boolean if the media should be editable after capture in the UI interface, <tt>mediaTypes</tt> an array of media type constants supported by the capture device UI, <tt>showControls</tt> boolean to indicate if the built-in UI controls should be displayed, <tt>overlay</tt> view which is added as an overlay to the UI (on top), <tt>transform</tt> an transformation matrix that applies to the UI transform. For iPad, <tt>popoverView</tt> can be provided to position the photo gallery popover a specific view and <tt>arrowDirection</tt> can be provided to control the type of arrow and position of the gallery.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.openPhotoGallery","display":"(Method)\t\tTitanium.Media.openPhotoGallery\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.removeEventListener","display":"(Method)\t\tTitanium.Media.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>save media to photo gallery / camera roll</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.saveToPhotoGallery</u></b><i>:void()</i><br>(\n\t\t<span><b>media</b><i>:object</i></span>\n\t\t<span class='info'>save the media passed to the cameras photo roll/media gallery. must be one of Blob object or File object or an error will be generated.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.saveToPhotoGallery","display":"(Method)\t\tTitanium.Media.saveToPhotoGallery\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>show the camera</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.showCamera</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>pass a dictionary with the following supported keys: success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the camera should auto hide after the media capture is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>saveToPhotoGallery</tt> boolean if the media should be saved to the photo gallery upon successful capture, <tt>allowEditing</tt> boolean if the media should be editable after capture in the UI interface, <tt>mediaTypes</tt> an array of media type constants supported by the capture device UI, <tt>videoMaximumDuration</tt> float duration on how long in milliseconds to allow capture before completing, <tt>videoQuality</tt> constant to indicate the video quality during capture, <tt>showControls</tt> boolean to indicate if the built-in UI controls should be displayed, <tt>overlay</tt> view which is added as an overlay to the camera UI (on top), <tt>transform</tt> an transformation matrix that applies to the camera UI transform.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.showCamera","display":"(Method)\t\tTitanium.Media.showCamera\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.startMicrophoneMonitor","display":"(Method)\t\tTitanium.Media.startMicrophoneMonitor\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.stopMicrophoneMonitor","display":"(Method)\t\tTitanium.Media.stopMicrophoneMonitor\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.takePicture","display":"(Method)\t\tTitanium.Media.takePicture\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>take a screen shot of the visible UI on the device</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.takeScreenshot</u></b><i>:void()</i><br>(\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function that will be called upon capture. the event property media</tt> will contain an image Blob object of the screenshot</span>\n)\n</code>","insert":"(${1:function ${2:callback}(${3:}){${0:}\\}})","match":"Titanium.Media.takeScreenshot","display":"(Method)\t\tTitanium.Media.takeScreenshot\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.vibrate","display":"(Method)\t\tTitanium.Media.vibrate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>audio file format 3GPP-2</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_3GP2","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_3GP2\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format 3GPP</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_3GPP","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_3GPP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format AIFF</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_AIFF","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_AIFF\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format AMR</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_AMR","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_AMR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format Apple Compressed Audio Format (CAF)</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_CAF","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_CAF\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format MP3</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_MP3","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_MP3\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format MP4</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_MP4","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_MP4\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format MP4A</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_MP4A","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_MP4A\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format WAVE</p>","insert":"$0","match":"Titanium.Media.AUDIO_FILEFORMAT_WAVE","display":"(Property)\tTitanium.Media.AUDIO_FILEFORMAT_WAVE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format MPEG4 AAC encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_AAC","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_AAC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format 8-bit aLaw encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_ALAW","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_ALAW\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format apple lossless encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_APPLE_LOSSLESS","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_APPLE_LOSSLESS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format iLBC encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_ILBC","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_ILBC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format Apple IMA4 encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_IMA4","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_IMA4\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format Linear 16-bit, PCM encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_LINEAR_PCM","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_LINEAR_PCM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format 8-bit muLaw encoding</p>","insert":"$0","match":"Titanium.Media.AUDIO_FORMAT_ULAW","display":"(Property)\tTitanium.Media.AUDIO_FORMAT_ULAW\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for line type headphones</p>","insert":"$0","match":"Titanium.Media.AUDIO_HEADPHONES","display":"(Property)\tTitanium.Media.AUDIO_HEADPHONES\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type headphones and microphone</p>","insert":"$0","match":"Titanium.Media.AUDIO_HEADPHONES_AND_MIC","display":"(Property)\tTitanium.Media.AUDIO_HEADPHONES_AND_MIC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type headset in/out</p>","insert":"$0","match":"Titanium.Media.AUDIO_HEADSET_INOUT","display":"(Property)\tTitanium.Media.AUDIO_HEADSET_INOUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type line out</p>","insert":"$0","match":"Titanium.Media.AUDIO_LINEOUT","display":"(Property)\tTitanium.Media.AUDIO_LINEOUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type microphone</p>","insert":"$0","match":"Titanium.Media.AUDIO_MICROPHONE","display":"(Property)\tTitanium.Media.AUDIO_MICROPHONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type muted switch is on</p>","insert":"$0","match":"Titanium.Media.AUDIO_MUTED","display":"(Property)\tTitanium.Media.AUDIO_MUTED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type receiver and microphone</p>","insert":"$0","match":"Titanium.Media.AUDIO_RECEIVER_AND_MIC","display":"(Property)\tTitanium.Media.AUDIO_RECEIVER_AND_MIC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>For long-duration sounds such as rain, car engine noise, and so on. It is also for 'play along' style applications, such a virtual piano that a user plays over iPod audio.</p>","insert":"$0","match":"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT","display":"(Property)\tTitanium.Media.AUDIO_SESSION_MODE_AMBIENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>For playing recorded music or other sounds that are central to the successful use of your application. When using this mode, your application audio continues with the Ring/Silent switch set to silent or when the screen locks. This property normally disallows iPod audio to mix with application audio</p>","insert":"$0","match":"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK","display":"(Property)\tTitanium.Media.AUDIO_SESSION_MODE_PLAYBACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Allows recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application. This category is appropriate for simultaneous recording and playback, and also for applications that record and play back but not simultaneously. If you want to ensure that sounds such as Messages alerts do not play while your application is recording, use  <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a> instead. This category normally disallows iPod audio to mix with application audio.</p>","insert":"$0","match":"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD","display":"(Property)\tTitanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>For recording audio; it silences playback audio.</p>","insert":"$0","match":"Titanium.Media.AUDIO_SESSION_MODE_RECORD","display":"(Property)\tTitanium.Media.AUDIO_SESSION_MODE_RECORD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The solo ambient sound category is for long-duration sounds such as rain, car engine noise, and so on. When you use this category, audio from built-in applications, such as the iPod, is silenced. Your audio is silenced when the Ring/Silent switch is set to <tt>silent</tt> or when the screen locks.</p>","insert":"$0","match":"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT","display":"(Property)\tTitanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type speaker</p>","insert":"$0","match":"Titanium.Media.AUDIO_SPEAKER","display":"(Property)\tTitanium.Media.AUDIO_SPEAKER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type unavailable</p>","insert":"$0","match":"Titanium.Media.AUDIO_UNAVAILABLE","display":"(Property)\tTitanium.Media.AUDIO_UNAVAILABLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type unknown or not determined</p>","insert":"$0","match":"Titanium.Media.AUDIO_UNKNOWN","display":"(Property)\tTitanium.Media.AUDIO_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for media device busy error</p>","insert":"$0","match":"Titanium.Media.DEVICE_BUSY","display":"(Property)\tTitanium.Media.DEVICE_BUSY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to signify photo</p>","insert":"$0","match":"Titanium.Media.MEDIA_TYPE_PHOTO","display":"(Property)\tTitanium.Media.MEDIA_TYPE_PHOTO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to signify video</p>","insert":"$0","match":"Titanium.Media.MEDIA_TYPE_VIDEO","display":"(Property)\tTitanium.Media.MEDIA_TYPE_VIDEO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for media no camera error</p>","insert":"$0","match":"Titanium.Media.NO_CAMERA","display":"(Property)\tTitanium.Media.NO_CAMERA\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for media no video error</p>","insert":"$0","match":"Titanium.Media.NO_VIDEO","display":"(Property)\tTitanium.Media.NO_VIDEO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to use high-quality video recording. Recorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.</p>","insert":"$0","match":"Titanium.Media.QUALITY_HIGH","display":"(Property)\tTitanium.Media.QUALITY_HIGH\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to use use low-quality video recording. Recorded files can usually be transferred over the cellular network.</p>","insert":"$0","match":"Titanium.Media.QUALITY_LOW","display":"(Property)\tTitanium.Media.QUALITY_LOW\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to use medium-quality video recording. Recorded files can usually be transferred using Wi-Fi. This is the default video quality setting.</p>","insert":"$0","match":"Titanium.Media.QUALITY_MEDIUM","display":"(Property)\tTitanium.Media.QUALITY_MEDIUM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for unknown media error</p>","insert":"$0","match":"Titanium.Media.UNKNOWN_ERROR","display":"(Property)\tTitanium.Media.UNKNOWN_ERROR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video controls default</p>","insert":"$0","match":"Titanium.Media.VIDEO_CONTROL_DEFAULT","display":"(Property)\tTitanium.Media.VIDEO_CONTROL_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Controls for an embedded view. Used in conjunction with movieControlStyle property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> in iPhone 3.2+</p>","insert":"$0","match":"Titanium.Media.VIDEO_CONTROL_EMBEDDED","display":"(Property)\tTitanium.Media.VIDEO_CONTROL_EMBEDDED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Controls for fullscreen. Used in conjunction with movieControlStyle property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> in iPhone 3.2+</p>","insert":"$0","match":"Titanium.Media.VIDEO_CONTROL_FULLSCREEN","display":"(Property)\tTitanium.Media.VIDEO_CONTROL_FULLSCREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video controls hidden</p>","insert":"$0","match":"Titanium.Media.VIDEO_CONTROL_HIDDEN","display":"(Property)\tTitanium.Media.VIDEO_CONTROL_HIDDEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>No controls. Used in conjunction with movieControlStyle property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> in iPhone 3.2+</p>","insert":"$0","match":"Titanium.Media.VIDEO_CONTROL_NONE","display":"(Property)\tTitanium.Media.VIDEO_CONTROL_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video controls volume only</p>","insert":"$0","match":"Titanium.Media.VIDEO_CONTROL_VOLUME_ONLY","display":"(Property)\tTitanium.Media.VIDEO_CONTROL_VOLUME_ONLY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video playback ended normally</p>","insert":"$0","match":"Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ENDED","display":"(Property)\tTitanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ENDED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video playback ended abnormally</p>","insert":"$0","match":"Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR","display":"(Property)\tTitanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video playback ended by user action (such as clicking the <tt>Done</tt> button)</p>","insert":"$0","match":"Titanium.Media.VIDEO_FINISH_REASON_USER_EXITED","display":"(Property)\tTitanium.Media.VIDEO_FINISH_REASON_USER_EXITED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current media is playable</p>","insert":"$0","match":"Titanium.Media.VIDEO_LOAD_STATE_PLAYABLE","display":"(Property)\tTitanium.Media.VIDEO_LOAD_STATE_PLAYABLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback will be automatically started in this state when <tt>autoplay</tt> is true</p>","insert":"$0","match":"Titanium.Media.VIDEO_LOAD_STATE_PLAYTHROUGH_OK","display":"(Property)\tTitanium.Media.VIDEO_LOAD_STATE_PLAYTHROUGH_OK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback will be automatically paused in this state, if started</p>","insert":"$0","match":"Titanium.Media.VIDEO_LOAD_STATE_STALLED","display":"(Property)\tTitanium.Media.VIDEO_LOAD_STATE_STALLED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current load state is not known</p>","insert":"$0","match":"Titanium.Media.VIDEO_LOAD_STATE_UNKNOWN","display":"(Property)\tTitanium.Media.VIDEO_LOAD_STATE_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A audio type of media in the movie returned by <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> <tt>mediaTypes</tt> property</p>","insert":"$0","match":"Titanium.Media.VIDEO_MEDIA_TYPE_AUDIO","display":"(Property)\tTitanium.Media.VIDEO_MEDIA_TYPE_AUDIO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An unknown type of media in the movie returned by <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> <tt>mediaTypes</tt> property.</p>","insert":"$0","match":"Titanium.Media.VIDEO_MEDIA_TYPE_NONE","display":"(Property)\tTitanium.Media.VIDEO_MEDIA_TYPE_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A video type of media in the movie returned by <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> <tt>mediaTypes</tt> property</p>","insert":"$0","match":"Titanium.Media.VIDEO_MEDIA_TYPE_VIDEO","display":"(Property)\tTitanium.Media.VIDEO_MEDIA_TYPE_VIDEO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback has been interrupted</p>","insert":"$0","match":"Titanium.Media.VIDEO_PLAYBACK_STATE_INTERRUPTED","display":"(Property)\tTitanium.Media.VIDEO_PLAYBACK_STATE_INTERRUPTED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is paused</p>","insert":"$0","match":"Titanium.Media.VIDEO_PLAYBACK_STATE_PAUSED","display":"(Property)\tTitanium.Media.VIDEO_PLAYBACK_STATE_PAUSED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is playing</p>","insert":"$0","match":"Titanium.Media.VIDEO_PLAYBACK_STATE_PLAYING","display":"(Property)\tTitanium.Media.VIDEO_PLAYBACK_STATE_PLAYING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is rewinding</p>","insert":"$0","match":"Titanium.Media.VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD","display":"(Property)\tTitanium.Media.VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is seeking forward</p>","insert":"$0","match":"Titanium.Media.VIDEO_PLAYBACK_STATE_SEEKING_FORWARD","display":"(Property)\tTitanium.Media.VIDEO_PLAYBACK_STATE_SEEKING_FORWARD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback has stopped</p>","insert":"$0","match":"Titanium.Media.VIDEO_PLAYBACK_STATE_STOPPED","display":"(Property)\tTitanium.Media.VIDEO_PLAYBACK_STATE_STOPPED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video will not repeat</p>","insert":"$0","match":"Titanium.Media.VIDEO_REPEAT_MODE_NONE","display":"(Property)\tTitanium.Media.VIDEO_REPEAT_MODE_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video will repeat once</p>","insert":"$0","match":"Titanium.Media.VIDEO_REPEAT_MODE_ONE","display":"(Property)\tTitanium.Media.VIDEO_REPEAT_MODE_ONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video aspect where the movie will be scaled until the movie fills the entire screen. Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the screen exactly. The aspect ratio of the movie is preserved.</p>","insert":"$0","match":"Titanium.Media.VIDEO_SCALING_ASPECT_FILL","display":"(Property)\tTitanium.Media.VIDEO_SCALING_ASPECT_FILL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video aspect fit where the movie will be scaled until one dimension fits on the screen exactly. In the other dimension, the region between the edge of the movie and the edge of the screen is filled with a black bar. The aspect ratio of the movie is preserved.</p>","insert":"$0","match":"Titanium.Media.VIDEO_SCALING_ASPECT_FIT","display":"(Property)\tTitanium.Media.VIDEO_SCALING_ASPECT_FIT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video aspect where the movie will be scaled until both dimensions fit the screen exactly. The aspect ratio of the movie is not preserved.</p>","insert":"$0","match":"Titanium.Media.VIDEO_SCALING_MODE_FILL","display":"(Property)\tTitanium.Media.VIDEO_SCALING_MODE_FILL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video scaling where the scaling is turn off. The movie will not be scaled.</p>","insert":"$0","match":"Titanium.Media.VIDEO_SCALING_NONE","display":"(Property)\tTitanium.Media.VIDEO_SCALING_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video source type is a file. Related to the <tt>sourceType</tt> property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a></p>","insert":"$0","match":"Titanium.Media.VIDEO_SOURCE_TYPE_FILE","display":"(Property)\tTitanium.Media.VIDEO_SOURCE_TYPE_FILE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video source type is a remote stream. Related to the <tt>sourceType</tt> property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a></p>","insert":"$0","match":"Titanium.Media.VIDEO_SOURCE_TYPE_STREAMING","display":"(Property)\tTitanium.Media.VIDEO_SOURCE_TYPE_STREAMING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video source type is unknown. Related to the <tt>sourceType</tt> property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a></p>","insert":"$0","match":"Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN","display":"(Property)\tTitanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>use the exact time</p>","insert":"$0","match":"Titanium.Media.VIDEO_TIME_OPTION_EXACT","display":"(Property)\tTitanium.Media.VIDEO_TIME_OPTION_EXACT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>use the closest keyframe in the time</p>","insert":"$0","match":"Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME","display":"(Property)\tTitanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns the line type constant for the current line type</p>","insert":"$0","match":"Titanium.Media.audioLineType","display":"(Property)\tTitanium.Media.audioLineType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the device is playing audio</p>","insert":"$0","match":"Titanium.Media.audioPlaying","display":"(Property)\tTitanium.Media.audioPlaying\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return an array of media type constants supported for the camera</p>","insert":"$0","match":"Titanium.Media.availableCameraMediaTypes","display":"(Property)\tTitanium.Media.availableCameraMediaTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return an array of media type constants supported for saving to the photo gallery</p>","insert":"$0","match":"Titanium.Media.availablePhotoGalleryMediaTypes","display":"(Property)\tTitanium.Media.availablePhotoGalleryMediaTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return an array of media type constants supported for the photo</p>","insert":"$0","match":"Titanium.Media.availablePhotoMediaTypes","display":"(Property)\tTitanium.Media.availablePhotoMediaTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the current average microphone level in dB or -1 if microphone monitoring is disabled</p>","insert":"$0","match":"Titanium.Media.averageMicrophonePower","display":"(Property)\tTitanium.Media.averageMicrophonePower\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a constant for the default audio session mode to be used. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Titanium.Media.defaultAudioSessionMode","display":"(Property)\tTitanium.Media.defaultAudioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the current microphone level peak power in dB or -1 if microphone monitoring is disabled</p>","insert":"$0","match":"Titanium.Media.peakMicrophonePower","display":"(Property)\tTitanium.Media.peakMicrophonePower\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current volume of the playback device</p>","insert":"$0","match":"Titanium.Media.volume","display":"(Property)\tTitanium.Media.volume\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Media module.  The Media module is used accessing the device's media related  functionality such as playing audio or recording video.</p><hr />","insert":"$0","match":"Ti.Media","display":"(Namespace)\tTi.Media","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Media.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.addEventListener","display":"(Method)\t\tTi.Media.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.beep","display":"(Method)\t\tTi.Media.beep\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.AudioPlayer.html\">Titanium.Media.AudioPlayer</a><p><code class=\"usage\"><b><u>(Method)Ti.Media.createAudioPlayer</u></b><i>:object()</i><br>(\n{\n\t<span><b>STATE_BUFFERING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the buffering from the network state</p></span>\n\t<span><b>STATE_INITIALIZED</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the initialization state</p></span>\n\t<span><b>STATE_PAUSED</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the paused state</p></span>\n\t<span><b>STATE_PLAYING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the playing state</p></span>\n\t<span><b>STATE_STARTING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the starting playback state</p></span>\n\t<span><b>STATE_STOPPED</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the stopped state</p></span>\n\t<span><b>STATE_STOPPING</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the stopping state</p></span>\n\t<span><b>STATE_WAITING_FOR_DATA</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the waiting for audio data from the network state</p></span>\n\t<span><b>STATE_WAITING_FOR_QUEUE</b><i>:int</i></span>\n\t\t<span class='info'>current playback is in the waiting for audio data to fill the queue state</p></span>\n\t<span><b>allowBackground</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p></span>\n\t<span><b>audioSessionMode</b><i>:int</i></span>\n\t\t<span class='info'>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p></span>\n\t<span><b>bitRate</b><i>:double</i></span>\n\t\t<span class='info'>bit rate of the current playback stream</p></span>\n\t<span><b>idle</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is idle</p></span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is paused</p></span>\n\t<span><b>playing</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is streaming audio</p></span>\n\t<span><b>progress</b><i>:double</i></span>\n\t\t<span class='info'>returns the current playback progress. Will return zero if sampleRate has not yet been detected</p></span>\n\t<span><b>state</b><i>:int</i></span>\n\t\t<span class='info'>returns int for the current state of playback</p></span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>returns the url for the current playback</p></span>\n\t<span><b>waiting</b><i>:boolean</i></span>\n\t\t<span class='info'>returns boolean indicating if the playback is waiting for audio data from the network</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.createAudioPlayer","display":"(Method)\t\tTi.Media.createAudioPlayer\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.AudioRecorder.html\">Titanium.Media.AudioRecorder</a><p><code class=\"usage\"><b><u>(Method)Ti.Media.createAudioRecorder</u></b><i>:object()</i><br>(\n{\n\t<span><b>audioSessionMode</b><i>:int</i></span>\n\t\t<span class='info'>the default audio session mode to be used for this recorder. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p></span>\n\t<span><b>compression</b><i>:int</i></span>\n\t\t<span class='info'>audio compression constant to be used for the recording</p></span>\n\t<span><b>format</b><i>:int</i></span>\n\t\t<span class='info'>audio format constant for used for the recording</p></span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly property to indicate if paused</p></span>\n\t<span><b>recording</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly property to indicate if recording</p></span>\n\t<span><b>stopped</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly property to indicate if stopped</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.createAudioRecorder","display":"(Method)\t\tTi.Media.createAudioRecorder\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.Sound.html\">Titanium.Media.Sound</a><p><code class=\"usage\"><b><u>(Method)Ti.Media.createSound</u></b><i>:object()</i><br>(\n{\n\t<span><b>allowBackground</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p></span>\n\t<span><b>audioSessionMode</b><i>:int</i></span>\n\t\t<span class='info'>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p></span>\n\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>the duration of the audio.</p></span>\n\t<span><b>looping</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the audio should loop upon completion</p></span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the audio is paused</p></span>\n\t<span><b>playing</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the audio is playing</p></span>\n\t<span><b>time</b><i>:float</i></span>\n\t\t<span class='info'>the time position of the audio.</p></span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to the audio</p></span>\n\t<span><b>volume</b><i>:float</i></span>\n\t\t<span class='info'>the volume of the audio. this volume only affects the media, not the device audio.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.createSound","display":"(Method)\t\tTi.Media.createSound\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a><p><code class=\"usage\"><b><u>(Method)Ti.Media.createVideoPlayer</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>autoplay</b><i>:boolean</i></span>\n\t\t<span class='info'>indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>background color for the view. deprecated, set the background color on the view.</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>contentURL</b><i>:string</i></span>\n\t\t<span class='info'>deprecated. use url property instead.</p></span>\n\t<span><b>duration</b><i>:double</i></span>\n\t\t<span class='info'>The duration of the movie, or 0.0 if not known.</p></span>\n\t<span><b>endPlaybackTime</b><i>:double</i></span>\n\t\t<span class='info'>The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.</p></span>\n\t<span><b>fullscreen</b><i>:boolean</i></span>\n\t\t<span class='info'>Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>initialPlaybackTime</b><i>:double</i></span>\n\t\t<span class='info'>The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>loadState</b><i>:int</i></span>\n\t\t<span class='info'>Returns the network load state of the movie player.</p></span>\n\t<span><b>media</b><i>:object</i></span>\n\t\t<span class='info'>the media object, either a File or Blob.</p></span>\n\t<span><b>mediaControlStyle</b><i>:int</i></span>\n\t\t<span class='info'>The style of the playback controls. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a></p></span>\n\t<span><b>mediaTypes</b><i>:int</i></span>\n\t\t<span class='info'>The types of media in the movie, or <a href=\"Titanium.Media.VIDEO_MEDIA_TYPE_NONE-property.html\">Titanium.Media.VIDEO_MEDIA_TYPE_NONE</a> if not known.</p></span>\n\t<span><b>movieControlMode</b><i>:int</i></span>\n\t\t<span class='info'>deprecated in 3.2+ of the iPhone SDK - use <tt>mediaControlStyle</tt>. Provides the ability to set the control mode of the movie player. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a>.</p></span>\n\t<span><b>naturalSize</b><i>:object</i></span>\n\t\t<span class='info'>returns a dictionary with properties <tt>width</tt> and <tt>height</tt>. Returns the natural size of the movie or 0 for both properties if not known or applicable.</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>playableDuration</b><i>:double</i></span>\n\t\t<span class='info'>The currently playable duration of the movie, for progressively downloaded network content.</p></span>\n\t<span><b>playbackState</b><i>:int</i></span>\n\t\t<span class='info'>Returns the current playback state of the music player</p></span>\n\t<span><b>playing</b><i>:boolean</i></span>\n\t\t<span class='info'>Boolean to indicate if the player has started playing.</p></span>\n\t<span><b>repeatMode</b><i>:int</i></span>\n\t\t<span class='info'>Determines how the movie player repeats when reaching the end of playback. Defaults to <a href=\"Titanium.Media.VIDEO_REPEAT_MODE_NONE-property.html\">Titanium.Media.VIDEO_REPEAT_MODE_NONE</a>.</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>scalingMode</b><i>:int</i></span>\n\t\t<span class='info'>Determines how the content scales to fit the view. Defaults to <a href=\"Titanium.Media.VIDEO_SCALING_ASPECT_FIT-property.html\">Titanium.Media.VIDEO_SCALING_ASPECT_FIT</a>.</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>sourceType</b><i>:int</i></span>\n\t\t<span class='info'>The playback type of the movie. Defaults to <a href=\"Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN-property.html\">Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN</a>. Specifying a playback type before playing the movie can result in faster load times.</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url of the media.</p></span>\n\t<span><b>useApplicationAudioSession</b><i>:boolean</i></span>\n\t\t<span class='info'>Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.createVideoPlayer","display":"(Method)\t\tTi.Media.createVideoPlayer\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Media.fireEvent","display":"(Method)\t\tTi.Media.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.hideCamera","display":"(Method)\t\tTi.Media.hideCamera\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.isCameraSupported","display":"(Method)\t\tTi.Media.isCameraSupported\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return boolean to indicate if the media type is supported</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.isMediaTypeSupported</u></b><i>:boolean()</i><br>(\n\t\t<span><b>media</b><i>:string</i></span>\n\t\t<span class='info'>media type as a string of either camera</tt>, <tt>photo</tt> or <tt>photogallery</tt>.</span>\n\t\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the type of media to check</span>\n)\n</code>","insert":"(${1:'${2:media}', '${0:type}'})","match":"Ti.Media.isMediaTypeSupported","display":"(Method)\t\tTi.Media.isMediaTypeSupported\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the photo gallery picker</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.openPhotoGallery</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>pass a dictionary with the following supported keys: success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the camera should auto hide after the media capture is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>saveToPhotoGallery</tt> boolean if the media should be saved to the photo gallery upon successful capture, <tt>allowEditing</tt> boolean if the media should be editable after capture in the UI interface, <tt>mediaTypes</tt> an array of media type constants supported by the capture device UI, <tt>showControls</tt> boolean to indicate if the built-in UI controls should be displayed, <tt>overlay</tt> view which is added as an overlay to the UI (on top), <tt>transform</tt> an transformation matrix that applies to the UI transform. For iPad, <tt>popoverView</tt> can be provided to position the photo gallery popover a specific view and <tt>arrowDirection</tt> can be provided to control the type of arrow and position of the gallery.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.openPhotoGallery","display":"(Method)\t\tTi.Media.openPhotoGallery\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.removeEventListener","display":"(Method)\t\tTi.Media.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>save media to photo gallery / camera roll</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.saveToPhotoGallery</u></b><i>:void()</i><br>(\n\t\t<span><b>media</b><i>:object</i></span>\n\t\t<span class='info'>save the media passed to the cameras photo roll/media gallery. must be one of Blob object or File object or an error will be generated.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.saveToPhotoGallery","display":"(Method)\t\tTi.Media.saveToPhotoGallery\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>show the camera</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.showCamera</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>pass a dictionary with the following supported keys: success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the camera should auto hide after the media capture is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>saveToPhotoGallery</tt> boolean if the media should be saved to the photo gallery upon successful capture, <tt>allowEditing</tt> boolean if the media should be editable after capture in the UI interface, <tt>mediaTypes</tt> an array of media type constants supported by the capture device UI, <tt>videoMaximumDuration</tt> float duration on how long in milliseconds to allow capture before completing, <tt>videoQuality</tt> constant to indicate the video quality during capture, <tt>showControls</tt> boolean to indicate if the built-in UI controls should be displayed, <tt>overlay</tt> view which is added as an overlay to the camera UI (on top), <tt>transform</tt> an transformation matrix that applies to the camera UI transform.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.showCamera","display":"(Method)\t\tTi.Media.showCamera\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.startMicrophoneMonitor","display":"(Method)\t\tTi.Media.startMicrophoneMonitor\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.stopMicrophoneMonitor","display":"(Method)\t\tTi.Media.stopMicrophoneMonitor\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.takePicture","display":"(Method)\t\tTi.Media.takePicture\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>take a screen shot of the visible UI on the device</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.takeScreenshot</u></b><i>:void()</i><br>(\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function that will be called upon capture. the event property media</tt> will contain an image Blob object of the screenshot</span>\n)\n</code>","insert":"(${1:function ${2:callback}(${3:}){${0:}\\}})","match":"Ti.Media.takeScreenshot","display":"(Method)\t\tTi.Media.takeScreenshot\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.vibrate","display":"(Method)\t\tTi.Media.vibrate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>audio file format 3GPP-2</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_3GP2","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_3GP2\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format 3GPP</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_3GPP","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_3GPP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format AIFF</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_AIFF","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_AIFF\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format AMR</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_AMR","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_AMR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format Apple Compressed Audio Format (CAF)</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_CAF","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_CAF\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format MP3</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_MP3","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_MP3\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format MP4</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_MP4","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_MP4\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format MP4A</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_MP4A","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_MP4A\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio file format WAVE</p>","insert":"$0","match":"Ti.Media.AUDIO_FILEFORMAT_WAVE","display":"(Property)\tTi.Media.AUDIO_FILEFORMAT_WAVE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format MPEG4 AAC encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_AAC","display":"(Property)\tTi.Media.AUDIO_FORMAT_AAC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format 8-bit aLaw encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_ALAW","display":"(Property)\tTi.Media.AUDIO_FORMAT_ALAW\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format apple lossless encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_APPLE_LOSSLESS","display":"(Property)\tTi.Media.AUDIO_FORMAT_APPLE_LOSSLESS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format iLBC encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_ILBC","display":"(Property)\tTi.Media.AUDIO_FORMAT_ILBC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format Apple IMA4 encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_IMA4","display":"(Property)\tTi.Media.AUDIO_FORMAT_IMA4\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format Linear 16-bit, PCM encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_LINEAR_PCM","display":"(Property)\tTi.Media.AUDIO_FORMAT_LINEAR_PCM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format 8-bit muLaw encoding</p>","insert":"$0","match":"Ti.Media.AUDIO_FORMAT_ULAW","display":"(Property)\tTi.Media.AUDIO_FORMAT_ULAW\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for line type headphones</p>","insert":"$0","match":"Ti.Media.AUDIO_HEADPHONES","display":"(Property)\tTi.Media.AUDIO_HEADPHONES\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type headphones and microphone</p>","insert":"$0","match":"Ti.Media.AUDIO_HEADPHONES_AND_MIC","display":"(Property)\tTi.Media.AUDIO_HEADPHONES_AND_MIC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type headset in/out</p>","insert":"$0","match":"Ti.Media.AUDIO_HEADSET_INOUT","display":"(Property)\tTi.Media.AUDIO_HEADSET_INOUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type line out</p>","insert":"$0","match":"Ti.Media.AUDIO_LINEOUT","display":"(Property)\tTi.Media.AUDIO_LINEOUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type microphone</p>","insert":"$0","match":"Ti.Media.AUDIO_MICROPHONE","display":"(Property)\tTi.Media.AUDIO_MICROPHONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type muted switch is on</p>","insert":"$0","match":"Ti.Media.AUDIO_MUTED","display":"(Property)\tTi.Media.AUDIO_MUTED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type receiver and microphone</p>","insert":"$0","match":"Ti.Media.AUDIO_RECEIVER_AND_MIC","display":"(Property)\tTi.Media.AUDIO_RECEIVER_AND_MIC\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>For long-duration sounds such as rain, car engine noise, and so on. It is also for 'play along' style applications, such a virtual piano that a user plays over iPod audio.</p>","insert":"$0","match":"Ti.Media.AUDIO_SESSION_MODE_AMBIENT","display":"(Property)\tTi.Media.AUDIO_SESSION_MODE_AMBIENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>For playing recorded music or other sounds that are central to the successful use of your application. When using this mode, your application audio continues with the Ring/Silent switch set to silent or when the screen locks. This property normally disallows iPod audio to mix with application audio</p>","insert":"$0","match":"Ti.Media.AUDIO_SESSION_MODE_PLAYBACK","display":"(Property)\tTi.Media.AUDIO_SESSION_MODE_PLAYBACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Allows recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application. This category is appropriate for simultaneous recording and playback, and also for applications that record and play back but not simultaneously. If you want to ensure that sounds such as Messages alerts do not play while your application is recording, use  <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a> instead. This category normally disallows iPod audio to mix with application audio.</p>","insert":"$0","match":"Ti.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD","display":"(Property)\tTi.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>For recording audio; it silences playback audio.</p>","insert":"$0","match":"Ti.Media.AUDIO_SESSION_MODE_RECORD","display":"(Property)\tTi.Media.AUDIO_SESSION_MODE_RECORD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The solo ambient sound category is for long-duration sounds such as rain, car engine noise, and so on. When you use this category, audio from built-in applications, such as the iPod, is silenced. Your audio is silenced when the Ring/Silent switch is set to <tt>silent</tt> or when the screen locks.</p>","insert":"$0","match":"Ti.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT","display":"(Property)\tTi.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type speaker</p>","insert":"$0","match":"Ti.Media.AUDIO_SPEAKER","display":"(Property)\tTi.Media.AUDIO_SPEAKER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type unavailable</p>","insert":"$0","match":"Ti.Media.AUDIO_UNAVAILABLE","display":"(Property)\tTi.Media.AUDIO_UNAVAILABLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant line type unknown or not determined</p>","insert":"$0","match":"Ti.Media.AUDIO_UNKNOWN","display":"(Property)\tTi.Media.AUDIO_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for media device busy error</p>","insert":"$0","match":"Ti.Media.DEVICE_BUSY","display":"(Property)\tTi.Media.DEVICE_BUSY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to signify photo</p>","insert":"$0","match":"Ti.Media.MEDIA_TYPE_PHOTO","display":"(Property)\tTi.Media.MEDIA_TYPE_PHOTO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to signify video</p>","insert":"$0","match":"Ti.Media.MEDIA_TYPE_VIDEO","display":"(Property)\tTi.Media.MEDIA_TYPE_VIDEO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for media no camera error</p>","insert":"$0","match":"Ti.Media.NO_CAMERA","display":"(Property)\tTi.Media.NO_CAMERA\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for media no video error</p>","insert":"$0","match":"Ti.Media.NO_VIDEO","display":"(Property)\tTi.Media.NO_VIDEO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to use high-quality video recording. Recorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.</p>","insert":"$0","match":"Ti.Media.QUALITY_HIGH","display":"(Property)\tTi.Media.QUALITY_HIGH\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to use use low-quality video recording. Recorded files can usually be transferred over the cellular network.</p>","insert":"$0","match":"Ti.Media.QUALITY_LOW","display":"(Property)\tTi.Media.QUALITY_LOW\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>media type constant to use medium-quality video recording. Recorded files can usually be transferred using Wi-Fi. This is the default video quality setting.</p>","insert":"$0","match":"Ti.Media.QUALITY_MEDIUM","display":"(Property)\tTi.Media.QUALITY_MEDIUM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for unknown media error</p>","insert":"$0","match":"Ti.Media.UNKNOWN_ERROR","display":"(Property)\tTi.Media.UNKNOWN_ERROR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video controls default</p>","insert":"$0","match":"Ti.Media.VIDEO_CONTROL_DEFAULT","display":"(Property)\tTi.Media.VIDEO_CONTROL_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Controls for an embedded view. Used in conjunction with movieControlStyle property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> in iPhone 3.2+</p>","insert":"$0","match":"Ti.Media.VIDEO_CONTROL_EMBEDDED","display":"(Property)\tTi.Media.VIDEO_CONTROL_EMBEDDED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Controls for fullscreen. Used in conjunction with movieControlStyle property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> in iPhone 3.2+</p>","insert":"$0","match":"Ti.Media.VIDEO_CONTROL_FULLSCREEN","display":"(Property)\tTi.Media.VIDEO_CONTROL_FULLSCREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video controls hidden</p>","insert":"$0","match":"Ti.Media.VIDEO_CONTROL_HIDDEN","display":"(Property)\tTi.Media.VIDEO_CONTROL_HIDDEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>No controls. Used in conjunction with movieControlStyle property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> in iPhone 3.2+</p>","insert":"$0","match":"Ti.Media.VIDEO_CONTROL_NONE","display":"(Property)\tTi.Media.VIDEO_CONTROL_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video controls volume only</p>","insert":"$0","match":"Ti.Media.VIDEO_CONTROL_VOLUME_ONLY","display":"(Property)\tTi.Media.VIDEO_CONTROL_VOLUME_ONLY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video playback ended normally</p>","insert":"$0","match":"Ti.Media.VIDEO_FINISH_REASON_PLAYBACK_ENDED","display":"(Property)\tTi.Media.VIDEO_FINISH_REASON_PLAYBACK_ENDED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video playback ended abnormally</p>","insert":"$0","match":"Ti.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR","display":"(Property)\tTi.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video playback ended by user action (such as clicking the <tt>Done</tt> button)</p>","insert":"$0","match":"Ti.Media.VIDEO_FINISH_REASON_USER_EXITED","display":"(Property)\tTi.Media.VIDEO_FINISH_REASON_USER_EXITED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current media is playable</p>","insert":"$0","match":"Ti.Media.VIDEO_LOAD_STATE_PLAYABLE","display":"(Property)\tTi.Media.VIDEO_LOAD_STATE_PLAYABLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback will be automatically started in this state when <tt>autoplay</tt> is true</p>","insert":"$0","match":"Ti.Media.VIDEO_LOAD_STATE_PLAYTHROUGH_OK","display":"(Property)\tTi.Media.VIDEO_LOAD_STATE_PLAYTHROUGH_OK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback will be automatically paused in this state, if started</p>","insert":"$0","match":"Ti.Media.VIDEO_LOAD_STATE_STALLED","display":"(Property)\tTi.Media.VIDEO_LOAD_STATE_STALLED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current load state is not known</p>","insert":"$0","match":"Ti.Media.VIDEO_LOAD_STATE_UNKNOWN","display":"(Property)\tTi.Media.VIDEO_LOAD_STATE_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A audio type of media in the movie returned by <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> <tt>mediaTypes</tt> property</p>","insert":"$0","match":"Ti.Media.VIDEO_MEDIA_TYPE_AUDIO","display":"(Property)\tTi.Media.VIDEO_MEDIA_TYPE_AUDIO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An unknown type of media in the movie returned by <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> <tt>mediaTypes</tt> property.</p>","insert":"$0","match":"Ti.Media.VIDEO_MEDIA_TYPE_NONE","display":"(Property)\tTi.Media.VIDEO_MEDIA_TYPE_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A video type of media in the movie returned by <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a> <tt>mediaTypes</tt> property</p>","insert":"$0","match":"Ti.Media.VIDEO_MEDIA_TYPE_VIDEO","display":"(Property)\tTi.Media.VIDEO_MEDIA_TYPE_VIDEO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback has been interrupted</p>","insert":"$0","match":"Ti.Media.VIDEO_PLAYBACK_STATE_INTERRUPTED","display":"(Property)\tTi.Media.VIDEO_PLAYBACK_STATE_INTERRUPTED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is paused</p>","insert":"$0","match":"Ti.Media.VIDEO_PLAYBACK_STATE_PAUSED","display":"(Property)\tTi.Media.VIDEO_PLAYBACK_STATE_PAUSED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is playing</p>","insert":"$0","match":"Ti.Media.VIDEO_PLAYBACK_STATE_PLAYING","display":"(Property)\tTi.Media.VIDEO_PLAYBACK_STATE_PLAYING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is rewinding</p>","insert":"$0","match":"Ti.Media.VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD","display":"(Property)\tTi.Media.VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback is seeking forward</p>","insert":"$0","match":"Ti.Media.VIDEO_PLAYBACK_STATE_SEEKING_FORWARD","display":"(Property)\tTi.Media.VIDEO_PLAYBACK_STATE_SEEKING_FORWARD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>playback has stopped</p>","insert":"$0","match":"Ti.Media.VIDEO_PLAYBACK_STATE_STOPPED","display":"(Property)\tTi.Media.VIDEO_PLAYBACK_STATE_STOPPED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video will not repeat</p>","insert":"$0","match":"Ti.Media.VIDEO_REPEAT_MODE_NONE","display":"(Property)\tTi.Media.VIDEO_REPEAT_MODE_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video will repeat once</p>","insert":"$0","match":"Ti.Media.VIDEO_REPEAT_MODE_ONE","display":"(Property)\tTi.Media.VIDEO_REPEAT_MODE_ONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video aspect where the movie will be scaled until the movie fills the entire screen. Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the screen exactly. The aspect ratio of the movie is preserved.</p>","insert":"$0","match":"Ti.Media.VIDEO_SCALING_ASPECT_FILL","display":"(Property)\tTi.Media.VIDEO_SCALING_ASPECT_FILL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video aspect fit where the movie will be scaled until one dimension fits on the screen exactly. In the other dimension, the region between the edge of the movie and the edge of the screen is filled with a black bar. The aspect ratio of the movie is preserved.</p>","insert":"$0","match":"Ti.Media.VIDEO_SCALING_ASPECT_FIT","display":"(Property)\tTi.Media.VIDEO_SCALING_ASPECT_FIT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video aspect where the movie will be scaled until both dimensions fit the screen exactly. The aspect ratio of the movie is not preserved.</p>","insert":"$0","match":"Ti.Media.VIDEO_SCALING_MODE_FILL","display":"(Property)\tTi.Media.VIDEO_SCALING_MODE_FILL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for video scaling where the scaling is turn off. The movie will not be scaled.</p>","insert":"$0","match":"Ti.Media.VIDEO_SCALING_NONE","display":"(Property)\tTi.Media.VIDEO_SCALING_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video source type is a file. Related to the <tt>sourceType</tt> property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a></p>","insert":"$0","match":"Ti.Media.VIDEO_SOURCE_TYPE_FILE","display":"(Property)\tTi.Media.VIDEO_SOURCE_TYPE_FILE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video source type is a remote stream. Related to the <tt>sourceType</tt> property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a></p>","insert":"$0","match":"Ti.Media.VIDEO_SOURCE_TYPE_STREAMING","display":"(Property)\tTi.Media.VIDEO_SOURCE_TYPE_STREAMING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the video source type is unknown. Related to the <tt>sourceType</tt> property of <a href=\"Titanium.Media.VideoPlayer.html\">Titanium.Media.VideoPlayer</a></p>","insert":"$0","match":"Ti.Media.VIDEO_SOURCE_TYPE_UNKNOWN","display":"(Property)\tTi.Media.VIDEO_SOURCE_TYPE_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>use the exact time</p>","insert":"$0","match":"Ti.Media.VIDEO_TIME_OPTION_EXACT","display":"(Property)\tTi.Media.VIDEO_TIME_OPTION_EXACT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>use the closest keyframe in the time</p>","insert":"$0","match":"Ti.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME","display":"(Property)\tTi.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns the line type constant for the current line type</p>","insert":"$0","match":"Ti.Media.audioLineType","display":"(Property)\tTi.Media.audioLineType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if the device is playing audio</p>","insert":"$0","match":"Ti.Media.audioPlaying","display":"(Property)\tTi.Media.audioPlaying\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return an array of media type constants supported for the camera</p>","insert":"$0","match":"Ti.Media.availableCameraMediaTypes","display":"(Property)\tTi.Media.availableCameraMediaTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return an array of media type constants supported for saving to the photo gallery</p>","insert":"$0","match":"Ti.Media.availablePhotoGalleryMediaTypes","display":"(Property)\tTi.Media.availablePhotoGalleryMediaTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return an array of media type constants supported for the photo</p>","insert":"$0","match":"Ti.Media.availablePhotoMediaTypes","display":"(Property)\tTi.Media.availablePhotoMediaTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the current average microphone level in dB or -1 if microphone monitoring is disabled</p>","insert":"$0","match":"Ti.Media.averageMicrophonePower","display":"(Property)\tTi.Media.averageMicrophonePower\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a constant for the default audio session mode to be used. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Ti.Media.defaultAudioSessionMode","display":"(Property)\tTi.Media.defaultAudioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the current microphone level peak power in dB or -1 if microphone monitoring is disabled</p>","insert":"$0","match":"Ti.Media.peakMicrophonePower","display":"(Property)\tTi.Media.peakMicrophonePower\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current volume of the playback device</p>","insert":"$0","match":"Ti.Media.volume","display":"(Property)\tTi.Media.volume\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The AudioPlayer object is returned by <a href=\"Titanium.Media.createAudioPlayer.html\">Titanium.Media.createAudioPlayer</a> and is used for streaming audio to the device and low-level control of the audio playback.</p><hr />","insert":"$0","match":"Titanium.Media.AudioPlayer","display":"(Namespace)\tTitanium.Media.AudioPlayer","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioPlayer.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.AudioPlayer.addEventListener","display":"(Method)\t\tTitanium.Media.AudioPlayer.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioPlayer.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Media.AudioPlayer.fireEvent","display":"(Method)\t\tTitanium.Media.AudioPlayer.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioPlayer.pause","display":"(Method)\t\tTitanium.Media.AudioPlayer.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioPlayer.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.AudioPlayer.removeEventListener","display":"(Method)\t\tTitanium.Media.AudioPlayer.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>control the playback of the audio</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioPlayer.setPaused</u></b><i>:void()</i><br>(\n\t\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>pass true to pause the current playback temporarily, false to unpause it</span>\n)\n</code>","insert":"(${1:${2:paused}})","match":"Titanium.Media.AudioPlayer.setPaused","display":"(Method)\t\tTitanium.Media.AudioPlayer.setPaused\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change the url of the audio playback</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioPlayer.setUrl</u></b><i>:void()</i><br>(\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the new url</span>\n)\n</code>","insert":"(${1:'${0:url}'})","match":"Titanium.Media.AudioPlayer.setUrl","display":"(Method)\t\tTitanium.Media.AudioPlayer.setUrl\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioPlayer.start","display":"(Method)\t\tTitanium.Media.AudioPlayer.start\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioPlayer.stateDescription","display":"(Method)\t\tTitanium.Media.AudioPlayer.stateDescription\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioPlayer.stop","display":"(Method)\t\tTitanium.Media.AudioPlayer.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the buffering from the network state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_BUFFERING","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_BUFFERING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the initialization state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_INITIALIZED","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_INITIALIZED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the paused state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_PAUSED","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_PAUSED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the playing state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_PLAYING","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_PLAYING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the starting playback state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_STARTING","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_STARTING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the stopped state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_STOPPED","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_STOPPED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the stopping state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_STOPPING","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_STOPPING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the waiting for audio data from the network state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_WAITING_FOR_DATA","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_WAITING_FOR_DATA\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the waiting for audio data to fill the queue state</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.STATE_WAITING_FOR_QUEUE","display":"(Property)\tTitanium.Media.AudioPlayer.STATE_WAITING_FOR_QUEUE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.allowBackground","display":"(Property)\tTitanium.Media.AudioPlayer.allowBackground\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.audioSessionMode","display":"(Property)\tTitanium.Media.AudioPlayer.audioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>bit rate of the current playback stream</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.bitRate","display":"(Property)\tTitanium.Media.AudioPlayer.bitRate\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is idle</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.idle","display":"(Property)\tTitanium.Media.AudioPlayer.idle\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is paused</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.paused","display":"(Property)\tTitanium.Media.AudioPlayer.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is streaming audio</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.playing","display":"(Property)\tTitanium.Media.AudioPlayer.playing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns the current playback progress. Will return zero if sampleRate has not yet been detected</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.progress","display":"(Property)\tTitanium.Media.AudioPlayer.progress\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns int for the current state of playback</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.state","display":"(Property)\tTitanium.Media.AudioPlayer.state\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns the url for the current playback</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.url","display":"(Property)\tTitanium.Media.AudioPlayer.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is waiting for audio data from the network</p>","insert":"$0","match":"Titanium.Media.AudioPlayer.waiting","display":"(Property)\tTitanium.Media.AudioPlayer.waiting\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The AudioPlayer object is returned by <a href=\"Titanium.Media.createAudioPlayer.html\">Titanium.Media.createAudioPlayer</a> and is used for streaming audio to the device and low-level control of the audio playback.</p><hr />","insert":"$0","match":"Ti.Media.AudioPlayer","display":"(Namespace)\tTi.Media.AudioPlayer","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioPlayer.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.AudioPlayer.addEventListener","display":"(Method)\t\tTi.Media.AudioPlayer.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioPlayer.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Media.AudioPlayer.fireEvent","display":"(Method)\t\tTi.Media.AudioPlayer.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioPlayer.pause","display":"(Method)\t\tTi.Media.AudioPlayer.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioPlayer.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.AudioPlayer.removeEventListener","display":"(Method)\t\tTi.Media.AudioPlayer.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>control the playback of the audio</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioPlayer.setPaused</u></b><i>:void()</i><br>(\n\t\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>pass true to pause the current playback temporarily, false to unpause it</span>\n)\n</code>","insert":"(${1:${2:paused}})","match":"Ti.Media.AudioPlayer.setPaused","display":"(Method)\t\tTi.Media.AudioPlayer.setPaused\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change the url of the audio playback</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioPlayer.setUrl</u></b><i>:void()</i><br>(\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the new url</span>\n)\n</code>","insert":"(${1:'${0:url}'})","match":"Ti.Media.AudioPlayer.setUrl","display":"(Method)\t\tTi.Media.AudioPlayer.setUrl\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioPlayer.start","display":"(Method)\t\tTi.Media.AudioPlayer.start\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioPlayer.stateDescription","display":"(Method)\t\tTi.Media.AudioPlayer.stateDescription\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioPlayer.stop","display":"(Method)\t\tTi.Media.AudioPlayer.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the buffering from the network state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_BUFFERING","display":"(Property)\tTi.Media.AudioPlayer.STATE_BUFFERING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the initialization state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_INITIALIZED","display":"(Property)\tTi.Media.AudioPlayer.STATE_INITIALIZED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the paused state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_PAUSED","display":"(Property)\tTi.Media.AudioPlayer.STATE_PAUSED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the playing state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_PLAYING","display":"(Property)\tTi.Media.AudioPlayer.STATE_PLAYING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the starting playback state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_STARTING","display":"(Property)\tTi.Media.AudioPlayer.STATE_STARTING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the stopped state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_STOPPED","display":"(Property)\tTi.Media.AudioPlayer.STATE_STOPPED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the stopping state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_STOPPING","display":"(Property)\tTi.Media.AudioPlayer.STATE_STOPPING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the waiting for audio data from the network state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_WAITING_FOR_DATA","display":"(Property)\tTi.Media.AudioPlayer.STATE_WAITING_FOR_DATA\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>current playback is in the waiting for audio data to fill the queue state</p>","insert":"$0","match":"Ti.Media.AudioPlayer.STATE_WAITING_FOR_QUEUE","display":"(Property)\tTi.Media.AudioPlayer.STATE_WAITING_FOR_QUEUE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p>","insert":"$0","match":"Ti.Media.AudioPlayer.allowBackground","display":"(Property)\tTi.Media.AudioPlayer.allowBackground\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Ti.Media.AudioPlayer.audioSessionMode","display":"(Property)\tTi.Media.AudioPlayer.audioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>bit rate of the current playback stream</p>","insert":"$0","match":"Ti.Media.AudioPlayer.bitRate","display":"(Property)\tTi.Media.AudioPlayer.bitRate\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is idle</p>","insert":"$0","match":"Ti.Media.AudioPlayer.idle","display":"(Property)\tTi.Media.AudioPlayer.idle\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is paused</p>","insert":"$0","match":"Ti.Media.AudioPlayer.paused","display":"(Property)\tTi.Media.AudioPlayer.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is streaming audio</p>","insert":"$0","match":"Ti.Media.AudioPlayer.playing","display":"(Property)\tTi.Media.AudioPlayer.playing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns the current playback progress. Will return zero if sampleRate has not yet been detected</p>","insert":"$0","match":"Ti.Media.AudioPlayer.progress","display":"(Property)\tTi.Media.AudioPlayer.progress\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns int for the current state of playback</p>","insert":"$0","match":"Ti.Media.AudioPlayer.state","display":"(Property)\tTi.Media.AudioPlayer.state\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns the url for the current playback</p>","insert":"$0","match":"Ti.Media.AudioPlayer.url","display":"(Property)\tTi.Media.AudioPlayer.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns boolean indicating if the playback is waiting for audio data from the network</p>","insert":"$0","match":"Ti.Media.AudioPlayer.waiting","display":"(Property)\tTi.Media.AudioPlayer.waiting\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The AudioRecorder object is returned by <a href=\"Titanium.Media.createAudioRecorder.html\">Titanium.Media.createAudioRecorder</a> and is used for recording audio from the device microphone.</p><hr />","insert":"$0","match":"Titanium.Media.AudioRecorder","display":"(Namespace)\tTitanium.Media.AudioRecorder","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioRecorder.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.AudioRecorder.addEventListener","display":"(Method)\t\tTitanium.Media.AudioRecorder.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioRecorder.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Media.AudioRecorder.fireEvent","display":"(Method)\t\tTitanium.Media.AudioRecorder.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioRecorder.pause","display":"(Method)\t\tTitanium.Media.AudioRecorder.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.AudioRecorder.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.AudioRecorder.removeEventListener","display":"(Method)\t\tTitanium.Media.AudioRecorder.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioRecorder.resume","display":"(Method)\t\tTitanium.Media.AudioRecorder.resume\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioRecorder.start","display":"(Method)\t\tTitanium.Media.AudioRecorder.start\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.AudioRecorder.stop","display":"(Method)\t\tTitanium.Media.AudioRecorder.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the default audio session mode to be used for this recorder. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Titanium.Media.AudioRecorder.audioSessionMode","display":"(Property)\tTitanium.Media.AudioRecorder.audioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio compression constant to be used for the recording</p>","insert":"$0","match":"Titanium.Media.AudioRecorder.compression","display":"(Property)\tTitanium.Media.AudioRecorder.compression\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format constant for used for the recording</p>","insert":"$0","match":"Titanium.Media.AudioRecorder.format","display":"(Property)\tTitanium.Media.AudioRecorder.format\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly property to indicate if paused</p>","insert":"$0","match":"Titanium.Media.AudioRecorder.paused","display":"(Property)\tTitanium.Media.AudioRecorder.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly property to indicate if recording</p>","insert":"$0","match":"Titanium.Media.AudioRecorder.recording","display":"(Property)\tTitanium.Media.AudioRecorder.recording\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly property to indicate if stopped</p>","insert":"$0","match":"Titanium.Media.AudioRecorder.stopped","display":"(Property)\tTitanium.Media.AudioRecorder.stopped\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The AudioRecorder object is returned by <a href=\"Titanium.Media.createAudioRecorder.html\">Titanium.Media.createAudioRecorder</a> and is used for recording audio from the device microphone.</p><hr />","insert":"$0","match":"Ti.Media.AudioRecorder","display":"(Namespace)\tTi.Media.AudioRecorder","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioRecorder.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.AudioRecorder.addEventListener","display":"(Method)\t\tTi.Media.AudioRecorder.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioRecorder.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Media.AudioRecorder.fireEvent","display":"(Method)\t\tTi.Media.AudioRecorder.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioRecorder.pause","display":"(Method)\t\tTi.Media.AudioRecorder.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.AudioRecorder.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.AudioRecorder.removeEventListener","display":"(Method)\t\tTi.Media.AudioRecorder.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioRecorder.resume","display":"(Method)\t\tTi.Media.AudioRecorder.resume\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioRecorder.start","display":"(Method)\t\tTi.Media.AudioRecorder.start\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.AudioRecorder.stop","display":"(Method)\t\tTi.Media.AudioRecorder.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the default audio session mode to be used for this recorder. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Ti.Media.AudioRecorder.audioSessionMode","display":"(Property)\tTi.Media.AudioRecorder.audioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio compression constant to be used for the recording</p>","insert":"$0","match":"Ti.Media.AudioRecorder.compression","display":"(Property)\tTi.Media.AudioRecorder.compression\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>audio format constant for used for the recording</p>","insert":"$0","match":"Ti.Media.AudioRecorder.format","display":"(Property)\tTi.Media.AudioRecorder.format\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly property to indicate if paused</p>","insert":"$0","match":"Ti.Media.AudioRecorder.paused","display":"(Property)\tTi.Media.AudioRecorder.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly property to indicate if recording</p>","insert":"$0","match":"Ti.Media.AudioRecorder.recording","display":"(Property)\tTi.Media.AudioRecorder.recording\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly property to indicate if stopped</p>","insert":"$0","match":"Ti.Media.AudioRecorder.stopped","display":"(Property)\tTi.Media.AudioRecorder.stopped\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Sound object is returned by <a href=\"Titanium.Media.createSound.html\">Titanium.Media.createSound</a> and is useful for playing basic sounds. The Sound object loads the entire media resource in memory before playing.  If you need to support streaming, use the <a href=\"Titanium.Media.createAudioPlayer.html\">Titanium.Media.createAudioPlayer</a> API.</p><hr /><p>You can pass the property <tt>preload</tt> in the constructor as an object property to cause the audio to be preloaded before <tt>play</tt> is invoked.  For larger audio files, this is recommended if you want the audio to begin immediately when invoking <tt>play</tt>.</p>","insert":"$0","match":"Titanium.Media.Sound","display":"(Namespace)\tTitanium.Media.Sound","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Media.Sound.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.Sound.addEventListener","display":"(Method)\t\tTitanium.Media.Sound.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.Sound.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Media.Sound.fireEvent","display":"(Method)\t\tTitanium.Media.Sound.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.getTime","display":"(Method)\t\tTitanium.Media.Sound.getTime\t:double()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.getVolume","display":"(Method)\t\tTitanium.Media.Sound.getVolume\t:float()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.isLooping","display":"(Method)\t\tTitanium.Media.Sound.isLooping\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.isPaused","display":"(Method)\t\tTitanium.Media.Sound.isPaused\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.isPlaying","display":"(Method)\t\tTitanium.Media.Sound.isPlaying\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.pause","display":"(Method)\t\tTitanium.Media.Sound.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.play","display":"(Method)\t\tTitanium.Media.Sound.play\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.release","display":"(Method)\t\tTitanium.Media.Sound.release\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.Sound.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.Sound.removeEventListener","display":"(Method)\t\tTitanium.Media.Sound.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.reset","display":"(Method)\t\tTitanium.Media.Sound.reset\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.setLooping","display":"(Method)\t\tTitanium.Media.Sound.setLooping\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.setPaused","display":"(Method)\t\tTitanium.Media.Sound.setPaused\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.setTime","display":"(Method)\t\tTitanium.Media.Sound.setTime\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.setVolume","display":"(Method)\t\tTitanium.Media.Sound.setVolume\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.Sound.stop","display":"(Method)\t\tTitanium.Media.Sound.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p>","insert":"$0","match":"Titanium.Media.Sound.allowBackground","display":"(Property)\tTitanium.Media.Sound.allowBackground\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Titanium.Media.Sound.audioSessionMode","display":"(Property)\tTitanium.Media.Sound.audioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration of the audio.</p>","insert":"$0","match":"Titanium.Media.Sound.duration","display":"(Property)\tTitanium.Media.Sound.duration\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the audio should loop upon completion</p>","insert":"$0","match":"Titanium.Media.Sound.looping","display":"(Property)\tTitanium.Media.Sound.looping\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the audio is paused</p>","insert":"$0","match":"Titanium.Media.Sound.paused","display":"(Property)\tTitanium.Media.Sound.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the audio is playing</p>","insert":"$0","match":"Titanium.Media.Sound.playing","display":"(Property)\tTitanium.Media.Sound.playing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the time position of the audio.</p>","insert":"$0","match":"Titanium.Media.Sound.time","display":"(Property)\tTitanium.Media.Sound.time\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to the audio</p>","insert":"$0","match":"Titanium.Media.Sound.url","display":"(Property)\tTitanium.Media.Sound.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the volume of the audio. this volume only affects the media, not the device audio.</p>","insert":"$0","match":"Titanium.Media.Sound.volume","display":"(Property)\tTitanium.Media.Sound.volume\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Sound object is returned by <a href=\"Titanium.Media.createSound.html\">Titanium.Media.createSound</a> and is useful for playing basic sounds. The Sound object loads the entire media resource in memory before playing.  If you need to support streaming, use the <a href=\"Titanium.Media.createAudioPlayer.html\">Titanium.Media.createAudioPlayer</a> API.</p><hr /><p>You can pass the property <tt>preload</tt> in the constructor as an object property to cause the audio to be preloaded before <tt>play</tt> is invoked.  For larger audio files, this is recommended if you want the audio to begin immediately when invoking <tt>play</tt>.</p>","insert":"$0","match":"Ti.Media.Sound","display":"(Namespace)\tTi.Media.Sound","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Media.Sound.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.Sound.addEventListener","display":"(Method)\t\tTi.Media.Sound.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.Sound.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Media.Sound.fireEvent","display":"(Method)\t\tTi.Media.Sound.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.getTime","display":"(Method)\t\tTi.Media.Sound.getTime\t:double()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.getVolume","display":"(Method)\t\tTi.Media.Sound.getVolume\t:float()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.isLooping","display":"(Method)\t\tTi.Media.Sound.isLooping\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.isPaused","display":"(Method)\t\tTi.Media.Sound.isPaused\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.isPlaying","display":"(Method)\t\tTi.Media.Sound.isPlaying\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.pause","display":"(Method)\t\tTi.Media.Sound.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.play","display":"(Method)\t\tTi.Media.Sound.play\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.release","display":"(Method)\t\tTi.Media.Sound.release\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.Sound.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.Sound.removeEventListener","display":"(Method)\t\tTi.Media.Sound.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.reset","display":"(Method)\t\tTi.Media.Sound.reset\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.setLooping","display":"(Method)\t\tTi.Media.Sound.setLooping\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.setPaused","display":"(Method)\t\tTi.Media.Sound.setPaused\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.setTime","display":"(Method)\t\tTi.Media.Sound.setTime\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.setVolume","display":"(Method)\t\tTi.Media.Sound.setVolume\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.Sound.stop","display":"(Method)\t\tTi.Media.Sound.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)</p>","insert":"$0","match":"Ti.Media.Sound.allowBackground","display":"(Property)\tTi.Media.Sound.allowBackground\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the default audio session mode to be used for this player. One of <a href=\"Titanium.Media.AUDIO_SESSION_MODE_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_AMBIENT</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT-property.html\">Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK</a> <a href=\"Titanium.Media.AUDIO_SESSION_MODE_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_RECORD</a>, <a href=\"Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD-property.html\">Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD</a>.</p>","insert":"$0","match":"Ti.Media.Sound.audioSessionMode","display":"(Property)\tTi.Media.Sound.audioSessionMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration of the audio.</p>","insert":"$0","match":"Ti.Media.Sound.duration","display":"(Property)\tTi.Media.Sound.duration\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the audio should loop upon completion</p>","insert":"$0","match":"Ti.Media.Sound.looping","display":"(Property)\tTi.Media.Sound.looping\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the audio is paused</p>","insert":"$0","match":"Ti.Media.Sound.paused","display":"(Property)\tTi.Media.Sound.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the audio is playing</p>","insert":"$0","match":"Ti.Media.Sound.playing","display":"(Property)\tTi.Media.Sound.playing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the time position of the audio.</p>","insert":"$0","match":"Ti.Media.Sound.time","display":"(Property)\tTi.Media.Sound.time\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to the audio</p>","insert":"$0","match":"Ti.Media.Sound.url","display":"(Property)\tTi.Media.Sound.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the volume of the audio. this volume only affects the media, not the device audio.</p>","insert":"$0","match":"Ti.Media.Sound.volume","display":"(Property)\tTi.Media.Sound.volume\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The VideoPlayer object is returned by <a href=\"Titanium.Media.createVideoPlayer.html\">Titanium.Media.createVideoPlayer</a> and is useful for playing videos. </p><hr /><p>Starting in iPhone 3.2 SDK, the video player can be embedded in any normal view.  Prior to 3.2, only fullscreen views were available on iPhone.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer","display":"(Namespace)\tTitanium.Media.VideoPlayer","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.VideoPlayer.add","display":"(Method)\t\tTitanium.Media.VideoPlayer.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.VideoPlayer.addEventListener","display":"(Method)\t\tTitanium.Media.VideoPlayer.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.VideoPlayer.animate","display":"(Method)\t\tTitanium.Media.VideoPlayer.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.VideoPlayer.cancelAllThumbnailImageRequests","display":"(Method)\t\tTitanium.Media.VideoPlayer.cancelAllThumbnailImageRequests\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Media.VideoPlayer.fireEvent","display":"(Method)\t\tTitanium.Media.VideoPlayer.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.VideoPlayer.hide","display":"(Method)\t\tTitanium.Media.VideoPlayer.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.VideoPlayer.play","display":"(Method)\t\tTitanium.Media.VideoPlayer.play\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.VideoPlayer.release","display":"(Method)\t\tTitanium.Media.VideoPlayer.release\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.VideoPlayer.remove","display":"(Method)\t\tTitanium.Media.VideoPlayer.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Media.VideoPlayer.removeEventListener","display":"(Method)\t\tTitanium.Media.VideoPlayer.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Asynchronously request thumbnails for one or more times, provided as an array of numbers (double). Fires a <tt>thumbnail</tt> event on completion. Optionally invokes the callback function passed in the method.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes</u></b><i>:void()</i><br>(\n\t\t<span><b>times</b><i>:array</i></span>\n\t\t<span class='info'>array of doubles for each time to request</span>\n\t\t<span><b>option</b><i>:int</i></span>\n\t\t<span class='info'>either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]].</span>\n)\n</code>","insert":"(${1:${2:times}, ${3:option}})","match":"Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes","display":"(Method)\t\tTitanium.Media.VideoPlayer.requestThumbnailImagesAtTimes\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>A view for customization which is always displayed behind movie content.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.setBackgroundView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>view to set</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.VideoPlayer.setBackgroundView","display":"(Method)\t\tTitanium.Media.VideoPlayer.setBackgroundView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the a non-url based media to play, either a File or Blob.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.setMedia</u></b><i>:void()</i><br>(\n\t\t<span><b>media</b><i>:object</i></span>\n\t\t<span class='info'>media to play</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Media.VideoPlayer.setMedia","display":"(Method)\t\tTitanium.Media.VideoPlayer.setMedia\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the url to play</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.setUrl</u></b><i>:void()</i><br>(\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the url to play</span>\n)\n</code>","insert":"(${1:'${0:url}'})","match":"Titanium.Media.VideoPlayer.setUrl","display":"(Method)\t\tTitanium.Media.VideoPlayer.setUrl\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.VideoPlayer.show","display":"(Method)\t\tTitanium.Media.VideoPlayer.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Media.VideoPlayer.stop","display":"(Method)\t\tTitanium.Media.VideoPlayer.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a thumbnail at the given time as a blob.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.thumbnailImageAtTime</u></b><i>:object()</i><br>(\n\t\t<span><b>time</b><i>:double</i></span>\n\t\t<span class='info'>playback time</span>\n\t\t<span><b>option</b><i>:int</i></span>\n\t\t<span class='info'>either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]]</span>\n)\n</code>","insert":"(${1:${2:time}, ${3:option}})","match":"Titanium.Media.VideoPlayer.thumbnailImageAtTime","display":"(Method)\t\tTitanium.Media.VideoPlayer.thumbnailImageAtTime\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.Media.VideoPlayer.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.Media.VideoPlayer.toImage","display":"(Method)\t\tTitanium.Media.VideoPlayer.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.Media.VideoPlayer.anchorPoint","display":"(Property)\tTitanium.Media.VideoPlayer.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.Media.VideoPlayer.animatedCenterPoint","display":"(Property)\tTitanium.Media.VideoPlayer.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.autoplay","display":"(Property)\tTitanium.Media.VideoPlayer.autoplay\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>background color for the view. deprecated, set the background color on the view.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.backgroundColor","display":"(Property)\tTitanium.Media.VideoPlayer.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.Media.VideoPlayer.backgroundGradient","display":"(Property)\tTitanium.Media.VideoPlayer.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.Media.VideoPlayer.backgroundImage","display":"(Property)\tTitanium.Media.VideoPlayer.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.Media.VideoPlayer.backgroundLeftCap","display":"(Property)\tTitanium.Media.VideoPlayer.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.Media.VideoPlayer.backgroundTopCap","display":"(Property)\tTitanium.Media.VideoPlayer.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.Media.VideoPlayer.borderColor","display":"(Property)\tTitanium.Media.VideoPlayer.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.Media.VideoPlayer.borderRadius","display":"(Property)\tTitanium.Media.VideoPlayer.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.Media.VideoPlayer.borderWidth","display":"(Property)\tTitanium.Media.VideoPlayer.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Media.VideoPlayer.bottom","display":"(Property)\tTitanium.Media.VideoPlayer.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.Media.VideoPlayer.center","display":"(Property)\tTitanium.Media.VideoPlayer.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>deprecated. use url property instead.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.contentURL","display":"(Property)\tTitanium.Media.VideoPlayer.contentURL\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The duration of the movie, or 0.0 if not known.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.duration","display":"(Property)\tTitanium.Media.VideoPlayer.duration\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.endPlaybackTime","display":"(Property)\tTitanium.Media.VideoPlayer.endPlaybackTime\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.fullscreen","display":"(Property)\tTitanium.Media.VideoPlayer.fullscreen\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.Media.VideoPlayer.height","display":"(Property)\tTitanium.Media.VideoPlayer.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.initialPlaybackTime","display":"(Property)\tTitanium.Media.VideoPlayer.initialPlaybackTime\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Media.VideoPlayer.left","display":"(Property)\tTitanium.Media.VideoPlayer.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Returns the network load state of the movie player.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.loadState","display":"(Property)\tTitanium.Media.VideoPlayer.loadState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the media object, either a File or Blob.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.media","display":"(Property)\tTitanium.Media.VideoPlayer.media\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The style of the playback controls. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a></p>","insert":"$0","match":"Titanium.Media.VideoPlayer.mediaControlStyle","display":"(Property)\tTitanium.Media.VideoPlayer.mediaControlStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The types of media in the movie, or <a href=\"Titanium.Media.VIDEO_MEDIA_TYPE_NONE-property.html\">Titanium.Media.VIDEO_MEDIA_TYPE_NONE</a> if not known.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.mediaTypes","display":"(Property)\tTitanium.Media.VideoPlayer.mediaTypes\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>deprecated in 3.2+ of the iPhone SDK - use <tt>mediaControlStyle</tt>. Provides the ability to set the control mode of the movie player. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a>.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.movieControlMode","display":"(Property)\tTitanium.Media.VideoPlayer.movieControlMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns a dictionary with properties <tt>width</tt> and <tt>height</tt>. Returns the natural size of the movie or 0 for both properties if not known or applicable.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.naturalSize","display":"(Property)\tTitanium.Media.VideoPlayer.naturalSize\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.Media.VideoPlayer.opacity","display":"(Property)\tTitanium.Media.VideoPlayer.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The currently playable duration of the movie, for progressively downloaded network content.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.playableDuration","display":"(Property)\tTitanium.Media.VideoPlayer.playableDuration\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Returns the current playback state of the music player</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.playbackState","display":"(Property)\tTitanium.Media.VideoPlayer.playbackState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Boolean to indicate if the player has started playing.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.playing","display":"(Property)\tTitanium.Media.VideoPlayer.playing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Determines how the movie player repeats when reaching the end of playback. Defaults to <a href=\"Titanium.Media.VIDEO_REPEAT_MODE_NONE-property.html\">Titanium.Media.VIDEO_REPEAT_MODE_NONE</a>.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.repeatMode","display":"(Property)\tTitanium.Media.VideoPlayer.repeatMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Media.VideoPlayer.right","display":"(Property)\tTitanium.Media.VideoPlayer.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Determines how the content scales to fit the view. Defaults to <a href=\"Titanium.Media.VIDEO_SCALING_ASPECT_FIT-property.html\">Titanium.Media.VIDEO_SCALING_ASPECT_FIT</a>.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.scalingMode","display":"(Property)\tTitanium.Media.VideoPlayer.scalingMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.Media.VideoPlayer.size","display":"(Property)\tTitanium.Media.VideoPlayer.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The playback type of the movie. Defaults to <a href=\"Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN-property.html\">Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN</a>. Specifying a playback type before playing the movie can result in faster load times.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.sourceType","display":"(Property)\tTitanium.Media.VideoPlayer.sourceType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.Media.VideoPlayer.top","display":"(Property)\tTitanium.Media.VideoPlayer.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.Media.VideoPlayer.touchEnabled","display":"(Property)\tTitanium.Media.VideoPlayer.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.Media.VideoPlayer.transform","display":"(Property)\tTitanium.Media.VideoPlayer.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url of the media.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.url","display":"(Property)\tTitanium.Media.VideoPlayer.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.</p>","insert":"$0","match":"Titanium.Media.VideoPlayer.useApplicationAudioSession","display":"(Property)\tTitanium.Media.VideoPlayer.useApplicationAudioSession\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.Media.VideoPlayer.visible","display":"(Property)\tTitanium.Media.VideoPlayer.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.Media.VideoPlayer.width","display":"(Property)\tTitanium.Media.VideoPlayer.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.Media.VideoPlayer.zIndex","display":"(Property)\tTitanium.Media.VideoPlayer.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The VideoPlayer object is returned by <a href=\"Titanium.Media.createVideoPlayer.html\">Titanium.Media.createVideoPlayer</a> and is useful for playing videos. </p><hr /><p>Starting in iPhone 3.2 SDK, the video player can be embedded in any normal view.  Prior to 3.2, only fullscreen views were available on iPhone.</p>","insert":"$0","match":"Ti.Media.VideoPlayer","display":"(Namespace)\tTi.Media.VideoPlayer","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.VideoPlayer.add","display":"(Method)\t\tTi.Media.VideoPlayer.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.VideoPlayer.addEventListener","display":"(Method)\t\tTi.Media.VideoPlayer.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.VideoPlayer.animate","display":"(Method)\t\tTi.Media.VideoPlayer.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.VideoPlayer.cancelAllThumbnailImageRequests","display":"(Method)\t\tTi.Media.VideoPlayer.cancelAllThumbnailImageRequests\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Media.VideoPlayer.fireEvent","display":"(Method)\t\tTi.Media.VideoPlayer.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.VideoPlayer.hide","display":"(Method)\t\tTi.Media.VideoPlayer.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.VideoPlayer.play","display":"(Method)\t\tTi.Media.VideoPlayer.play\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.VideoPlayer.release","display":"(Method)\t\tTi.Media.VideoPlayer.release\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.VideoPlayer.remove","display":"(Method)\t\tTi.Media.VideoPlayer.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Media.VideoPlayer.removeEventListener","display":"(Method)\t\tTi.Media.VideoPlayer.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Asynchronously request thumbnails for one or more times, provided as an array of numbers (double). Fires a <tt>thumbnail</tt> event on completion. Optionally invokes the callback function passed in the method.</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.requestThumbnailImagesAtTimes</u></b><i>:void()</i><br>(\n\t\t<span><b>times</b><i>:array</i></span>\n\t\t<span class='info'>array of doubles for each time to request</span>\n\t\t<span><b>option</b><i>:int</i></span>\n\t\t<span class='info'>either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]].</span>\n)\n</code>","insert":"(${1:${2:times}, ${3:option}})","match":"Ti.Media.VideoPlayer.requestThumbnailImagesAtTimes","display":"(Method)\t\tTi.Media.VideoPlayer.requestThumbnailImagesAtTimes\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>A view for customization which is always displayed behind movie content.</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.setBackgroundView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>view to set</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.VideoPlayer.setBackgroundView","display":"(Method)\t\tTi.Media.VideoPlayer.setBackgroundView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the a non-url based media to play, either a File or Blob.</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.setMedia</u></b><i>:void()</i><br>(\n\t\t<span><b>media</b><i>:object</i></span>\n\t\t<span class='info'>media to play</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Media.VideoPlayer.setMedia","display":"(Method)\t\tTi.Media.VideoPlayer.setMedia\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the url to play</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.setUrl</u></b><i>:void()</i><br>(\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the url to play</span>\n)\n</code>","insert":"(${1:'${0:url}'})","match":"Ti.Media.VideoPlayer.setUrl","display":"(Method)\t\tTi.Media.VideoPlayer.setUrl\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.VideoPlayer.show","display":"(Method)\t\tTi.Media.VideoPlayer.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Media.VideoPlayer.stop","display":"(Method)\t\tTi.Media.VideoPlayer.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a thumbnail at the given time as a blob.</p><p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.thumbnailImageAtTime</u></b><i>:object()</i><br>(\n\t\t<span><b>time</b><i>:double</i></span>\n\t\t<span class='info'>playback time</span>\n\t\t<span><b>option</b><i>:int</i></span>\n\t\t<span class='info'>either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]]</span>\n)\n</code>","insert":"(${1:${2:time}, ${3:option}})","match":"Ti.Media.VideoPlayer.thumbnailImageAtTime","display":"(Method)\t\tTi.Media.VideoPlayer.thumbnailImageAtTime\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.Media.VideoPlayer.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.Media.VideoPlayer.toImage","display":"(Method)\t\tTi.Media.VideoPlayer.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.Media.VideoPlayer.anchorPoint","display":"(Property)\tTi.Media.VideoPlayer.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.Media.VideoPlayer.animatedCenterPoint","display":"(Property)\tTi.Media.VideoPlayer.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.autoplay","display":"(Property)\tTi.Media.VideoPlayer.autoplay\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>background color for the view. deprecated, set the background color on the view.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.backgroundColor","display":"(Property)\tTi.Media.VideoPlayer.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.Media.VideoPlayer.backgroundGradient","display":"(Property)\tTi.Media.VideoPlayer.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.Media.VideoPlayer.backgroundImage","display":"(Property)\tTi.Media.VideoPlayer.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.Media.VideoPlayer.backgroundLeftCap","display":"(Property)\tTi.Media.VideoPlayer.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.Media.VideoPlayer.backgroundTopCap","display":"(Property)\tTi.Media.VideoPlayer.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.Media.VideoPlayer.borderColor","display":"(Property)\tTi.Media.VideoPlayer.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.Media.VideoPlayer.borderRadius","display":"(Property)\tTi.Media.VideoPlayer.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.Media.VideoPlayer.borderWidth","display":"(Property)\tTi.Media.VideoPlayer.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Media.VideoPlayer.bottom","display":"(Property)\tTi.Media.VideoPlayer.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.Media.VideoPlayer.center","display":"(Property)\tTi.Media.VideoPlayer.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>deprecated. use url property instead.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.contentURL","display":"(Property)\tTi.Media.VideoPlayer.contentURL\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The duration of the movie, or 0.0 if not known.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.duration","display":"(Property)\tTi.Media.VideoPlayer.duration\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.endPlaybackTime","display":"(Property)\tTi.Media.VideoPlayer.endPlaybackTime\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.fullscreen","display":"(Property)\tTi.Media.VideoPlayer.fullscreen\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.Media.VideoPlayer.height","display":"(Property)\tTi.Media.VideoPlayer.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.initialPlaybackTime","display":"(Property)\tTi.Media.VideoPlayer.initialPlaybackTime\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Media.VideoPlayer.left","display":"(Property)\tTi.Media.VideoPlayer.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Returns the network load state of the movie player.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.loadState","display":"(Property)\tTi.Media.VideoPlayer.loadState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the media object, either a File or Blob.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.media","display":"(Property)\tTi.Media.VideoPlayer.media\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The style of the playback controls. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a></p>","insert":"$0","match":"Ti.Media.VideoPlayer.mediaControlStyle","display":"(Property)\tTi.Media.VideoPlayer.mediaControlStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The types of media in the movie, or <a href=\"Titanium.Media.VIDEO_MEDIA_TYPE_NONE-property.html\">Titanium.Media.VIDEO_MEDIA_TYPE_NONE</a> if not known.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.mediaTypes","display":"(Property)\tTi.Media.VideoPlayer.mediaTypes\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>deprecated in 3.2+ of the iPhone SDK - use <tt>mediaControlStyle</tt>. Provides the ability to set the control mode of the movie player. Defaults to <a href=\"Titanium.Media.VIDEO_CONTROL_DEFAULT-property.html\">Titanium.Media.VIDEO_CONTROL_DEFAULT</a>.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.movieControlMode","display":"(Property)\tTi.Media.VideoPlayer.movieControlMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns a dictionary with properties <tt>width</tt> and <tt>height</tt>. Returns the natural size of the movie or 0 for both properties if not known or applicable.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.naturalSize","display":"(Property)\tTi.Media.VideoPlayer.naturalSize\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.Media.VideoPlayer.opacity","display":"(Property)\tTi.Media.VideoPlayer.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The currently playable duration of the movie, for progressively downloaded network content.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.playableDuration","display":"(Property)\tTi.Media.VideoPlayer.playableDuration\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Returns the current playback state of the music player</p>","insert":"$0","match":"Ti.Media.VideoPlayer.playbackState","display":"(Property)\tTi.Media.VideoPlayer.playbackState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Boolean to indicate if the player has started playing.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.playing","display":"(Property)\tTi.Media.VideoPlayer.playing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Determines how the movie player repeats when reaching the end of playback. Defaults to <a href=\"Titanium.Media.VIDEO_REPEAT_MODE_NONE-property.html\">Titanium.Media.VIDEO_REPEAT_MODE_NONE</a>.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.repeatMode","display":"(Property)\tTi.Media.VideoPlayer.repeatMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Media.VideoPlayer.right","display":"(Property)\tTi.Media.VideoPlayer.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Determines how the content scales to fit the view. Defaults to <a href=\"Titanium.Media.VIDEO_SCALING_ASPECT_FIT-property.html\">Titanium.Media.VIDEO_SCALING_ASPECT_FIT</a>.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.scalingMode","display":"(Property)\tTi.Media.VideoPlayer.scalingMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.Media.VideoPlayer.size","display":"(Property)\tTi.Media.VideoPlayer.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The playback type of the movie. Defaults to <a href=\"Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN-property.html\">Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN</a>. Specifying a playback type before playing the movie can result in faster load times.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.sourceType","display":"(Property)\tTi.Media.VideoPlayer.sourceType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.Media.VideoPlayer.top","display":"(Property)\tTi.Media.VideoPlayer.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.Media.VideoPlayer.touchEnabled","display":"(Property)\tTi.Media.VideoPlayer.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.Media.VideoPlayer.transform","display":"(Property)\tTi.Media.VideoPlayer.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url of the media.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.url","display":"(Property)\tTi.Media.VideoPlayer.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.</p>","insert":"$0","match":"Ti.Media.VideoPlayer.useApplicationAudioSession","display":"(Property)\tTi.Media.VideoPlayer.useApplicationAudioSession\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.Media.VideoPlayer.visible","display":"(Property)\tTi.Media.VideoPlayer.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.Media.VideoPlayer.width","display":"(Property)\tTi.Media.VideoPlayer.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.Media.VideoPlayer.zIndex","display":"(Property)\tTi.Media.VideoPlayer.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Network module.  The Network module is used accessing Networking related functionality.</p><hr />","insert":"$0","match":"Titanium.Network","display":"(Namespace)\tTitanium.Network","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>adds a connectivity listener to listen for network changes. This method has been deprecated in favor of listening for a <tt>change</tt> event.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.addConnectivityListener</u></b><i>:void()</i><br>(\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke upon network connectivity changes</span>\n)\n</code>","insert":"(${1:function ${2:callback}(${3:}){${0:}\\}})","match":"Titanium.Network.addConnectivityListener","display":"(Method)\t\tTitanium.Network.addConnectivityListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Network.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Network.addEventListener","display":"(Method)\t\tTitanium.Network.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.BonjourBrowser.html\">Titanium.Network.BonjourBrowser</a><p><code class=\"usage\"><b><u>(Method)Titanium.Network.createBonjourBrowser</u></b><i>:object()</i><br>(\n\t\t<span><b>serviceType</b><i>:string</i></span>\n\t\t<span class='info'>service to search for, must include the protocol type suffix (._tcp)</span>\n\t\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>the Bonjour service domain to conduct the search in.  Default value is 'local.'</span>\n{\n\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>The domain the browser is searching in</p></span>\n\t<span><b>isSearching</b><i>:boolean</i></span>\n\t\t<span class='info'>Whether or not the browser is currently searching</p></span>\n\t<span><b>serviceType</b><i>:string</i></span>\n\t\t<span class='info'>The type of the service the browser searches for</p></span>\n}\n)\n</code>","insert":"(${1:'${2:serviceType}', '${3:domain}', {${0:}\\}})","match":"Titanium.Network.createBonjourBrowser","display":"(Method)\t\tTitanium.Network.createBonjourBrowser\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.BonjourService.html\">Titanium.Network.BonjourService</a><p><code class=\"usage\"><b><u>(Method)Titanium.Network.createBonjourService</u></b><i>:object()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the service.  Must be a unique identifier for this service type and domain.</span>\n\t\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the type of service.  Must include the protocol identifier (._tcp)</span>\n\t\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>the domain to publish the service in.  Default value is 'local.'</span>\n{\n\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>the domain of the service</p></span>\n\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the service</p></span>\n\t<span><b>socket</b><i>:object</i></span>\n\t\t<span class='info'>the TCPSocket object that is used to connect to the service</p></span>\n\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the type of the service</p></span>\n}\n)\n</code>","insert":"(${1:'${2:name}', '${3:type}', '${4:domain}', {${0:}\\}})","match":"Titanium.Network.createBonjourService","display":"(Method)\t\tTitanium.Network.createBonjourService\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.HTTPClient.html\">Titanium.Network.HTTPClient</a><p><code class=\"usage\"><b><u>(Method)Titanium.Network.createHTTPClient</u></b><i>:object()</i><br>(\n{\n\t<span><b>DONE</b><i>:int</i></span>\n\t\t<span class='info'>the DONE readyState constant</p></span>\n\t<span><b>HEADERS_RECEIVED</b><i>:int</i></span>\n\t\t<span class='info'>the HEADERS_RECEIVED readyState constant</p></span>\n\t<span><b>LOADING</b><i>:int</i></span>\n\t\t<span class='info'>the LOADING readyState constant</p></span>\n\t<span><b>OPENED</b><i>:int</i></span>\n\t\t<span class='info'>the OPENED readyState constant</p></span>\n\t<span><b>UNSENT</b><i>:int</i></span>\n\t\t<span class='info'>the UNSET readyState constant</p></span>\n\t<span><b>connected</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate that the response was successful</p></span>\n\t<span><b>connectionType</b><i>:string</i></span>\n\t\t<span class='info'>the connection type, normally either <tt>GET</tt> or <tt>POST</tt>.</p></span>\n\t<span><b>location</b><i>:string</i></span>\n\t\t<span class='info'>the absolute URL of the request</p></span>\n\t<span><b>ondatastream</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p></span>\n\t<span><b>onerror</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called upon a error response</p></span>\n\t<span><b>onload</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called upon a successful response</p></span>\n\t<span><b>onreadystatechange</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called for each readyState change</p></span>\n\t<span><b>onsendstream</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p></span>\n\t<span><b>readyState</b><i>:int</i></span>\n\t\t<span class='info'>the readyState value</p></span>\n\t<span><b>responseData</b><i>:object</i></span>\n\t\t<span class='info'>the response data as a Blob object.</p></span>\n\t<span><b>responseText</b><i>:string</i></span>\n\t\t<span class='info'>the response as text or null if an error was received or no data was returned</p></span>\n\t<span><b>responseXML</b><i>:object</i></span>\n\t\t<span class='info'>the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed</p></span>\n\t<span><b>status</b><i>:int</i></span>\n\t\t<span class='info'>the response HTTP status code</p></span>\n\t<span><b>timeout</b><i>:int</i></span>\n\t\t<span class='info'>timeout is milliseconds when the connection should be aborted</p></span>\n\t<span><b>validatesSecureCertificate</b><i>:boolean</i></span>\n\t\t<span class='info'>set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Network.createHTTPClient","display":"(Method)\t\tTitanium.Network.createHTTPClient\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.TCPSocket.html\">Titanium.Network.TCPSocket</a><p><code class=\"usage\"><b><u>(Method)Titanium.Network.createTCPSocket</u></b><i>:object()</i><br>(\n{\n\t<span><b>hostName</b><i>:string</i></span>\n\t\t<span class='info'>the host name to connect to.  Must be INADDR_ANY or an identifier for the local device in order to listen</p></span>\n\t<span><b>mode</b><i>:int</i></span>\n\t\t<span class='info'>the socket's mode</p></span>\n\t<span><b>port</b><i>:int</i></span>\n\t\t<span class='info'>the port to connect/listen on</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Network.createTCPSocket","display":"(Method)\t\tTitanium.Network.createTCPSocket\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>decode a URI component part using URI encoding</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.decodeURIComponent</u></b><i>:string()</i><br>(\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>input value to be decoded</span>\n)\n</code>","insert":"(${1:'${0:value}'})","match":"Titanium.Network.decodeURIComponent","display":"(Method)\t\tTitanium.Network.decodeURIComponent\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>encode a URI component part using URI encoding</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.encodeURIComponent</u></b><i>:string()</i><br>(\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>input value to be encoded</span>\n)\n</code>","insert":"(${1:'${0:value}'})","match":"Titanium.Network.encodeURIComponent","display":"(Method)\t\tTitanium.Network.encodeURIComponent\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Network.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Network.fireEvent","display":"(Method)\t\tTitanium.Network.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>register for push notifications with the Apple Push Notification Service. Only available on iPhone.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.registerForPushNotifications</u></b><i>:void()</i><br>(\n\t\t<span><b>config</b><i>:object</i></span>\n\t\t<span class='info'>dictionary of the following: types</tt> is an array of type constants that the application would like to receive, <tt>success</tt> is a callback function that is called when the push registration is successfully completed, <tt>error</tt> is a callback function that is called when an error is received during registration and <tt>callback</tt> is a callback function that is invoked upon receiving a new push notification. This method should be called at application startup.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Network.registerForPushNotifications","display":"(Method)\t\tTitanium.Network.registerForPushNotifications\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>removes a connectivity listener. This method has been deprecated in favor of listening for a <tt>change</tt> event.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.removeConnectivityListener</u></b><i>:void()</i><br>(\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to remove</span>\n)\n</code>","insert":"(${1:function ${2:callback}(${3:}){${0:}\\}})","match":"Titanium.Network.removeConnectivityListener","display":"(Method)\t\tTitanium.Network.removeConnectivityListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Network.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Network.removeEventListener","display":"(Method)\t\tTitanium.Network.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>constant value representing the ability for sockets to listen on any locally available network device</p>","insert":"$0","match":"Titanium.Network.INADDR_ANY","display":"(Property)\tTitanium.Network.INADDR_ANY\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is LAN</p>","insert":"$0","match":"Titanium.Network.NETWORK_LAN","display":"(Property)\tTitanium.Network.NETWORK_LAN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is MOBILE</p>","insert":"$0","match":"Titanium.Network.NETWORK_MOBILE","display":"(Property)\tTitanium.Network.NETWORK_MOBILE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is not available</p>","insert":"$0","match":"Titanium.Network.NETWORK_NONE","display":"(Property)\tTitanium.Network.NETWORK_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is not known</p>","insert":"$0","match":"Titanium.Network.NETWORK_UNKNOWN","display":"(Property)\tTitanium.Network.NETWORK_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is WIFI</p>","insert":"$0","match":"Titanium.Network.NETWORK_WIFI","display":"(Property)\tTitanium.Network.NETWORK_WIFI\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value for the push notification alert type</p>","insert":"$0","match":"Titanium.Network.NOTIFICATION_TYPE_ALERT","display":"(Property)\tTitanium.Network.NOTIFICATION_TYPE_ALERT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value for the push notification badge type</p>","insert":"$0","match":"Titanium.Network.NOTIFICATION_TYPE_BADGE","display":"(Property)\tTitanium.Network.NOTIFICATION_TYPE_BADGE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value for the push notification sound type</p>","insert":"$0","match":"Titanium.Network.NOTIFICATION_TYPE_SOUND","display":"(Property)\tTitanium.Network.NOTIFICATION_TYPE_SOUND\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value specifying read-only mode for sockets</p>","insert":"$0","match":"Titanium.Network.READ_MODE","display":"(Property)\tTitanium.Network.READ_MODE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value specifying read-write mode for sockets</p>","insert":"$0","match":"Titanium.Network.READ_WRITE_MODE","display":"(Property)\tTitanium.Network.READ_WRITE_MODE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value specifying write-only mode for sockets</p>","insert":"$0","match":"Titanium.Network.WRITE_MODE","display":"(Property)\tTitanium.Network.WRITE_MODE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the network type value as a constant.</p>","insert":"$0","match":"Titanium.Network.networkType","display":"(Property)\tTitanium.Network.networkType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the network type name constant. Returns one of <tt>NONE</tt>, <tt>WIFI</tt>, <tt>LAN</tt> or <tt>MOBILE</tt>.</p>","insert":"$0","match":"Titanium.Network.networkTypeName","display":"(Property)\tTitanium.Network.networkTypeName\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly boolean value that indicates if the network is reachable to the Internet either via WIFI or Carrier network</p>","insert":"$0","match":"Titanium.Network.online","display":"(Property)\tTitanium.Network.online\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the remote device UUID if the device was registered with the Apple Push Notification Service or null if not set. Only available on iPhone.</p>","insert":"$0","match":"Titanium.Network.remoteDeviceUUID","display":"(Property)\tTitanium.Network.remoteDeviceUUID\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns an array of network type constants enabled for the application. Only available on iPhone.</p>","insert":"$0","match":"Titanium.Network.remoteNotificationTypes","display":"(Property)\tTitanium.Network.remoteNotificationTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if remote notifications have been enabled. Only available on iPhone.</p>","insert":"$0","match":"Titanium.Network.remoteNotificationsEnabled","display":"(Property)\tTitanium.Network.remoteNotificationsEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Network module.  The Network module is used accessing Networking related functionality.</p><hr />","insert":"$0","match":"Ti.Network","display":"(Namespace)\tTi.Network","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>adds a connectivity listener to listen for network changes. This method has been deprecated in favor of listening for a <tt>change</tt> event.</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.addConnectivityListener</u></b><i>:void()</i><br>(\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke upon network connectivity changes</span>\n)\n</code>","insert":"(${1:function ${2:callback}(${3:}){${0:}\\}})","match":"Ti.Network.addConnectivityListener","display":"(Method)\t\tTi.Network.addConnectivityListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Network.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Network.addEventListener","display":"(Method)\t\tTi.Network.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.BonjourBrowser.html\">Titanium.Network.BonjourBrowser</a><p><code class=\"usage\"><b><u>(Method)Ti.Network.createBonjourBrowser</u></b><i>:object()</i><br>(\n\t\t<span><b>serviceType</b><i>:string</i></span>\n\t\t<span class='info'>service to search for, must include the protocol type suffix (._tcp)</span>\n\t\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>the Bonjour service domain to conduct the search in.  Default value is 'local.'</span>\n{\n\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>The domain the browser is searching in</p></span>\n\t<span><b>isSearching</b><i>:boolean</i></span>\n\t\t<span class='info'>Whether or not the browser is currently searching</p></span>\n\t<span><b>serviceType</b><i>:string</i></span>\n\t\t<span class='info'>The type of the service the browser searches for</p></span>\n}\n)\n</code>","insert":"(${1:'${2:serviceType}', '${3:domain}', {${0:}\\}})","match":"Ti.Network.createBonjourBrowser","display":"(Method)\t\tTi.Network.createBonjourBrowser\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.BonjourService.html\">Titanium.Network.BonjourService</a><p><code class=\"usage\"><b><u>(Method)Ti.Network.createBonjourService</u></b><i>:object()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the service.  Must be a unique identifier for this service type and domain.</span>\n\t\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the type of service.  Must include the protocol identifier (._tcp)</span>\n\t\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>the domain to publish the service in.  Default value is 'local.'</span>\n{\n\t<span><b>domain</b><i>:string</i></span>\n\t\t<span class='info'>the domain of the service</p></span>\n\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the name of the service</p></span>\n\t<span><b>socket</b><i>:object</i></span>\n\t\t<span class='info'>the TCPSocket object that is used to connect to the service</p></span>\n\t<span><b>type</b><i>:string</i></span>\n\t\t<span class='info'>the type of the service</p></span>\n}\n)\n</code>","insert":"(${1:'${2:name}', '${3:type}', '${4:domain}', {${0:}\\}})","match":"Ti.Network.createBonjourService","display":"(Method)\t\tTi.Network.createBonjourService\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.HTTPClient.html\">Titanium.Network.HTTPClient</a><p><code class=\"usage\"><b><u>(Method)Ti.Network.createHTTPClient</u></b><i>:object()</i><br>(\n{\n\t<span><b>DONE</b><i>:int</i></span>\n\t\t<span class='info'>the DONE readyState constant</p></span>\n\t<span><b>HEADERS_RECEIVED</b><i>:int</i></span>\n\t\t<span class='info'>the HEADERS_RECEIVED readyState constant</p></span>\n\t<span><b>LOADING</b><i>:int</i></span>\n\t\t<span class='info'>the LOADING readyState constant</p></span>\n\t<span><b>OPENED</b><i>:int</i></span>\n\t\t<span class='info'>the OPENED readyState constant</p></span>\n\t<span><b>UNSENT</b><i>:int</i></span>\n\t\t<span class='info'>the UNSET readyState constant</p></span>\n\t<span><b>connected</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate that the response was successful</p></span>\n\t<span><b>connectionType</b><i>:string</i></span>\n\t\t<span class='info'>the connection type, normally either <tt>GET</tt> or <tt>POST</tt>.</p></span>\n\t<span><b>location</b><i>:string</i></span>\n\t\t<span class='info'>the absolute URL of the request</p></span>\n\t<span><b>ondatastream</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p></span>\n\t<span><b>onerror</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called upon a error response</p></span>\n\t<span><b>onload</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called upon a successful response</p></span>\n\t<span><b>onreadystatechange</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called for each readyState change</p></span>\n\t<span><b>onsendstream</b><i>:function</i></span>\n\t\t<span class='info'>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p></span>\n\t<span><b>readyState</b><i>:int</i></span>\n\t\t<span class='info'>the readyState value</p></span>\n\t<span><b>responseData</b><i>:object</i></span>\n\t\t<span class='info'>the response data as a Blob object.</p></span>\n\t<span><b>responseText</b><i>:string</i></span>\n\t\t<span class='info'>the response as text or null if an error was received or no data was returned</p></span>\n\t<span><b>responseXML</b><i>:object</i></span>\n\t\t<span class='info'>the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed</p></span>\n\t<span><b>status</b><i>:int</i></span>\n\t\t<span class='info'>the response HTTP status code</p></span>\n\t<span><b>timeout</b><i>:int</i></span>\n\t\t<span class='info'>timeout is milliseconds when the connection should be aborted</p></span>\n\t<span><b>validatesSecureCertificate</b><i>:boolean</i></span>\n\t\t<span class='info'>set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Network.createHTTPClient","display":"(Method)\t\tTi.Network.createHTTPClient\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.Network.TCPSocket.html\">Titanium.Network.TCPSocket</a><p><code class=\"usage\"><b><u>(Method)Ti.Network.createTCPSocket</u></b><i>:object()</i><br>(\n{\n\t<span><b>hostName</b><i>:string</i></span>\n\t\t<span class='info'>the host name to connect to.  Must be INADDR_ANY or an identifier for the local device in order to listen</p></span>\n\t<span><b>mode</b><i>:int</i></span>\n\t\t<span class='info'>the socket's mode</p></span>\n\t<span><b>port</b><i>:int</i></span>\n\t\t<span class='info'>the port to connect/listen on</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Network.createTCPSocket","display":"(Method)\t\tTi.Network.createTCPSocket\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>decode a URI component part using URI encoding</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.decodeURIComponent</u></b><i>:string()</i><br>(\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>input value to be decoded</span>\n)\n</code>","insert":"(${1:'${0:value}'})","match":"Ti.Network.decodeURIComponent","display":"(Method)\t\tTi.Network.decodeURIComponent\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>encode a URI component part using URI encoding</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.encodeURIComponent</u></b><i>:string()</i><br>(\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>input value to be encoded</span>\n)\n</code>","insert":"(${1:'${0:value}'})","match":"Ti.Network.encodeURIComponent","display":"(Method)\t\tTi.Network.encodeURIComponent\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Network.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Network.fireEvent","display":"(Method)\t\tTi.Network.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>register for push notifications with the Apple Push Notification Service. Only available on iPhone.</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.registerForPushNotifications</u></b><i>:void()</i><br>(\n\t\t<span><b>config</b><i>:object</i></span>\n\t\t<span class='info'>dictionary of the following: types</tt> is an array of type constants that the application would like to receive, <tt>success</tt> is a callback function that is called when the push registration is successfully completed, <tt>error</tt> is a callback function that is called when an error is received during registration and <tt>callback</tt> is a callback function that is invoked upon receiving a new push notification. This method should be called at application startup.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Network.registerForPushNotifications","display":"(Method)\t\tTi.Network.registerForPushNotifications\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>removes a connectivity listener. This method has been deprecated in favor of listening for a <tt>change</tt> event.</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.removeConnectivityListener</u></b><i>:void()</i><br>(\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to remove</span>\n)\n</code>","insert":"(${1:function ${2:callback}(${3:}){${0:}\\}})","match":"Ti.Network.removeConnectivityListener","display":"(Method)\t\tTi.Network.removeConnectivityListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Network.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Network.removeEventListener","display":"(Method)\t\tTi.Network.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>constant value representing the ability for sockets to listen on any locally available network device</p>","insert":"$0","match":"Ti.Network.INADDR_ANY","display":"(Property)\tTi.Network.INADDR_ANY\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is LAN</p>","insert":"$0","match":"Ti.Network.NETWORK_LAN","display":"(Property)\tTi.Network.NETWORK_LAN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is MOBILE</p>","insert":"$0","match":"Ti.Network.NETWORK_MOBILE","display":"(Property)\tTi.Network.NETWORK_MOBILE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is not available</p>","insert":"$0","match":"Ti.Network.NETWORK_NONE","display":"(Property)\tTi.Network.NETWORK_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is not known</p>","insert":"$0","match":"Ti.Network.NETWORK_UNKNOWN","display":"(Property)\tTi.Network.NETWORK_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value to indicate that the network is WIFI</p>","insert":"$0","match":"Ti.Network.NETWORK_WIFI","display":"(Property)\tTi.Network.NETWORK_WIFI\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value for the push notification alert type</p>","insert":"$0","match":"Ti.Network.NOTIFICATION_TYPE_ALERT","display":"(Property)\tTi.Network.NOTIFICATION_TYPE_ALERT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value for the push notification badge type</p>","insert":"$0","match":"Ti.Network.NOTIFICATION_TYPE_BADGE","display":"(Property)\tTi.Network.NOTIFICATION_TYPE_BADGE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value for the push notification sound type</p>","insert":"$0","match":"Ti.Network.NOTIFICATION_TYPE_SOUND","display":"(Property)\tTi.Network.NOTIFICATION_TYPE_SOUND\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value specifying read-only mode for sockets</p>","insert":"$0","match":"Ti.Network.READ_MODE","display":"(Property)\tTi.Network.READ_MODE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value specifying read-write mode for sockets</p>","insert":"$0","match":"Ti.Network.READ_WRITE_MODE","display":"(Property)\tTi.Network.READ_WRITE_MODE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant value specifying write-only mode for sockets</p>","insert":"$0","match":"Ti.Network.WRITE_MODE","display":"(Property)\tTi.Network.WRITE_MODE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the network type value as a constant.</p>","insert":"$0","match":"Ti.Network.networkType","display":"(Property)\tTi.Network.networkType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the network type name constant. Returns one of <tt>NONE</tt>, <tt>WIFI</tt>, <tt>LAN</tt> or <tt>MOBILE</tt>.</p>","insert":"$0","match":"Ti.Network.networkTypeName","display":"(Property)\tTi.Network.networkTypeName\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly boolean value that indicates if the network is reachable to the Internet either via WIFI or Carrier network</p>","insert":"$0","match":"Ti.Network.online","display":"(Property)\tTi.Network.online\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the remote device UUID if the device was registered with the Apple Push Notification Service or null if not set. Only available on iPhone.</p>","insert":"$0","match":"Ti.Network.remoteDeviceUUID","display":"(Property)\tTi.Network.remoteDeviceUUID\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns an array of network type constants enabled for the application. Only available on iPhone.</p>","insert":"$0","match":"Ti.Network.remoteNotificationTypes","display":"(Property)\tTi.Network.remoteNotificationTypes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>returns true if remote notifications have been enabled. Only available on iPhone.</p>","insert":"$0","match":"Ti.Network.remoteNotificationsEnabled","display":"(Property)\tTi.Network.remoteNotificationsEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The BonjourBrowser instance returned from <a href=\"Titanium.Network.createBonjourBrowser.html\">Titanium.Network.createBonjourBrowser</a>.  This object is a browser for the discovery and retrieval of Bonjour services available on the network.<br>\n</p><hr /><p>If your application publishes Bonjour services itself, that service will be discovered by the browser if necessary; be prepared to perform a check if you do not want to list local services as available.  Bonjour service browsing is an asynchronous operation, meaning that you should be extremely careful when caching values from the 'services' property returned by the updatedServices event.  In particular, if you maintain a local copy of available services and a user tries to connect to one, you should be prepared to handle failures gracefully; the next updatedServices event should provide the new services list, but you should not rely on it being delivered before user input.  When a window which uses Bonjour browsing is closed, if you do not want to continue searching, you must call the stop() method.</p>","insert":"$0","match":"Titanium.Network.BonjourBrowser","display":"(Namespace)\tTitanium.Network.BonjourBrowser","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.BonjourBrowser.search","display":"(Method)\t\tTitanium.Network.BonjourBrowser.search\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.BonjourBrowser.stopSearch","display":"(Method)\t\tTitanium.Network.BonjourBrowser.stopSearch\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The domain the browser is searching in</p>","insert":"$0","match":"Titanium.Network.BonjourBrowser.domain","display":"(Property)\tTitanium.Network.BonjourBrowser.domain\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Whether or not the browser is currently searching</p>","insert":"$0","match":"Titanium.Network.BonjourBrowser.isSearching","display":"(Property)\tTitanium.Network.BonjourBrowser.isSearching\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The type of the service the browser searches for</p>","insert":"$0","match":"Titanium.Network.BonjourBrowser.serviceType","display":"(Property)\tTitanium.Network.BonjourBrowser.serviceType\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The BonjourBrowser instance returned from <a href=\"Titanium.Network.createBonjourBrowser.html\">Titanium.Network.createBonjourBrowser</a>.  This object is a browser for the discovery and retrieval of Bonjour services available on the network.<br>\n</p><hr /><p>If your application publishes Bonjour services itself, that service will be discovered by the browser if necessary; be prepared to perform a check if you do not want to list local services as available.  Bonjour service browsing is an asynchronous operation, meaning that you should be extremely careful when caching values from the 'services' property returned by the updatedServices event.  In particular, if you maintain a local copy of available services and a user tries to connect to one, you should be prepared to handle failures gracefully; the next updatedServices event should provide the new services list, but you should not rely on it being delivered before user input.  When a window which uses Bonjour browsing is closed, if you do not want to continue searching, you must call the stop() method.</p>","insert":"$0","match":"Ti.Network.BonjourBrowser","display":"(Namespace)\tTi.Network.BonjourBrowser","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.BonjourBrowser.search","display":"(Method)\t\tTi.Network.BonjourBrowser.search\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.BonjourBrowser.stopSearch","display":"(Method)\t\tTi.Network.BonjourBrowser.stopSearch\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The domain the browser is searching in</p>","insert":"$0","match":"Ti.Network.BonjourBrowser.domain","display":"(Property)\tTi.Network.BonjourBrowser.domain\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Whether or not the browser is currently searching</p>","insert":"$0","match":"Ti.Network.BonjourBrowser.isSearching","display":"(Property)\tTi.Network.BonjourBrowser.isSearching\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The type of the service the browser searches for</p>","insert":"$0","match":"Ti.Network.BonjourBrowser.serviceType","display":"(Property)\tTi.Network.BonjourBrowser.serviceType\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The BonjourService instance returned either from <a href=\"Titanium.Network.createBonjourService.html\">Titanium.Network.createBonjourService</a> or via the service list from a BonjourBrowser <tt>updatedServices</tt> event.  This object describes a service on the network which is published by Bonjour.</p><hr /><p>You can only publish Bonjour services attached to a socket which is currently listening; you cannot publish a service for a remotely connected socket.  If you stop the Bonjour service and wish to close the socket it uses, it is strongly recommended that you stop the service first.  When a window which publishes a Bonjour service is closed, you must stop the service if the associated socket is also to be closed, or if it is no longer necessary to publish.  Unlike other network operations, Bonjour service resolution and publishing is synchronous, so be aware that your code may block while resolution is going on.  In particular, you may wish to display UI elements indicating background activity before beginning resolution.</p>","insert":"$0","match":"Titanium.Network.BonjourService","display":"(Namespace)\tTitanium.Network.BonjourService","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.BonjourService.isLocal","display":"(Method)\t\tTitanium.Network.BonjourService.isLocal\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Publish a Bonjour service to the network.  Only works if isLocal is TRUE</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.BonjourService.publish</u></b><i>:void()</i><br>(\n\t\t<span><b>socket</b><i>:object</i></span>\n\t\t<span class='info'>a TCPSocket object to associate with the Bonjour service.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Network.BonjourService.publish","display":"(Method)\t\tTitanium.Network.BonjourService.publish\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.BonjourService.resolve</u></b><i>:void()</i><br>(\n\t\t<span><b>timeout</b><i>:double</i></span>\n\t\t<span class='info'>the timeout for service resolution, in seconds.  Optional, default is 120s.</span>\n)\n</code>","insert":"(${1:${2:timeout}})","match":"Titanium.Network.BonjourService.resolve","display":"(Method)\t\tTitanium.Network.BonjourService.resolve\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.BonjourService.stop","display":"(Method)\t\tTitanium.Network.BonjourService.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the domain of the service</p>","insert":"$0","match":"Titanium.Network.BonjourService.domain","display":"(Property)\tTitanium.Network.BonjourService.domain\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the name of the service</p>","insert":"$0","match":"Titanium.Network.BonjourService.name","display":"(Property)\tTitanium.Network.BonjourService.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the TCPSocket object that is used to connect to the service</p>","insert":"$0","match":"Titanium.Network.BonjourService.socket","display":"(Property)\tTitanium.Network.BonjourService.socket\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the type of the service</p>","insert":"$0","match":"Titanium.Network.BonjourService.type","display":"(Property)\tTitanium.Network.BonjourService.type\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The BonjourService instance returned either from <a href=\"Titanium.Network.createBonjourService.html\">Titanium.Network.createBonjourService</a> or via the service list from a BonjourBrowser <tt>updatedServices</tt> event.  This object describes a service on the network which is published by Bonjour.</p><hr /><p>You can only publish Bonjour services attached to a socket which is currently listening; you cannot publish a service for a remotely connected socket.  If you stop the Bonjour service and wish to close the socket it uses, it is strongly recommended that you stop the service first.  When a window which publishes a Bonjour service is closed, you must stop the service if the associated socket is also to be closed, or if it is no longer necessary to publish.  Unlike other network operations, Bonjour service resolution and publishing is synchronous, so be aware that your code may block while resolution is going on.  In particular, you may wish to display UI elements indicating background activity before beginning resolution.</p>","insert":"$0","match":"Ti.Network.BonjourService","display":"(Namespace)\tTi.Network.BonjourService","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.BonjourService.isLocal","display":"(Method)\t\tTi.Network.BonjourService.isLocal\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Publish a Bonjour service to the network.  Only works if isLocal is TRUE</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.BonjourService.publish</u></b><i>:void()</i><br>(\n\t\t<span><b>socket</b><i>:object</i></span>\n\t\t<span class='info'>a TCPSocket object to associate with the Bonjour service.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Network.BonjourService.publish","display":"(Method)\t\tTi.Network.BonjourService.publish\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.BonjourService.resolve</u></b><i>:void()</i><br>(\n\t\t<span><b>timeout</b><i>:double</i></span>\n\t\t<span class='info'>the timeout for service resolution, in seconds.  Optional, default is 120s.</span>\n)\n</code>","insert":"(${1:${2:timeout}})","match":"Ti.Network.BonjourService.resolve","display":"(Method)\t\tTi.Network.BonjourService.resolve\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.BonjourService.stop","display":"(Method)\t\tTi.Network.BonjourService.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the domain of the service</p>","insert":"$0","match":"Ti.Network.BonjourService.domain","display":"(Property)\tTi.Network.BonjourService.domain\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the name of the service</p>","insert":"$0","match":"Ti.Network.BonjourService.name","display":"(Property)\tTi.Network.BonjourService.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the TCPSocket object that is used to connect to the service</p>","insert":"$0","match":"Ti.Network.BonjourService.socket","display":"(Property)\tTi.Network.BonjourService.socket\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the type of the service</p>","insert":"$0","match":"Ti.Network.BonjourService.type","display":"(Property)\tTi.Network.BonjourService.type\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The HttpClient instance returned from <a href=\"Titanium.Network.createHTTPClient.html\">Titanium.Network.createHTTPClient</a>. This object (mostly) implements the XMLHttpRequest specification.</p><hr />","insert":"$0","match":"Titanium.Network.HTTPClient","display":"(Namespace)\tTitanium.Network.HTTPClient","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.HTTPClient.abort","display":"(Method)\t\tTitanium.Network.HTTPClient.abort\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return the response header.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.HTTPClient.getResponseHeader</u></b><i>:string()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the header name</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Titanium.Network.HTTPClient.getResponseHeader","display":"(Method)\t\tTitanium.Network.HTTPClient.getResponseHeader\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the request and ready the connection</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.HTTPClient.open</u></b><i>:void()</i><br>(\n\t\t<span><b>method</b><i>:string</i></span>\n\t\t<span class='info'>the HTTP method</span>\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the URL for the request</span>\n\t\t<span><b>async</b><i>:boolean</i></span>\n\t\t<span class='info'>optional property to indicate if asynchronous (default) or not</span>\n)\n</code>","insert":"(${1:'${2:method}', '${3:url}', ${4:async}})","match":"Titanium.Network.HTTPClient.open","display":"(Method)\t\tTitanium.Network.HTTPClient.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send the request</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.HTTPClient.send</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>the data to send in the request. can either be null, dictionary, string, File object or Blob.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.Network.HTTPClient.send","display":"(Method)\t\tTitanium.Network.HTTPClient.send\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the request header. Must be called after <tt>open</tt> but before <tt>send</tt>.</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.HTTPClient.setRequestHeader</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the header</span>\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value of the header</span>\n)\n</code>","insert":"(${1:'${2:name}', '${0:value}'})","match":"Titanium.Network.HTTPClient.setRequestHeader","display":"(Method)\t\tTitanium.Network.HTTPClient.setRequestHeader\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the request timeout</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.HTTPClient.setTimeout</u></b><i>:void()</i><br>(\n\t\t<span><b>timeout</b><i>:double</i></span>\n\t\t<span class='info'>the timeout in milliseconds</span>\n)\n</code>","insert":"(${1:${2:timeout}})","match":"Titanium.Network.HTTPClient.setTimeout","display":"(Method)\t\tTitanium.Network.HTTPClient.setTimeout\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the DONE readyState constant</p>","insert":"$0","match":"Titanium.Network.HTTPClient.DONE","display":"(Property)\tTitanium.Network.HTTPClient.DONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the HEADERS_RECEIVED readyState constant</p>","insert":"$0","match":"Titanium.Network.HTTPClient.HEADERS_RECEIVED","display":"(Property)\tTitanium.Network.HTTPClient.HEADERS_RECEIVED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the LOADING readyState constant</p>","insert":"$0","match":"Titanium.Network.HTTPClient.LOADING","display":"(Property)\tTitanium.Network.HTTPClient.LOADING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the OPENED readyState constant</p>","insert":"$0","match":"Titanium.Network.HTTPClient.OPENED","display":"(Property)\tTitanium.Network.HTTPClient.OPENED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the UNSET readyState constant</p>","insert":"$0","match":"Titanium.Network.HTTPClient.UNSENT","display":"(Property)\tTitanium.Network.HTTPClient.UNSENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate that the response was successful</p>","insert":"$0","match":"Titanium.Network.HTTPClient.connected","display":"(Property)\tTitanium.Network.HTTPClient.connected\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the connection type, normally either <tt>GET</tt> or <tt>POST</tt>.</p>","insert":"$0","match":"Titanium.Network.HTTPClient.connectionType","display":"(Property)\tTitanium.Network.HTTPClient.connectionType\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the absolute URL of the request</p>","insert":"$0","match":"Titanium.Network.HTTPClient.location","display":"(Property)\tTitanium.Network.HTTPClient.location\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p>","insert":"$0","match":"Titanium.Network.HTTPClient.ondatastream","display":"(Property)\tTitanium.Network.HTTPClient.ondatastream\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called upon a error response</p>","insert":"$0","match":"Titanium.Network.HTTPClient.onerror","display":"(Property)\tTitanium.Network.HTTPClient.onerror\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called upon a successful response</p>","insert":"$0","match":"Titanium.Network.HTTPClient.onload","display":"(Property)\tTitanium.Network.HTTPClient.onload\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called for each readyState change</p>","insert":"$0","match":"Titanium.Network.HTTPClient.onreadystatechange","display":"(Property)\tTitanium.Network.HTTPClient.onreadystatechange\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p>","insert":"$0","match":"Titanium.Network.HTTPClient.onsendstream","display":"(Property)\tTitanium.Network.HTTPClient.onsendstream\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the readyState value</p>","insert":"$0","match":"Titanium.Network.HTTPClient.readyState","display":"(Property)\tTitanium.Network.HTTPClient.readyState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response data as a Blob object.</p>","insert":"$0","match":"Titanium.Network.HTTPClient.responseData","display":"(Property)\tTitanium.Network.HTTPClient.responseData\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response as text or null if an error was received or no data was returned</p>","insert":"$0","match":"Titanium.Network.HTTPClient.responseText","display":"(Property)\tTitanium.Network.HTTPClient.responseText\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed</p>","insert":"$0","match":"Titanium.Network.HTTPClient.responseXML","display":"(Property)\tTitanium.Network.HTTPClient.responseXML\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response HTTP status code</p>","insert":"$0","match":"Titanium.Network.HTTPClient.status","display":"(Property)\tTitanium.Network.HTTPClient.status\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>timeout is milliseconds when the connection should be aborted</p>","insert":"$0","match":"Titanium.Network.HTTPClient.timeout","display":"(Property)\tTitanium.Network.HTTPClient.timeout\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.</p>","insert":"$0","match":"Titanium.Network.HTTPClient.validatesSecureCertificate","display":"(Property)\tTitanium.Network.HTTPClient.validatesSecureCertificate\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The HttpClient instance returned from <a href=\"Titanium.Network.createHTTPClient.html\">Titanium.Network.createHTTPClient</a>. This object (mostly) implements the XMLHttpRequest specification.</p><hr />","insert":"$0","match":"Ti.Network.HTTPClient","display":"(Namespace)\tTi.Network.HTTPClient","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.HTTPClient.abort","display":"(Method)\t\tTi.Network.HTTPClient.abort\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return the response header.</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.HTTPClient.getResponseHeader</u></b><i>:string()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>the header name</span>\n)\n</code>","insert":"(${1:'${0:name}'})","match":"Ti.Network.HTTPClient.getResponseHeader","display":"(Method)\t\tTi.Network.HTTPClient.getResponseHeader\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the request and ready the connection</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.HTTPClient.open</u></b><i>:void()</i><br>(\n\t\t<span><b>method</b><i>:string</i></span>\n\t\t<span class='info'>the HTTP method</span>\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the URL for the request</span>\n\t\t<span><b>async</b><i>:boolean</i></span>\n\t\t<span class='info'>optional property to indicate if asynchronous (default) or not</span>\n)\n</code>","insert":"(${1:'${2:method}', '${3:url}', ${4:async}})","match":"Ti.Network.HTTPClient.open","display":"(Method)\t\tTi.Network.HTTPClient.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>send the request</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.HTTPClient.send</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>the data to send in the request. can either be null, dictionary, string, File object or Blob.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.Network.HTTPClient.send","display":"(Method)\t\tTi.Network.HTTPClient.send\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the request header. Must be called after <tt>open</tt> but before <tt>send</tt>.</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.HTTPClient.setRequestHeader</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the header</span>\n\t\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value of the header</span>\n)\n</code>","insert":"(${1:'${2:name}', '${0:value}'})","match":"Ti.Network.HTTPClient.setRequestHeader","display":"(Method)\t\tTi.Network.HTTPClient.setRequestHeader\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the request timeout</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.HTTPClient.setTimeout</u></b><i>:void()</i><br>(\n\t\t<span><b>timeout</b><i>:double</i></span>\n\t\t<span class='info'>the timeout in milliseconds</span>\n)\n</code>","insert":"(${1:${2:timeout}})","match":"Ti.Network.HTTPClient.setTimeout","display":"(Method)\t\tTi.Network.HTTPClient.setTimeout\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the DONE readyState constant</p>","insert":"$0","match":"Ti.Network.HTTPClient.DONE","display":"(Property)\tTi.Network.HTTPClient.DONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the HEADERS_RECEIVED readyState constant</p>","insert":"$0","match":"Ti.Network.HTTPClient.HEADERS_RECEIVED","display":"(Property)\tTi.Network.HTTPClient.HEADERS_RECEIVED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the LOADING readyState constant</p>","insert":"$0","match":"Ti.Network.HTTPClient.LOADING","display":"(Property)\tTi.Network.HTTPClient.LOADING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the OPENED readyState constant</p>","insert":"$0","match":"Ti.Network.HTTPClient.OPENED","display":"(Property)\tTi.Network.HTTPClient.OPENED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the UNSET readyState constant</p>","insert":"$0","match":"Ti.Network.HTTPClient.UNSENT","display":"(Property)\tTi.Network.HTTPClient.UNSENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate that the response was successful</p>","insert":"$0","match":"Ti.Network.HTTPClient.connected","display":"(Property)\tTi.Network.HTTPClient.connected\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the connection type, normally either <tt>GET</tt> or <tt>POST</tt>.</p>","insert":"$0","match":"Ti.Network.HTTPClient.connectionType","display":"(Property)\tTi.Network.HTTPClient.connectionType\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the absolute URL of the request</p>","insert":"$0","match":"Ti.Network.HTTPClient.location","display":"(Property)\tTi.Network.HTTPClient.location\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p>","insert":"$0","match":"Ti.Network.HTTPClient.ondatastream","display":"(Property)\tTi.Network.HTTPClient.ondatastream\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called upon a error response</p>","insert":"$0","match":"Ti.Network.HTTPClient.onerror","display":"(Property)\tTi.Network.HTTPClient.onerror\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called upon a successful response</p>","insert":"$0","match":"Ti.Network.HTTPClient.onload","display":"(Property)\tTi.Network.HTTPClient.onload\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called for each readyState change</p>","insert":"$0","match":"Ti.Network.HTTPClient.onreadystatechange","display":"(Property)\tTi.Network.HTTPClient.onreadystatechange\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the <tt>progress</tt> property of the event will contain a value from 0.0-1.0 with the progress.</p>","insert":"$0","match":"Ti.Network.HTTPClient.onsendstream","display":"(Property)\tTi.Network.HTTPClient.onsendstream\t:function","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the readyState value</p>","insert":"$0","match":"Ti.Network.HTTPClient.readyState","display":"(Property)\tTi.Network.HTTPClient.readyState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response data as a Blob object.</p>","insert":"$0","match":"Ti.Network.HTTPClient.responseData","display":"(Property)\tTi.Network.HTTPClient.responseData\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response as text or null if an error was received or no data was returned</p>","insert":"$0","match":"Ti.Network.HTTPClient.responseText","display":"(Property)\tTi.Network.HTTPClient.responseText\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed</p>","insert":"$0","match":"Ti.Network.HTTPClient.responseXML","display":"(Property)\tTi.Network.HTTPClient.responseXML\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the response HTTP status code</p>","insert":"$0","match":"Ti.Network.HTTPClient.status","display":"(Property)\tTi.Network.HTTPClient.status\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>timeout is milliseconds when the connection should be aborted</p>","insert":"$0","match":"Ti.Network.HTTPClient.timeout","display":"(Property)\tTi.Network.HTTPClient.timeout\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.</p>","insert":"$0","match":"Ti.Network.HTTPClient.validatesSecureCertificate","display":"(Property)\tTi.Network.HTTPClient.validatesSecureCertificate\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The TCPSocket instance returned from <a href=\"Titanium.Network.createTCPSocket.html\">Titanium.Network.createTCPSocket</a>.  This object represents a socket which either listens locally on the device for connections, or connects to a remote machine.</p><hr /><p>Sockets are nontrivial; it is recommended that anyone using them be familiar with the basics of BSD sockets.  All sockets use TCP connections, and are asynchronous for read operations, so your program should be ready to receive 'read' events at any point.  Socket references cannot be transferred to socket objects, and vice-versa - socket references are an internal mechanism which is used only to determine which sockets to send data to and read data from.  For listening sockets, it is highly recommended that you use the <a href=\"Titanium.Network.INADDR_ANY-property.html\">Titanium.Network.INADDR_ANY</a> constant as the host name.  If a window containing a socket is closed, the socket MUST be closed also unless you intend to continue to receive data, otherwise the socket will consume resources (and potentially cause conflicts with opening the window again, if a listener) until the program is restarted.  Be aware of the differences between the listen() and connect() functions; attempting to use one when you mean the other may result in errors, unpredictable behavior, or both.</p>","insert":"$0","match":"Titanium.Network.TCPSocket","display":"(Namespace)\tTitanium.Network.TCPSocket","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.TCPSocket.close","display":"(Method)\t\tTitanium.Network.TCPSocket.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.TCPSocket.connect","display":"(Method)\t\tTitanium.Network.TCPSocket.connect\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.TCPSocket.isValid","display":"(Method)\t\tTitanium.Network.TCPSocket.isValid\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Network.TCPSocket.listen","display":"(Method)\t\tTitanium.Network.TCPSocket.listen\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE</p><p><code class=\"usage\"><b><u>(Method)Titanium.Network.TCPSocket.write</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:object,string</i></span>\n\t\t<span class='info'>either a string or blob object representing the data to be transferred</span>\n\t\t<span><b>sendTo</b><i>:int</i></span>\n\t\t<span class='info'>the socket reference to send the data to.  Default is to send to all connected sockets</span>\n)\n</code>","insert":"(${1:${2:data}, ${3:sendTo}})","match":"Titanium.Network.TCPSocket.write","display":"(Method)\t\tTitanium.Network.TCPSocket.write\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the host name to connect to.  Must be INADDR_ANY or an identifier for the local device in order to listen</p>","insert":"$0","match":"Titanium.Network.TCPSocket.hostName","display":"(Property)\tTitanium.Network.TCPSocket.hostName\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the socket's mode</p>","insert":"$0","match":"Titanium.Network.TCPSocket.mode","display":"(Property)\tTitanium.Network.TCPSocket.mode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the port to connect/listen on</p>","insert":"$0","match":"Titanium.Network.TCPSocket.port","display":"(Property)\tTitanium.Network.TCPSocket.port\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The TCPSocket instance returned from <a href=\"Titanium.Network.createTCPSocket.html\">Titanium.Network.createTCPSocket</a>.  This object represents a socket which either listens locally on the device for connections, or connects to a remote machine.</p><hr /><p>Sockets are nontrivial; it is recommended that anyone using them be familiar with the basics of BSD sockets.  All sockets use TCP connections, and are asynchronous for read operations, so your program should be ready to receive 'read' events at any point.  Socket references cannot be transferred to socket objects, and vice-versa - socket references are an internal mechanism which is used only to determine which sockets to send data to and read data from.  For listening sockets, it is highly recommended that you use the <a href=\"Titanium.Network.INADDR_ANY-property.html\">Titanium.Network.INADDR_ANY</a> constant as the host name.  If a window containing a socket is closed, the socket MUST be closed also unless you intend to continue to receive data, otherwise the socket will consume resources (and potentially cause conflicts with opening the window again, if a listener) until the program is restarted.  Be aware of the differences between the listen() and connect() functions; attempting to use one when you mean the other may result in errors, unpredictable behavior, or both.</p>","insert":"$0","match":"Ti.Network.TCPSocket","display":"(Namespace)\tTi.Network.TCPSocket","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.TCPSocket.close","display":"(Method)\t\tTi.Network.TCPSocket.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.TCPSocket.connect","display":"(Method)\t\tTi.Network.TCPSocket.connect\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.TCPSocket.isValid","display":"(Method)\t\tTi.Network.TCPSocket.isValid\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Network.TCPSocket.listen","display":"(Method)\t\tTi.Network.TCPSocket.listen\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE</p><p><code class=\"usage\"><b><u>(Method)Ti.Network.TCPSocket.write</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:object,string</i></span>\n\t\t<span class='info'>either a string or blob object representing the data to be transferred</span>\n\t\t<span><b>sendTo</b><i>:int</i></span>\n\t\t<span class='info'>the socket reference to send the data to.  Default is to send to all connected sockets</span>\n)\n</code>","insert":"(${1:${2:data}, ${3:sendTo}})","match":"Ti.Network.TCPSocket.write","display":"(Method)\t\tTi.Network.TCPSocket.write\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the host name to connect to.  Must be INADDR_ANY or an identifier for the local device in order to listen</p>","insert":"$0","match":"Ti.Network.TCPSocket.hostName","display":"(Property)\tTi.Network.TCPSocket.hostName\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the socket's mode</p>","insert":"$0","match":"Ti.Network.TCPSocket.mode","display":"(Property)\tTi.Network.TCPSocket.mode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the port to connect/listen on</p>","insert":"$0","match":"Ti.Network.TCPSocket.port","display":"(Property)\tTi.Network.TCPSocket.port\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Platform module.  The Platform module is used accessing the device's platform\nrelated functionality.</p><hr />","insert":"$0","match":"Titanium.Platform","display":"(Namespace)\tTitanium.Platform","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Platform.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Platform.addEventListener","display":"(Method)\t\tTitanium.Platform.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.Platform.createUUID","display":"(Method)\t\tTitanium.Platform.createUUID\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Platform.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Platform.fireEvent","display":"(Method)\t\tTitanium.Platform.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open a URL in the system default manner</p><p><code class=\"usage\"><b><u>(Method)Titanium.Platform.openURL</u></b><i>:void()</i><br>(\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the url to open</span>\n)\n</code>","insert":"(${1:'${0:url}'})","match":"Titanium.Platform.openURL","display":"(Method)\t\tTitanium.Platform.openURL\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Platform.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Platform.removeEventListener","display":"(Method)\t\tTitanium.Platform.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the device is plugged in and currently being charged</p>","insert":"$0","match":"Titanium.Platform.BATTERY_STATE_CHARGING","display":"(Property)\tTitanium.Platform.BATTERY_STATE_CHARGING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the battery is fully charged</p>","insert":"$0","match":"Titanium.Platform.BATTERY_STATE_FULL","display":"(Property)\tTitanium.Platform.BATTERY_STATE_FULL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the battery state is unknown or not monitoring is not enabled</p>","insert":"$0","match":"Titanium.Platform.BATTERY_STATE_UNKNOWN","display":"(Property)\tTitanium.Platform.BATTERY_STATE_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the device is unplugged</p>","insert":"$0","match":"Titanium.Platform.BATTERY_STATE_UNPLUGGED","display":"(Property)\tTitanium.Platform.BATTERY_STATE_UNPLUGGED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the ip address that the device reports (only applicable on WIFI network)</p>","insert":"$0","match":"Titanium.Platform.address","display":"(Property)\tTitanium.Platform.address\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the processor architecture that the device reports</p>","insert":"$0","match":"Titanium.Platform.architecture","display":"(Property)\tTitanium.Platform.architecture\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the amount of memory available on the device in bytes</p>","insert":"$0","match":"Titanium.Platform.availableMemory","display":"(Property)\tTitanium.Platform.availableMemory\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current device battery level. this property is only accessible if <tt>batteryMonitoring</tt> is enabled. on iPhone, this level only changes at 5% intervals.</p>","insert":"$0","match":"Titanium.Platform.batteryLevel","display":"(Property)\tTitanium.Platform.batteryLevel\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if battery monitoring is enabled</p>","insert":"$0","match":"Titanium.Platform.batteryMonitoring","display":"(Property)\tTitanium.Platform.batteryMonitoring\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant that represents the state of the battery. this property is only accessible if <tt>batteryMonitoring</tt> is enabled</p>","insert":"$0","match":"Titanium.Platform.batteryState","display":"(Property)\tTitanium.Platform.batteryState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the DisplayCaps object for platform</p>","insert":"$0","match":"Titanium.Platform.displayCaps","display":"(Property)\tTitanium.Platform.displayCaps\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the unique id of the device</p>","insert":"$0","match":"Titanium.Platform.id","display":"(Property)\tTitanium.Platform.id\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the primary language of the device that the user has enabled</p>","insert":"$0","match":"Titanium.Platform.locale","display":"(Property)\tTitanium.Platform.locale\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>this property will return a unique identifier for the device</p>","insert":"$0","match":"Titanium.Platform.macaddress","display":"(Property)\tTitanium.Platform.macaddress\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the model of the phone that the device reports</p>","insert":"$0","match":"Titanium.Platform.model","display":"(Property)\tTitanium.Platform.model\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the name of the platform returned by the device</p>","insert":"$0","match":"Titanium.Platform.name","display":"(Property)\tTitanium.Platform.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the network mask that the device reports (only applicable on WIFI network)</p>","insert":"$0","match":"Titanium.Platform.netmask","display":"(Property)\tTitanium.Platform.netmask\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the shortname of the operating system. for example, on an iPhone, will return <tt>iphone</tt>, iPad will return <tt>ipad</tt> and Android will return <tt>android</tt>.</p>","insert":"$0","match":"Titanium.Platform.osname","display":"(Property)\tTitanium.Platform.osname\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the OS architecture, such as 32 bit</p>","insert":"$0","match":"Titanium.Platform.ostype","display":"(Property)\tTitanium.Platform.ostype\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of processors the device reports</p>","insert":"$0","match":"Titanium.Platform.processorCount","display":"(Property)\tTitanium.Platform.processorCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the username of the device, if set</p>","insert":"$0","match":"Titanium.Platform.username","display":"(Property)\tTitanium.Platform.username\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the version of the platform returned by the device</p>","insert":"$0","match":"Titanium.Platform.version","display":"(Property)\tTitanium.Platform.version\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Platform module.  The Platform module is used accessing the device's platform\nrelated functionality.</p><hr />","insert":"$0","match":"Ti.Platform","display":"(Namespace)\tTi.Platform","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Platform.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Platform.addEventListener","display":"(Method)\t\tTi.Platform.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.Platform.createUUID","display":"(Method)\t\tTi.Platform.createUUID\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Platform.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Platform.fireEvent","display":"(Method)\t\tTi.Platform.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open a URL in the system default manner</p><p><code class=\"usage\"><b><u>(Method)Ti.Platform.openURL</u></b><i>:void()</i><br>(\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the url to open</span>\n)\n</code>","insert":"(${1:'${0:url}'})","match":"Ti.Platform.openURL","display":"(Method)\t\tTi.Platform.openURL\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Platform.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Platform.removeEventListener","display":"(Method)\t\tTi.Platform.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the device is plugged in and currently being charged</p>","insert":"$0","match":"Ti.Platform.BATTERY_STATE_CHARGING","display":"(Property)\tTi.Platform.BATTERY_STATE_CHARGING\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the battery is fully charged</p>","insert":"$0","match":"Ti.Platform.BATTERY_STATE_FULL","display":"(Property)\tTi.Platform.BATTERY_STATE_FULL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the battery state is unknown or not monitoring is not enabled</p>","insert":"$0","match":"Ti.Platform.BATTERY_STATE_UNKNOWN","display":"(Property)\tTi.Platform.BATTERY_STATE_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the device is unplugged</p>","insert":"$0","match":"Ti.Platform.BATTERY_STATE_UNPLUGGED","display":"(Property)\tTi.Platform.BATTERY_STATE_UNPLUGGED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the ip address that the device reports (only applicable on WIFI network)</p>","insert":"$0","match":"Ti.Platform.address","display":"(Property)\tTi.Platform.address\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the processor architecture that the device reports</p>","insert":"$0","match":"Ti.Platform.architecture","display":"(Property)\tTi.Platform.architecture\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the amount of memory available on the device in bytes</p>","insert":"$0","match":"Ti.Platform.availableMemory","display":"(Property)\tTi.Platform.availableMemory\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current device battery level. this property is only accessible if <tt>batteryMonitoring</tt> is enabled. on iPhone, this level only changes at 5% intervals.</p>","insert":"$0","match":"Ti.Platform.batteryLevel","display":"(Property)\tTi.Platform.batteryLevel\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if battery monitoring is enabled</p>","insert":"$0","match":"Ti.Platform.batteryMonitoring","display":"(Property)\tTi.Platform.batteryMonitoring\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant that represents the state of the battery. this property is only accessible if <tt>batteryMonitoring</tt> is enabled</p>","insert":"$0","match":"Ti.Platform.batteryState","display":"(Property)\tTi.Platform.batteryState\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the DisplayCaps object for platform</p>","insert":"$0","match":"Ti.Platform.displayCaps","display":"(Property)\tTi.Platform.displayCaps\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the unique id of the device</p>","insert":"$0","match":"Ti.Platform.id","display":"(Property)\tTi.Platform.id\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the primary language of the device that the user has enabled</p>","insert":"$0","match":"Ti.Platform.locale","display":"(Property)\tTi.Platform.locale\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>this property will return a unique identifier for the device</p>","insert":"$0","match":"Ti.Platform.macaddress","display":"(Property)\tTi.Platform.macaddress\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the model of the phone that the device reports</p>","insert":"$0","match":"Ti.Platform.model","display":"(Property)\tTi.Platform.model\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the name of the platform returned by the device</p>","insert":"$0","match":"Ti.Platform.name","display":"(Property)\tTi.Platform.name\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the network mask that the device reports (only applicable on WIFI network)</p>","insert":"$0","match":"Ti.Platform.netmask","display":"(Property)\tTi.Platform.netmask\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the shortname of the operating system. for example, on an iPhone, will return <tt>iphone</tt>, iPad will return <tt>ipad</tt> and Android will return <tt>android</tt>.</p>","insert":"$0","match":"Ti.Platform.osname","display":"(Property)\tTi.Platform.osname\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the OS architecture, such as 32 bit</p>","insert":"$0","match":"Ti.Platform.ostype","display":"(Property)\tTi.Platform.ostype\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of processors the device reports</p>","insert":"$0","match":"Ti.Platform.processorCount","display":"(Property)\tTi.Platform.processorCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the username of the device, if set</p>","insert":"$0","match":"Ti.Platform.username","display":"(Property)\tTi.Platform.username\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the version of the platform returned by the device</p>","insert":"$0","match":"Ti.Platform.version","display":"(Property)\tTi.Platform.version\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Display Caps object returned by the <a href=\"Titanium.Platform.displayCaps.html\">Titanium.Platform.displayCaps</a> property.</p><hr /><p>On iPhone, the <tt>density</tt> property will return <tt>low</tt> and the <tt>dpi</tt> property will return <tt>160</tt>. For iPad, the <tt>density</tt> property will return <tt>high</tt> and the <tt>dpi</tt> property will return <tt>130</tt>.  For Android, these values are device specific.</p>","insert":"$0","match":"Titanium.Platform.DisplayCaps","display":"(Namespace)\tTitanium.Platform.DisplayCaps","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>returns the density property of the display device.</p>","insert":"$0","match":"Titanium.Platform.DisplayCaps.density","display":"(Property)\tTitanium.Platform.DisplayCaps.density\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the DPI of the display device.</p>","insert":"$0","match":"Titanium.Platform.DisplayCaps.dpi","display":"(Property)\tTitanium.Platform.DisplayCaps.dpi\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the device screen</p>","insert":"$0","match":"Titanium.Platform.DisplayCaps.platformHeight","display":"(Property)\tTitanium.Platform.DisplayCaps.platformHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the width of the device screen</p>","insert":"$0","match":"Titanium.Platform.DisplayCaps.platformWidth","display":"(Property)\tTitanium.Platform.DisplayCaps.platformWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Display Caps object returned by the <a href=\"Titanium.Platform.displayCaps.html\">Titanium.Platform.displayCaps</a> property.</p><hr /><p>On iPhone, the <tt>density</tt> property will return <tt>low</tt> and the <tt>dpi</tt> property will return <tt>160</tt>. For iPad, the <tt>density</tt> property will return <tt>high</tt> and the <tt>dpi</tt> property will return <tt>130</tt>.  For Android, these values are device specific.</p>","insert":"$0","match":"Ti.Platform.DisplayCaps","display":"(Namespace)\tTi.Platform.DisplayCaps","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>returns the density property of the display device.</p>","insert":"$0","match":"Ti.Platform.DisplayCaps.density","display":"(Property)\tTi.Platform.DisplayCaps.density\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the DPI of the display device.</p>","insert":"$0","match":"Ti.Platform.DisplayCaps.dpi","display":"(Property)\tTi.Platform.DisplayCaps.dpi\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the device screen</p>","insert":"$0","match":"Ti.Platform.DisplayCaps.platformHeight","display":"(Property)\tTi.Platform.DisplayCaps.platformHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the width of the device screen</p>","insert":"$0","match":"Ti.Platform.DisplayCaps.platformWidth","display":"(Property)\tTi.Platform.DisplayCaps.platformWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The main <a href=\"Titanium.UI-module.html\">Titanium.UI</a> module.  The UI module is responsible for native user-interface components and interaction inside Titanium.  The goal of the UI module is to provide a native experience along with native performance by compiling Javascript code into their native counterparts as part of the build process. </p><hr /><h3 id=\"design\">Design</h3>\n<p>The UI module is broken down into 3 major area:</p>\n<ul>\n<li><strong>Views</strong> - <a href=\"Titanium.UI.View\">Views</a> are containers that host visual elements such as controls or other views.  Views can have their properties customized, such as their border color and radius, can fire events such as swipe events or touches, and can optionally contain a hierarchy or other views as children. In Titanium, most views are specialized to perform both a visual function and set of interaction behaviors such as <a href=\"Titanium.UI.TableView\">Table View</a> or <a href=\"Titanium.UI.CoverFlowView\">Coverflow View</a>.  Views are always named with the suffix <tt>View</tt>.</li>\n<li><strong>Controls</strong> - controls, or sometimes referred as widgets, are visual elements such as <a href=\"Titanium.UI.Slider\">sliders</a>, <a href=\"Titanium.UI.Button\">buttons</a> and <a href=\"Titanium.UI.Switch\">switches</a>. They provide a visual element which has a defined behavior and typical have special configuration and special events.  Controls themselves are views and also inherit a views properties, functions and events.</li>\n<li><strong>Windows</strong> - <a href=\"Titanium.UI.Window\">Windows</a> are typically top-level visual constructs that are the main part of your interface. An application will always have at least one window and windows can take different shapes and sizes, can have display and interaction properties such as fullscreen or modal and can be customized, such as changing their opacity or background color. Windows themselves are views and also inherit a views properties, functions and events. There are a few specialization of Windows such as a <a href=\"Titanium.UI.TabGroup\">Tab Group</a> which offer additional behavior beyond the basic Window.</li>\n</ul>\n<p>Titanium uses the <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\">Factory Pattern</a> for constructing objects and a general naming pattern for APIs.  For example, to construct a <a href=\"Titanium.UI.AlertDialog\">Alert Dialog</a>, you call the method <a href=\"Titanium.UI.createAlertDialog.html\">Titanium.UI.createAlertDialog</a>.  To create a <a href=\"Titanium.UI.TextArea\">TextArea</a>, you call the method <a href=\"Titanium.UI.createTextArea.html\">Titanium.UI.createTextArea</a>.  Once an object is created, it will be available until it goes out of scope.</p>\n<h3 id=\"optimizations\">Optimizations</h3>\n<p>UI objects are optimized by Titanium to not be realized into the drawing context and placed into the device UI surface until needed.  That means that you can create UI objects, set their properties and add them to their hierarchy without much worry about memory or performance.  When the native drawing surface needs to render a specific view or control, Titanium will automatically create the view as needed.  Additionally, Titanium is optimized to also release memory once the view is no longer needed, on screen or in low memory situations.  However, it's a good idea to help Titanium along in certain cases where you are no longer using objects.  For example, you should call <tt>close</tt> on a <a href=\"Titanium.UI.Window\">Window</a> instance when you are no longer using it.  You can safely call <tt>open</tt> on the <a href=\"Titanium.UI.Window\">Window</a> again to re-open it.<br>\n</p>\n<h3 id=\"global_context_and_threading\">Global Context and Threading</h3>\n<p>Be careful with the objects that are created in <tt>app.js</tt> but only used once.  Since the <tt>app.js</tt> context is global and generally is not garbage collected until the application exits, you should think about the design of your application as it relates to this fact.  <a href=\"Titanium.UI.Window\">Window</a> objects that are opened up with the <tt>url</tt> property to another Javascript file contain a nice way to decompose your application into smaller units.  The other benefit is that when a <a href=\"Titanium.UI.Window\">Window</a> is closed, its resources can be immediately cleaned up, saving resources such as memory and CPU.  Additionally, <a href=\"Titanium.UI.Window\">Window</a> objects run in a separate Javascript context and Thread. While all UI processing is done on the main UI thread, other processing inside a Window or the <tt>app.js</tt> that does not have UI interaction will run in its own thread.</p>\n<h3 id=\"portability\">Portability</h3>\n<p>Titanium components are designed to be portable across as many platforms as it supports.  However, there are cases where a device either does not support a specific feature or capability or where it support additional functionality.  For cases where the device OS supports capabilities that other platforms do not, we attempt to place those capabilities in a separate namespace, such as <a href=\"Titanium.UI.iPhone\">Titanium.UI.iPhone</a>. However, in cases where the control is in a common namespace and support additional features, we continue to place that functionality directly on the object.</p>","insert":"$0","match":"Titanium.UI","display":"(Namespace)\tTitanium.UI","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.addEventListener","display":"(Method)\t\tTitanium.UI.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.2DMatrix.html\">Titanium.UI.2DMatrix</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.create2DMatrix</u></b><i>:object()</i><br>(\n{\n\t<span><b>a</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,1] in the matrix.</p></span>\n\t<span><b>b</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,2] in the matrix.</p></span>\n\t<span><b>c</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,1] in the matrix.</p></span>\n\t<span><b>d</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,2] in the matrix.</p></span>\n\t<span><b>tx</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,1] in the matrix.</p></span>\n\t<span><b>ty</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,2] in the matrix.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.create2DMatrix","display":"(Method)\t\tTitanium.UI.create2DMatrix\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.3DMatrix.html\">Titanium.UI.3DMatrix</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.create3DMatrix</u></b><i>:object()</i><br>(\n{\n\t<span><b>m11</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,1] in the matrix.</p></span>\n\t<span><b>m12</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,2] in the matrix.</p></span>\n\t<span><b>m13</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,3] in the matrix.</p></span>\n\t<span><b>m14</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,4] in the matrix.</p></span>\n\t<span><b>m21</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,1] in the matrix.</p></span>\n\t<span><b>m22</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,2] in the matrix.</p></span>\n\t<span><b>m23</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,3] in the matrix.</p></span>\n\t<span><b>m24</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,4] in the matrix.</p></span>\n\t<span><b>m31</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,1] in the matrix.</p></span>\n\t<span><b>m32</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,2] in the matrix.</p></span>\n\t<span><b>m33</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,3] in the matrix.</p></span>\n\t<span><b>m34</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,4] in the matrix.</p></span>\n\t<span><b>m41</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,1] in the matrix.</p></span>\n\t<span><b>m42</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,2] in the matrix.</p></span>\n\t<span><b>m43</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,3] in the matrix.</p></span>\n\t<span><b>m44</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,4] in the matrix.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.create3DMatrix","display":"(Method)\t\tTitanium.UI.create3DMatrix\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ActivityIndicator.html\">Titanium.UI.ActivityIndicator</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createActivityIndicator</u></b><i>:object()</i><br>(\n{\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the color of the message label</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the font object for the activity message label</p></span>\n\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the activity message label text</p></span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style constant of the activity indicator</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createActivityIndicator","display":"(Method)\t\tTitanium.UI.createActivityIndicator\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.AlertDialog.html\">Titanium.UI.AlertDialog</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createAlertDialog</u></b><i>:object()</i><br>(\n{\n\t<span><b>buttonNames</b><i>:array</i></span>\n\t\t<span class='info'>array of button names as strings</p></span>\n\t<span><b>cancel</b><i>:int</i></span>\n\t\t<span class='info'>an index to indicate which button should be the cancel button.</p></span>\n\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message of the dialog</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the dialog</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createAlertDialog","display":"(Method)\t\tTitanium.UI.createAlertDialog\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Animation.html\">Titanium.UI.Animation</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createAnimation</u></b><i>:object()</i><br>(\n{\n\t<span><b>autoreverse</b><i>:boolean</i></span>\n\t\t<span class='info'>the property specifies if the animation should be replayed in reverse upon completion</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>value of the backgroundColor property to change during animation</p></span>\n\t<span><b>bottom</b><i>:float</i></span>\n\t\t<span class='info'>value of the bottom property to change during animation</p></span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>value of the center property to change during animation</p></span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>value of the color property to change during animation</p></span>\n\t<span><b>curve</b><i>:int</i></span>\n\t\t<span class='info'>the curve of the animation</p></span>\n\t<span><b>delay</b><i>:float</i></span>\n\t\t<span class='info'>the duration of time in milliseconds before starting the animation</p></span>\n\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>the duration of time in milliseconds to perform the animation</p></span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>value of the height property to change during animation</p></span>\n\t<span><b>left</b><i>:float</i></span>\n\t\t<span class='info'>value of the left property to change during animation</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>value of the opacity property to change during animation</p></span>\n\t<span><b>opaque</b><i>:boolean</i></span>\n\t\t<span class='info'>value of the opaque property to change during animation</p></span>\n\t<span><b>repeat</b><i>:int</i></span>\n\t\t<span class='info'>the number of times the animation should be performed</p></span>\n\t<span><b>right</b><i>:float</i></span>\n\t\t<span class='info'>value of the right property to change during animation</p></span>\n\t<span><b>top</b><i>:float</i></span>\n\t\t<span class='info'>value of the top property to change during animation</p></span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>value of the transform property to change during animation</p></span>\n\t<span><b>transition</b><i>:int</i></span>\n\t\t<span class='info'>during a transition animation, this is the constant to the type of transition to use</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>value of the visible property to change during animation</p></span>\n\t<span><b>width</b><i>:float</i></span>\n\t\t<span class='info'>value of the width property to change during animation</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>value of the zIndex property to change during animation</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createAnimation","display":"(Method)\t\tTitanium.UI.createAnimation\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Button.html\">Titanium.UI.Button</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createButton</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the buttons background color</p></span>\n\t<span><b>backgroundDisabledImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a button image that is drawn as the background of the button when the button is in the disabled state</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a button image that is drawn as the background of the button</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundSelectedImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a button image that is drawn as the background of the button when the button is in the selected state</p></span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the foreground color of the button text</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean that indicates if the button is enabled or not</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the font properties of the button</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>image</b><i>:string</i></span>\n\t\t<span class='info'>the image to display on the button to the left of the title</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>selectedColor</b><i>:string</i></span>\n\t\t<span class='info'>the selected color of the button text when the button is in the selected state</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>style constant for the type of button</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>button title</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createButton","display":"(Method)\t\tTitanium.UI.createButton\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ButtonBar.html\">Titanium.UI.ButtonBar</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createButtonBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the button bar</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>the selected index</p></span>\n\t<span><b>labels</b><i>:array</i></span>\n\t\t<span class='info'>the array of labels for the button bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style of the button bar</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createButtonBar","display":"(Method)\t\tTitanium.UI.createButtonBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.CoverFlowView.html\">Titanium.UI.CoverFlowView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createCoverFlowView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>images</b><i>:array</i></span>\n\t\t<span class='info'>array of images to display in the view</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>selected</b><i>:int</i></span>\n\t\t<span class='info'>index to make selected</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createCoverFlowView","display":"(Method)\t\tTitanium.UI.createCoverFlowView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.DashboardItem.html\">Titanium.UI.DashboardItem</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createDashboardItem</u></b><i>:object()</i><br>(\n{\n\t<span><b>badge</b><i>:int</i></span>\n\t\t<span class='info'>the badge value or <tt>0</tt> to remove the badge</p></span>\n\t<span><b>canDelete</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean to indicate if this item can be deleted when it edit mode</p></span>\n\t<span><b>image</b><i>:string</i></span>\n\t\t<span class='info'>the URL to the image</p></span>\n\t<span><b>selectedImage</b><i>:string</i></span>\n\t\t<span class='info'>the URL to the image to display when the item is depressed (clicked)</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createDashboardItem","display":"(Method)\t\tTitanium.UI.createDashboardItem\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.DashboardView.html\">Titanium.UI.DashboardView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createDashboardView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>data</b><i>:array</i></span>\n\t\t<span class='info'>an array of <a href=\"Titanium.UI.DashboardItem-object.html\">Titanium.UI.DashboardItem</a> objects to display in the view</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createDashboardView","display":"(Method)\t\tTitanium.UI.createDashboardView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.EmailDialog.html\">Titanium.UI.EmailDialog</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createEmailDialog</u></b><i>:object()</i><br>(\n{\n\t<span><b>CANCELLED</b><i>:int</i></span>\n\t\t<span class='info'>constant for the CANCELLED status result</p></span>\n\t<span><b>FAILED</b><i>:int</i></span>\n\t\t<span class='info'>constant for the FAILED status result</p></span>\n\t<span><b>SAVED</b><i>:int</i></span>\n\t\t<span class='info'>constant for the SAVED status result</p></span>\n\t<span><b>SENT</b><i>:int</i></span>\n\t\t<span class='info'>constant for the SENT status result</p></span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>the bar color of the email dialog window when opened</p></span>\n\t<span><b>bccRecipients</b><i>:array</i></span>\n\t\t<span class='info'>array of email BCC: recipients</p></span>\n\t<span><b>ccRecipients</b><i>:array</i></span>\n\t\t<span class='info'>array of email CC: recipients</p></span>\n\t<span><b>html</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false</p></span>\n\t<span><b>messageBody</b><i>:string</i></span>\n\t\t<span class='info'>the email message body</p></span>\n\t<span><b>subject</b><i>:string</i></span>\n\t\t<span class='info'>the subject line for the email</p></span>\n\t<span><b>toRecipients</b><i>:array</i></span>\n\t\t<span class='info'>array of email recipients</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createEmailDialog","display":"(Method)\t\tTitanium.UI.createEmailDialog\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ImageView.html\">Titanium.UI.ImageView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createImageView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>animating</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly boolean to indicate if the animation is animating</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>canScale</b><i>:boolean</i></span>\n\t\t<span class='info'>allow image to scale (Android)</p></span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>defaultImage</b><i>:string</i></span>\n\t\t<span class='info'>url to the default image to display while loading a remote image</p></span>\n\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>amount of time in milliseconds to animate one cycle</p></span>\n\t<span><b>enableZoomControls</b><i>:boolean</i></span>\n\t\t<span class='info'>enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)</p></span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>height of the image display</p></span>\n\t<span><b>image</b><i>:object</i></span>\n\t\t<span class='info'>image to display either as string url, Blob or File</p></span>\n\t<span><b>images</b><i>:array</i></span>\n\t\t<span class='info'>array of images (either as string url, Blob or File) to display in an animation</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly boolean to indicate if the animation is paused</p></span>\n\t<span><b>preventDefaultImage</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the default image should be displaying while loading a remote image</p></span>\n\t<span><b>repeatCount</b><i>:int</i></span>\n\t\t<span class='info'>number of times to repeat the image animation</p></span>\n\t<span><b>reverse</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the animation should happen in reverse (from last to first)</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to the image to display</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float</i></span>\n\t\t<span class='info'>width of the image display</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createImageView","display":"(Method)\t\tTitanium.UI.createImageView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Label.html\">Titanium.UI.Label</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createLabel</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>background image for the label</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundPaddingBottom</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the bottom</p></span>\n\t<span><b>backgroundPaddingLeft</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the left</p></span>\n\t<span><b>backgroundPaddingRight</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the right</p></span>\n\t<span><b>backgroundPaddingTop</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the top</p></span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the color of the label</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the label font object properties</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>highlightedColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the label when in the highlighted state</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>minimumFontSize</b><i>:int</i></span>\n\t\t<span class='info'>the minimum font size if the label is auto-adjusting based on its contents</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>shadowColor</b><i>:string</i></span>\n\t\t<span class='info'>the text shadow color</p></span>\n\t<span><b>shadowOffset</b><i>:object</i></span>\n\t\t<span class='info'>the shadow offset as a dictionary with the properties <tt>x</tt> and <tt>y</tt></p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>text</b><i>:string</i></span>\n\t\t<span class='info'>the text of the label</p></span>\n\t<span><b>textAlign</b><i>:string,int</i></span>\n\t\t<span class='info'>the alignment constant or string value such as <tt>left</tt>, <tt>center</tt> or <tt>right</tt></p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createLabel","display":"(Method)\t\tTitanium.UI.createLabel\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.OptionDialog.html\">Titanium.UI.OptionDialog</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createOptionDialog</u></b><i>:object()</i><br>(\n{\n\t<span><b>cancel</b><i>:int</i></span>\n\t\t<span class='info'>an index to indicate which button should be the cancel button</p></span>\n\t<span><b>destructive</b><i>:int</i></span>\n\t\t<span class='info'>the destructive button (indicated by a visual clue in the UI)</p></span>\n\t<span><b>options</b><i>:array</i></span>\n\t\t<span class='info'>array of button names as strings</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the dialog</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createOptionDialog","display":"(Method)\t\tTitanium.UI.createOptionDialog\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Picker.html\">Titanium.UI.Picker</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createPicker</u></b><i>:object()</i><br>(\n{\n\t<span><b>columns</b><i>:array</i></span>\n\t\t<span class='info'>array of column values</p></span>\n\t<span><b>countDownDuration</b><i>:double</i></span>\n\t\t<span class='info'>the duration value in milliseconds for count down timer pickers</p></span>\n\t<span><b>locale</b><i>:string</i></span>\n\t\t<span class='info'>the locale used for displaying Date/Time pickers values</p></span>\n\t<span><b>maxDate</b><i>:date</i></span>\n\t\t<span class='info'>the maximum Date/Time for value for date pickers</p></span>\n\t<span><b>minDate</b><i>:date</i></span>\n\t\t<span class='info'>the minimum Date/Time for value for date pickers</p></span>\n\t<span><b>minuteInterval</b><i>:int</i></span>\n\t\t<span class='info'>property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.</p></span>\n\t<span><b>selectionIndicator</b><i>:boolean</i></span>\n\t\t<span class='info'>for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.</p></span>\n\t<span><b>type</b><i>:int</i></span>\n\t\t<span class='info'>the type constant for the picker. One of <a href=\"Titanium.UI.PICKER_TYPE_PLAIN.html\">Titanium.UI.PICKER_TYPE_PLAIN</a> (default), <a href=\"Titanium.UI.PICKER_TYPE_DATE_AND_TIME.html\">Titanium.UI.PICKER_TYPE_DATE_AND_TIME</a>, <a href=\"Titanium.UI.PICKER_TYPE_DATE.html\">Titanium.UI.PICKER_TYPE_DATE</a>, <a href=\"Titanium.UI.PICKER_TYPE_TIME.html\">Titanium.UI.PICKER_TYPE_TIME</a> or <a href=\"Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER.html\">Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER</a>.</p></span>\n\t<span><b>value</b><i>:date</i></span>\n\t\t<span class='info'>the Date/Time value for date pickers</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createPicker","display":"(Method)\t\tTitanium.UI.createPicker\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.PickerColumn.html\">Titanium.UI.PickerColumn</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createPickerColumn</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rowCount</b><i>:int</i></span>\n\t\t<span class='info'>number of rows in the column (readonly)</p></span>\n\t<span><b>rows</b><i>:array</i></span>\n\t\t<span class='info'>an array of rows</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createPickerColumn","display":"(Method)\t\tTitanium.UI.createPickerColumn\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.PickerRow.html\">Titanium.UI.PickerRow</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createPickerRow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>fontSize</b><i>:int</i></span>\n\t\t<span class='info'>the font size when displaying the text. ignored when using a custom view</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>selected</b><i>:boolean</i></span>\n\t\t<span class='info'>when used in the constructor, set the row to selected on initial display</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the display text</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createPickerRow","display":"(Method)\t\tTitanium.UI.createPickerRow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ProgressBar.html\">Titanium.UI.ProgressBar</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createProgressBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the color of the progress bar text</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the font object for the progress bar text</p></span>\n\t<span><b>max</b><i>:float</i></span>\n\t\t<span class='info'>the maximum value of the progress bar</p></span>\n\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the progress bar message</p></span>\n\t<span><b>min</b><i>:float</i></span>\n\t\t<span class='info'>the minimum value of the progress bar</p></span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style of the progress bar</p></span>\n\t<span><b>value</b><i>:float</i></span>\n\t\t<span class='info'>the current value of the progress bar</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createProgressBar","display":"(Method)\t\tTitanium.UI.createProgressBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ScrollView.html\">Titanium.UI.ScrollView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createScrollView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>contentHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height of the scrollable area</p></span>\n\t<span><b>contentOffset</b><i>:object</i></span>\n\t\t<span class='info'>an object (with x and y properties) to indicate the offset of the content area</p></span>\n\t<span><b>contentWidth</b><i>:float</i></span>\n\t\t<span class='info'>the width of the scrollable area</p></span>\n\t<span><b>disableBounce</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control bounce during scrolling</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>horizontalBounce</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the horizontal bounce during scrolling</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>maxZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the maximum scale of the content</p></span>\n\t<span><b>minZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the minimum scale of the content</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>scrollType</b><i>:string</i></span>\n\t\t<span class='info'>(Android only) the type of ScrollView: \"vertical\" or \"horizontal\"</p></span>\n\t<span><b>showHorizontalScrollIndicator</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the horizontal scroll indicator is visible</p></span>\n\t<span><b>showVerticalScrollIndicator</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the vertical scroll indicator is visible</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>verticalBounce</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the vertical bounce during scrolling</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n\t<span><b>zoomScale</b><i>:float</i></span>\n\t\t<span class='info'>set the zoom scale for the current content area</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createScrollView","display":"(Method)\t\tTitanium.UI.createScrollView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ScrollableView.html\">Titanium.UI.ScrollableView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createScrollableView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>currentPage</b><i>:int</i></span>\n\t\t<span class='info'>the current page visible in the view</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>maxZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the maximum zoom scale for the view</p></span>\n\t<span><b>minZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the minimum zoom scale for the view</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>pagingControlColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the paging control. defaults to black.</p></span>\n\t<span><b>pagingControlHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height in pixels of the paging control, if visible. defaults to 20</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>showPagingControl</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the paging control UI is visible</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>views</b><i>:array</i></span>\n\t\t<span class='info'>array of view objects to place in the view</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createScrollableView","display":"(Method)\t\tTitanium.UI.createScrollableView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.SearchBar.html\">Titanium.UI.SearchBar</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createSearchBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>autocapitalization</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the text in the field should be autocapitalized as typed</p></span>\n\t<span><b>autocorrect</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the text in the field should be autocorrected as typed</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>the bar color of the search bar view</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>hintText</b><i>:string</i></span>\n\t\t<span class='info'>the text to show when the search bar field is not focused</p></span>\n\t<span><b>keyboardType</b><i>:int</i></span>\n\t\t<span class='info'>the keyboard type constant to use when the field is focused</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>prompt</b><i>:string</i></span>\n\t\t<span class='info'>a single line of text displayed at the top of the search bar</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>showCancel</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicates whether the cancel button is displayed</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>the value of the search bar</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createSearchBar","display":"(Method)\t\tTitanium.UI.createSearchBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Slider.html\">Titanium.UI.Slider</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createSlider</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>disabledLeftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track when in the disabled state</p></span>\n\t<span><b>disabledRightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track when in the disabled state</p></span>\n\t<span><b>disabledThumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider thumb when in the disabled state</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate the enabled state of the slider</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>highlightedLeftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track when in the highlighted state</p></span>\n\t<span><b>highlightedRightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track when in the highlighted state</p></span>\n\t<span><b>highlightedThumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider thumb when in the highlighted state</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track</p></span>\n\t<span><b>max</b><i>:float</i></span>\n\t\t<span class='info'>the maximum slider value</p></span>\n\t<span><b>min</b><i>:float</i></span>\n\t\t<span class='info'>the minimum slider value</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track</p></span>\n\t<span><b>selectedLeftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track when in the selected state</p></span>\n\t<span><b>selectedRightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track when in the selected state</p></span>\n\t<span><b>selectedThumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider thumb when in the selected state</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>thumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url to the slider thumb</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>the value of the slider</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createSlider","display":"(Method)\t\tTitanium.UI.createSlider\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Switch.html\">Titanium.UI.Switch</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createSwitch</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean for the state of the switch</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean value of the switch where true is the switch is <tt>on</tt> and false the switch if <tt>off</tt></p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createSwitch","display":"(Method)\t\tTitanium.UI.createSwitch\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Tab.html\">Titanium.UI.Tab</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTab</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>badge</b><i>:string</i></span>\n\t\t<span class='info'>the badge value for the tab group for this tab. null indicates no badge is value</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>icon</b><i>:string</i></span>\n\t\t<span class='info'>the icon url for the tab group for this tab</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title for the tab group for this tab</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>window</b><i>:object</i></span>\n\t\t<span class='info'>the root level tab window.  all tabs must have at least one root level tab window.</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTab","display":"(Method)\t\tTitanium.UI.createTab\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TabGroup.html\">Titanium.UI.TabGroup</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTabGroup</u></b><i>:object()</i><br>(\n{\n\t<span><b>activeTab</b><i>:object</i></span>\n\t\t<span class='info'>the active tab</p></span>\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>the bar color</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>tabs</b><i>:array</i></span>\n\t\t<span class='info'>array of tab objects that are managed by the tab group</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTabGroup","display":"(Method)\t\tTitanium.UI.createTabGroup\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TabbedBar.html\">Titanium.UI.TabbedBar</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTabbedBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the tabbed bar</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>the selected index</p></span>\n\t<span><b>labels</b><i>:array</i></span>\n\t\t<span class='info'>the array of labels for the tabbed bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style of the tabbed bar</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTabbedBar","display":"(Method)\t\tTitanium.UI.createTabbedBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TableView.html\">Titanium.UI.TableView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTableView</u></b><i>:object()</i><br>(\n{\n\t<span><b>allowsSelection</b><i>:boolean</i></span>\n\t\t<span class='info'>true if the rows can be selected</p></span>\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the table view</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image to render in the background of the table view</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>data</b><i>:array</i></span>\n\t\t<span class='info'>the data array of objects to be used for the rows of the table view</p></span>\n\t<span><b>editable</b><i>:boolean</i></span>\n\t\t<span class='info'>allow the table view to be editable (this must be true for swipe-to-delete)</p></span>\n\t<span><b>editing</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the editing state of the table view</p></span>\n\t<span><b>filterAttribute</b><i>:string</i></span>\n\t\t<span class='info'>the filter attribute to be used when searching. this property maps to your data object or a property on the row object</p></span>\n\t<span><b>filterCaseInsensitive</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the search should be case sensitive or case insensitive (default)</p></span>\n\t<span><b>footerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the table view footer title</p></span>\n\t<span><b>footerView</b><i>:object</i></span>\n\t\t<span class='info'>the table view footer as a view that will be rendered instead of a label</p></span>\n\t<span><b>headerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the table view header title</p></span>\n\t<span><b>headerView</b><i>:object</i></span>\n\t\t<span class='info'>the table view header as a view that will be rendered instead of a label</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>index</b><i>:array</i></span>\n\t\t<span class='info'>an array of objects (with title and index properties) to control the table view index</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>maxRowHeight</b><i>:float</i></span>\n\t\t<span class='info'>max row height for table view rows</p></span>\n\t<span><b>minRowHeight</b><i>:float</i></span>\n\t\t<span class='info'>min row height for table view rows</p></span>\n\t<span><b>moving</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the moveable state of the table view</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rowHeight</b><i>:float</i></span>\n\t\t<span class='info'>default row height for table view rows</p></span>\n\t<span><b>search</b><i>:object</i></span>\n\t\t<span class='info'>the search field to use for the table view</p></span>\n\t<span><b>searchHidden</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the visibility of the search field</p></span>\n\t<span><b>separatorColor</b><i>:string</i></span>\n\t\t<span class='info'>the separator color color as a hex or named value</p></span>\n\t<span><b>separatorStyle</b><i>:int</i></span>\n\t\t<span class='info'>the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>iPhone only. the style of the table view. constant from <a href=\"Titanium.UI.iPhone.TableViewStyle\">Titanium.UI.iPhone.TableViewStyle</a></p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTableView","display":"(Method)\t\tTitanium.UI.createTableView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TableViewRow.html\">Titanium.UI.TableViewRow</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTableViewRow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background cell color</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background cell image</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>className</b><i>:string</i></span>\n\t\t<span class='info'>the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.</p></span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>default color of the row when not selected</p></span>\n\t<span><b>hasCheck</b><i>:boolean</i></span>\n\t\t<span class='info'>render a system provided check mark in the right image area of the row cell</p></span>\n\t<span><b>hasChild</b><i>:boolean</i></span>\n\t\t<span class='info'>render a system provided right arrow in the right image area of the row cell</p></span>\n\t<span><b>hasDetail</b><i>:boolean</i></span>\n\t\t<span class='info'>render a system provided blue indicator icon in the right image area of the row cell</p></span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>the height of the row. specify <tt>auto</tt> to calculate the row height based on the size of the child views of the row</p></span>\n\t<span><b>indentionLevel</b><i>:int</i></span>\n\t\t<span class='info'>the indention level for the cell (defaults to 0)</p></span>\n\t<span><b>layout</b><i>:string</i></span>\n\t\t<span class='info'>the layout algorithm to use for the layout. either absolute (default) or vertical.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftImage</b><i>:string</i></span>\n\t\t<span class='info'>image url to render in the left image area of the row cell</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightImage</b><i>:string</i></span>\n\t\t<span class='info'>image url to render in the right image area of the row cell</p></span>\n\t<span><b>selectedBackgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color to render when the row cell is selected</p></span>\n\t<span><b>selectedBackgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image to render when the row cell is selected</p></span>\n\t<span><b>selectedColor</b><i>:string</i></span>\n\t\t<span class='info'>color of the row during selection</p></span>\n\t<span><b>selectionStyle</b><i>:int</i></span>\n\t\t<span class='info'>a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title cell value. do not specify if using views as children of the row</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTableViewRow","display":"(Method)\t\tTitanium.UI.createTableViewRow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TableViewSection.html\">Titanium.UI.TableViewSection</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTableViewSection</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>footerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the title of the section footer</p></span>\n\t<span><b>footerView</b><i>:object</i></span>\n\t\t<span class='info'>a view to use instead of the default label when rendering the section footer</p></span>\n\t<span><b>headerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the title of the section header</p></span>\n\t<span><b>headerView</b><i>:object</i></span>\n\t\t<span class='info'>a view to use instead of the default label when rendering the section header</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rowCount</b><i>:int</i></span>\n\t\t<span class='info'>the (readonly) number of rows in the section</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTableViewSection","display":"(Method)\t\tTitanium.UI.createTableViewSection\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TextArea.html\">Titanium.UI.TextArea</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTextArea</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>value of the background color of the field</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>editable</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating if the field is editable</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating the enabled state of the field</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>keyboardToolbar</b><i>:array</i></span>\n\t\t<span class='info'>array of toolbar button objects to be used when the keyboard is displayed</p></span>\n\t<span><b>keyboardToolbarColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the keyboard toolbar</p></span>\n\t<span><b>keyboardToolbarHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height of the keyboard toolbar</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>suppressReturn</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the return key should be suppressed during entry</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value of the field</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTextArea","display":"(Method)\t\tTitanium.UI.createTextArea\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TextField.html\">Titanium.UI.TextField</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createTextField</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>value of the background color of the field</p></span>\n\t<span><b>backgroundDisabledImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url to the background image of the field when in the disabled state</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url to the background image of the field</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderStyle</b><i>:int</i></span>\n\t\t<span class='info'>the border style constant for the field</p></span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>clearButtonMode</b><i>:int</i></span>\n\t\t<span class='info'>the mode constant for how to handle displaying the clear button</p></span>\n\t<span><b>clearOnEdit</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean that indicates if the value of the field is cleared upon editing</p></span>\n\t<span><b>editable</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating if the field is editable</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating the enabled state of the field</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>hintText</b><i>:string</i></span>\n\t\t<span class='info'>the hint text to display when the field is unfocused</p></span>\n\t<span><b>keyboardToolbar</b><i>:array</i></span>\n\t\t<span class='info'>array of toolbar button objects to be used when the keyboard is displayed</p></span>\n\t<span><b>keyboardToolbarColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the keyboard toolbar</p></span>\n\t<span><b>keyboardToolbarHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height of the keyboard toolbar</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftButton</b><i>:object</i></span>\n\t\t<span class='info'>the left button view</p></span>\n\t<span><b>leftButtonMode</b><i>:int</i></span>\n\t\t<span class='info'>the mode of the left button view</p></span>\n\t<span><b>leftButtonPadding</b><i>:float</i></span>\n\t\t<span class='info'>the left padding of the space between the button and the edge of the field</p></span>\n\t<span><b>minimumFontSize</b><i>:int</i></span>\n\t\t<span class='info'>the minimum size of the font when the font is sized based on the contents</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>paddingLeft</b><i>:float</i></span>\n\t\t<span class='info'>the left padding of the text field</p></span>\n\t<span><b>paddingRight</b><i>:float</i></span>\n\t\t<span class='info'>the right padding of the text field</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightButton</b><i>:object</i></span>\n\t\t<span class='info'>the right button view</p></span>\n\t<span><b>rightButtonMode</b><i>:int</i></span>\n\t\t<span class='info'>the mode of the right button view</p></span>\n\t<span><b>rightButtonPadding</b><i>:float</i></span>\n\t\t<span class='info'>the right padding of the space between the button and the edge of the field</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>suppressReturn</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the return key should be suppressed during entry</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value of the field</p></span>\n\t<span><b>verticalAlign</b><i>:int,string</i></span>\n\t\t<span class='info'>the constant or string value for the fields vertical alignment.</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createTextField","display":"(Method)\t\tTitanium.UI.createTextField\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Toolbar.html\">Titanium.UI.Toolbar</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createToolbar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createToolbar","display":"(Method)\t\tTitanium.UI.createToolbar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.View.html\">Titanium.UI.View</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createView","display":"(Method)\t\tTitanium.UI.createView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.WebView.html\">Titanium.UI.WebView</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createWebView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color for the webview</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>a data blob or file that is used to load the web document</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>html</b><i>:string</i></span>\n\t\t<span class='info'>the html content of the web document</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>loading</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating if the webview is loading content</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>scalesPageToFit</b><i>:boolean</i></span>\n\t\t<span class='info'>whether the webview should scale it's contents or not</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createWebView","display":"(Method)\t\tTitanium.UI.createWebView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Window.html\">Titanium.UI.Window</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.createWindow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backButtonTitle</b><i>:string</i></span>\n\t\t<span class='info'>title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>backButtonTitleImage</b><i>:string</i></span>\n\t\t<span class='info'>url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>web named color or hex value for the color of the nav bar. only available in iPhone.</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>fullscreen</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicates if the window is fullscreen (no device chrome)</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftNavButton</b><i>:object</i></span>\n\t\t<span class='info'>view to show in the left nav bar area. only available in iPhone.</p></span>\n\t<span><b>modal</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the window should be opened modal in front of other windows</p></span>\n\t<span><b>navBarHidden</b><i>:boolean</i></span>\n\t\t<span class='info'>for modal windows, hide the nav bar (true) or show the nav bar (false, default).</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>orientationModes</b><i>:array</i></span>\n\t\t<span class='info'>array of orientation mode constants defined in [Titanium.UI]</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightNavButton</b><i>:object</i></span>\n\t\t<span class='info'>view to show in the right nav bar area. only available in iPhone.</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>tabBarHidden</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>title of the window.</p></span>\n\t<span><b>titleControl</b><i>:object</i></span>\n\t\t<span class='info'>view to show in the title area. only available in iPhone.</p></span>\n\t<span><b>titleImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a image that show in the title area. only available in iPhone.</p></span>\n\t<span><b>titlePrompt</b><i>:string</i></span>\n\t\t<span class='info'>title prompt for the window. only available in iPhone.</p></span>\n\t<span><b>toolbar</b><i>:array</i></span>\n\t\t<span class='info'>array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>translucent</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the nav bar is translucent. only available in iPhone.</p></span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.createWindow","display":"(Method)\t\tTitanium.UI.createWindow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.fireEvent","display":"(Method)\t\tTitanium.UI.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.removeEventListener","display":"(Method)\t\tTitanium.UI.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Titanium.UI.ANIMATION_CURVE_EASE_IN","display":"(Property)\tTitanium.UI.ANIMATION_CURVE_EASE_IN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Titanium.UI.ANIMATION_CURVE_EASE_IN_OUT","display":"(Property)\tTitanium.UI.ANIMATION_CURVE_EASE_IN_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Titanium.UI.ANIMATION_CURVE_EASE_OUT","display":"(Property)\tTitanium.UI.ANIMATION_CURVE_EASE_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Titanium.UI.ANIMATION_CURVE_LINEAR","display":"(Property)\tTitanium.UI.ANIMATION_CURVE_LINEAR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_CLEAR","display":"(Property)\tTitanium.UI.BLEND_MODE_CLEAR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_COLOR","display":"(Property)\tTitanium.UI.BLEND_MODE_COLOR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_COLOR_BURN","display":"(Property)\tTitanium.UI.BLEND_MODE_COLOR_BURN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_COLOR_DODGE","display":"(Property)\tTitanium.UI.BLEND_MODE_COLOR_DODGE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_COPY","display":"(Property)\tTitanium.UI.BLEND_MODE_COPY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_DARKEN","display":"(Property)\tTitanium.UI.BLEND_MODE_DARKEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_DESTINATION_ATOP","display":"(Property)\tTitanium.UI.BLEND_MODE_DESTINATION_ATOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_DESTINATION_IN","display":"(Property)\tTitanium.UI.BLEND_MODE_DESTINATION_IN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_DESTINATION_OUT","display":"(Property)\tTitanium.UI.BLEND_MODE_DESTINATION_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_DESTINATION_OVER","display":"(Property)\tTitanium.UI.BLEND_MODE_DESTINATION_OVER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_DIFFERENCE","display":"(Property)\tTitanium.UI.BLEND_MODE_DIFFERENCE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_EXCLUSION","display":"(Property)\tTitanium.UI.BLEND_MODE_EXCLUSION\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_HARD_LIGHT","display":"(Property)\tTitanium.UI.BLEND_MODE_HARD_LIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_HUE","display":"(Property)\tTitanium.UI.BLEND_MODE_HUE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_LIGHTEN","display":"(Property)\tTitanium.UI.BLEND_MODE_LIGHTEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_LUMINOSITY","display":"(Property)\tTitanium.UI.BLEND_MODE_LUMINOSITY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_MULTIPLY","display":"(Property)\tTitanium.UI.BLEND_MODE_MULTIPLY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_NORMAL","display":"(Property)\tTitanium.UI.BLEND_MODE_NORMAL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_OVERLAY","display":"(Property)\tTitanium.UI.BLEND_MODE_OVERLAY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_PLUS_DARKER","display":"(Property)\tTitanium.UI.BLEND_MODE_PLUS_DARKER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_PLUS_LIGHTER","display":"(Property)\tTitanium.UI.BLEND_MODE_PLUS_LIGHTER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_SATURATION","display":"(Property)\tTitanium.UI.BLEND_MODE_SATURATION\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_SCREEN","display":"(Property)\tTitanium.UI.BLEND_MODE_SCREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_SOFT_LIGHT","display":"(Property)\tTitanium.UI.BLEND_MODE_SOFT_LIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_SOURCE_ATOP","display":"(Property)\tTitanium.UI.BLEND_MODE_SOURCE_ATOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_SOURCE_IN","display":"(Property)\tTitanium.UI.BLEND_MODE_SOURCE_IN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_SOURCE_OUT","display":"(Property)\tTitanium.UI.BLEND_MODE_SOURCE_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Titanium.UI.BLEND_MODE_XOR","display":"(Property)\tTitanium.UI.BLEND_MODE_XOR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.FACE_DOWN","display":"(Property)\tTitanium.UI.FACE_DOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.FACE_UP","display":"(Property)\tTitanium.UI.FACE_UP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BORDERSTYLE_BEZEL","display":"(Property)\tTitanium.UI.INPUT_BORDERSTYLE_BEZEL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BORDERSTYLE_LINE","display":"(Property)\tTitanium.UI.INPUT_BORDERSTYLE_LINE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BORDERSTYLE_NONE","display":"(Property)\tTitanium.UI.INPUT_BORDERSTYLE_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BORDERSTYLE_ROUNDED","display":"(Property)\tTitanium.UI.INPUT_BORDERSTYLE_ROUNDED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BUTTONMODE_ALWAYS","display":"(Property)\tTitanium.UI.INPUT_BUTTONMODE_ALWAYS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BUTTONMODE_NEVER","display":"(Property)\tTitanium.UI.INPUT_BUTTONMODE_NEVER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BUTTONMODE_ONBLUR","display":"(Property)\tTitanium.UI.INPUT_BUTTONMODE_ONBLUR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Titanium.UI.INPUT_BUTTONMODE_ONFOCUS","display":"(Property)\tTitanium.UI.INPUT_BUTTONMODE_ONFOCUS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard appearance constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_APPEARANCE_ALERT","display":"(Property)\tTitanium.UI.KEYBOARD_APPEARANCE_ALERT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard appearance constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_APPEARANCE_DEFAULT","display":"(Property)\tTitanium.UI.KEYBOARD_APPEARANCE_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_ASCII","display":"(Property)\tTitanium.UI.KEYBOARD_ASCII\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_DEFAULT","display":"(Property)\tTitanium.UI.KEYBOARD_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_EMAIL","display":"(Property)\tTitanium.UI.KEYBOARD_EMAIL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_NAMEPHONE_PAD","display":"(Property)\tTitanium.UI.KEYBOARD_NAMEPHONE_PAD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_NUMBERS_PUNCTUATION","display":"(Property)\tTitanium.UI.KEYBOARD_NUMBERS_PUNCTUATION\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_NUMBER_PAD","display":"(Property)\tTitanium.UI.KEYBOARD_NUMBER_PAD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_PHONE_PAD","display":"(Property)\tTitanium.UI.KEYBOARD_PHONE_PAD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Titanium.UI.KEYBOARD_URL","display":"(Property)\tTitanium.UI.KEYBOARD_URL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.LANDSCAPE_LEFT","display":"(Property)\tTitanium.UI.LANDSCAPE_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.LANDSCAPE_RIGHT","display":"(Property)\tTitanium.UI.LANDSCAPE_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER","display":"(Property)\tTitanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Titanium.UI.PICKER_TYPE_DATE","display":"(Property)\tTitanium.UI.PICKER_TYPE_DATE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Titanium.UI.PICKER_TYPE_DATE_AND_TIME","display":"(Property)\tTitanium.UI.PICKER_TYPE_DATE_AND_TIME\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Titanium.UI.PICKER_TYPE_PLAIN","display":"(Property)\tTitanium.UI.PICKER_TYPE_PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Titanium.UI.PICKER_TYPE_TIME","display":"(Property)\tTitanium.UI.PICKER_TYPE_TIME\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.PORTRAIT","display":"(Property)\tTitanium.UI.PORTRAIT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_DEFAULT","display":"(Property)\tTitanium.UI.RETURNKEY_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_DONE","display":"(Property)\tTitanium.UI.RETURNKEY_DONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_EMERGENCY_CALL","display":"(Property)\tTitanium.UI.RETURNKEY_EMERGENCY_CALL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_GO","display":"(Property)\tTitanium.UI.RETURNKEY_GO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_GOOGLE","display":"(Property)\tTitanium.UI.RETURNKEY_GOOGLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_JOIN","display":"(Property)\tTitanium.UI.RETURNKEY_JOIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_NEXT","display":"(Property)\tTitanium.UI.RETURNKEY_NEXT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_ROUTE","display":"(Property)\tTitanium.UI.RETURNKEY_ROUTE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_SEARCH","display":"(Property)\tTitanium.UI.RETURNKEY_SEARCH\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_SEND","display":"(Property)\tTitanium.UI.RETURNKEY_SEND\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Titanium.UI.RETURNKEY_YAHOO","display":"(Property)\tTitanium.UI.RETURNKEY_YAHOO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text align constant</p>","insert":"$0","match":"Titanium.UI.TEXT_ALIGNMENT_CENTER","display":"(Property)\tTitanium.UI.TEXT_ALIGNMENT_CENTER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text align constant</p>","insert":"$0","match":"Titanium.UI.TEXT_ALIGNMENT_LEFT","display":"(Property)\tTitanium.UI.TEXT_ALIGNMENT_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text align constant</p>","insert":"$0","match":"Titanium.UI.TEXT_ALIGNMENT_RIGHT","display":"(Property)\tTitanium.UI.TEXT_ALIGNMENT_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Titanium.UI.TEXT_AUTOCAPITALIZATION_ALL","display":"(Property)\tTitanium.UI.TEXT_AUTOCAPITALIZATION_ALL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Titanium.UI.TEXT_AUTOCAPITALIZATION_NONE","display":"(Property)\tTitanium.UI.TEXT_AUTOCAPITALIZATION_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Titanium.UI.TEXT_AUTOCAPITALIZATION_SENTENCES","display":"(Property)\tTitanium.UI.TEXT_AUTOCAPITALIZATION_SENTENCES\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Titanium.UI.TEXT_AUTOCAPITALIZATION_WORDS","display":"(Property)\tTitanium.UI.TEXT_AUTOCAPITALIZATION_WORDS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text vertical align constant</p>","insert":"$0","match":"Titanium.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM","display":"(Property)\tTitanium.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text vertical align constant</p>","insert":"$0","match":"Titanium.UI.TEXT_VERTICAL_ALIGNMENT_CENTER","display":"(Property)\tTitanium.UI.TEXT_VERTICAL_ALIGNMENT_CENTER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text vertical align constant</p>","insert":"$0","match":"Titanium.UI.TEXT_VERTICAL_ALIGNMENT_TOP","display":"(Property)\tTitanium.UI.TEXT_VERTICAL_ALIGNMENT_TOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.UNKNOWN","display":"(Property)\tTitanium.UI.UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Titanium.UI.UPSIDE_PORTRAIT","display":"(Property)\tTitanium.UI.UPSIDE_PORTRAIT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The main <a href=\"Titanium.UI-module.html\">Titanium.UI</a> module.  The UI module is responsible for native user-interface components and interaction inside Titanium.  The goal of the UI module is to provide a native experience along with native performance by compiling Javascript code into their native counterparts as part of the build process. </p><hr /><h3 id=\"design\">Design</h3>\n<p>The UI module is broken down into 3 major area:</p>\n<ul>\n<li><strong>Views</strong> - <a href=\"Titanium.UI.View\">Views</a> are containers that host visual elements such as controls or other views.  Views can have their properties customized, such as their border color and radius, can fire events such as swipe events or touches, and can optionally contain a hierarchy or other views as children. In Titanium, most views are specialized to perform both a visual function and set of interaction behaviors such as <a href=\"Titanium.UI.TableView\">Table View</a> or <a href=\"Titanium.UI.CoverFlowView\">Coverflow View</a>.  Views are always named with the suffix <tt>View</tt>.</li>\n<li><strong>Controls</strong> - controls, or sometimes referred as widgets, are visual elements such as <a href=\"Titanium.UI.Slider\">sliders</a>, <a href=\"Titanium.UI.Button\">buttons</a> and <a href=\"Titanium.UI.Switch\">switches</a>. They provide a visual element which has a defined behavior and typical have special configuration and special events.  Controls themselves are views and also inherit a views properties, functions and events.</li>\n<li><strong>Windows</strong> - <a href=\"Titanium.UI.Window\">Windows</a> are typically top-level visual constructs that are the main part of your interface. An application will always have at least one window and windows can take different shapes and sizes, can have display and interaction properties such as fullscreen or modal and can be customized, such as changing their opacity or background color. Windows themselves are views and also inherit a views properties, functions and events. There are a few specialization of Windows such as a <a href=\"Titanium.UI.TabGroup\">Tab Group</a> which offer additional behavior beyond the basic Window.</li>\n</ul>\n<p>Titanium uses the <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\">Factory Pattern</a> for constructing objects and a general naming pattern for APIs.  For example, to construct a <a href=\"Titanium.UI.AlertDialog\">Alert Dialog</a>, you call the method <a href=\"Titanium.UI.createAlertDialog.html\">Titanium.UI.createAlertDialog</a>.  To create a <a href=\"Titanium.UI.TextArea\">TextArea</a>, you call the method <a href=\"Titanium.UI.createTextArea.html\">Titanium.UI.createTextArea</a>.  Once an object is created, it will be available until it goes out of scope.</p>\n<h3 id=\"optimizations\">Optimizations</h3>\n<p>UI objects are optimized by Titanium to not be realized into the drawing context and placed into the device UI surface until needed.  That means that you can create UI objects, set their properties and add them to their hierarchy without much worry about memory or performance.  When the native drawing surface needs to render a specific view or control, Titanium will automatically create the view as needed.  Additionally, Titanium is optimized to also release memory once the view is no longer needed, on screen or in low memory situations.  However, it's a good idea to help Titanium along in certain cases where you are no longer using objects.  For example, you should call <tt>close</tt> on a <a href=\"Titanium.UI.Window\">Window</a> instance when you are no longer using it.  You can safely call <tt>open</tt> on the <a href=\"Titanium.UI.Window\">Window</a> again to re-open it.<br>\n</p>\n<h3 id=\"global_context_and_threading\">Global Context and Threading</h3>\n<p>Be careful with the objects that are created in <tt>app.js</tt> but only used once.  Since the <tt>app.js</tt> context is global and generally is not garbage collected until the application exits, you should think about the design of your application as it relates to this fact.  <a href=\"Titanium.UI.Window\">Window</a> objects that are opened up with the <tt>url</tt> property to another Javascript file contain a nice way to decompose your application into smaller units.  The other benefit is that when a <a href=\"Titanium.UI.Window\">Window</a> is closed, its resources can be immediately cleaned up, saving resources such as memory and CPU.  Additionally, <a href=\"Titanium.UI.Window\">Window</a> objects run in a separate Javascript context and Thread. While all UI processing is done on the main UI thread, other processing inside a Window or the <tt>app.js</tt> that does not have UI interaction will run in its own thread.</p>\n<h3 id=\"portability\">Portability</h3>\n<p>Titanium components are designed to be portable across as many platforms as it supports.  However, there are cases where a device either does not support a specific feature or capability or where it support additional functionality.  For cases where the device OS supports capabilities that other platforms do not, we attempt to place those capabilities in a separate namespace, such as <a href=\"Titanium.UI.iPhone\">Titanium.UI.iPhone</a>. However, in cases where the control is in a common namespace and support additional features, we continue to place that functionality directly on the object.</p>","insert":"$0","match":"Ti.UI","display":"(Namespace)\tTi.UI","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.addEventListener","display":"(Method)\t\tTi.UI.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.2DMatrix.html\">Titanium.UI.2DMatrix</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.create2DMatrix</u></b><i>:object()</i><br>(\n{\n\t<span><b>a</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,1] in the matrix.</p></span>\n\t<span><b>b</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,2] in the matrix.</p></span>\n\t<span><b>c</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,1] in the matrix.</p></span>\n\t<span><b>d</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,2] in the matrix.</p></span>\n\t<span><b>tx</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,1] in the matrix.</p></span>\n\t<span><b>ty</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,2] in the matrix.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.create2DMatrix","display":"(Method)\t\tTi.UI.create2DMatrix\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.3DMatrix.html\">Titanium.UI.3DMatrix</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.create3DMatrix</u></b><i>:object()</i><br>(\n{\n\t<span><b>m11</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,1] in the matrix.</p></span>\n\t<span><b>m12</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,2] in the matrix.</p></span>\n\t<span><b>m13</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,3] in the matrix.</p></span>\n\t<span><b>m14</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [1,4] in the matrix.</p></span>\n\t<span><b>m21</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,1] in the matrix.</p></span>\n\t<span><b>m22</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,2] in the matrix.</p></span>\n\t<span><b>m23</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,3] in the matrix.</p></span>\n\t<span><b>m24</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [2,4] in the matrix.</p></span>\n\t<span><b>m31</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,1] in the matrix.</p></span>\n\t<span><b>m32</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,2] in the matrix.</p></span>\n\t<span><b>m33</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,3] in the matrix.</p></span>\n\t<span><b>m34</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [3,4] in the matrix.</p></span>\n\t<span><b>m41</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,1] in the matrix.</p></span>\n\t<span><b>m42</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,2] in the matrix.</p></span>\n\t<span><b>m43</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,3] in the matrix.</p></span>\n\t<span><b>m44</b><i>:float</i></span>\n\t\t<span class='info'>The entry at position [4,4] in the matrix.</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.create3DMatrix","display":"(Method)\t\tTi.UI.create3DMatrix\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ActivityIndicator.html\">Titanium.UI.ActivityIndicator</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createActivityIndicator</u></b><i>:object()</i><br>(\n{\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the color of the message label</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the font object for the activity message label</p></span>\n\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the activity message label text</p></span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style constant of the activity indicator</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createActivityIndicator","display":"(Method)\t\tTi.UI.createActivityIndicator\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.AlertDialog.html\">Titanium.UI.AlertDialog</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createAlertDialog</u></b><i>:object()</i><br>(\n{\n\t<span><b>buttonNames</b><i>:array</i></span>\n\t\t<span class='info'>array of button names as strings</p></span>\n\t<span><b>cancel</b><i>:int</i></span>\n\t\t<span class='info'>an index to indicate which button should be the cancel button.</p></span>\n\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the message of the dialog</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the dialog</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createAlertDialog","display":"(Method)\t\tTi.UI.createAlertDialog\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Animation.html\">Titanium.UI.Animation</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createAnimation</u></b><i>:object()</i><br>(\n{\n\t<span><b>autoreverse</b><i>:boolean</i></span>\n\t\t<span class='info'>the property specifies if the animation should be replayed in reverse upon completion</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>value of the backgroundColor property to change during animation</p></span>\n\t<span><b>bottom</b><i>:float</i></span>\n\t\t<span class='info'>value of the bottom property to change during animation</p></span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>value of the center property to change during animation</p></span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>value of the color property to change during animation</p></span>\n\t<span><b>curve</b><i>:int</i></span>\n\t\t<span class='info'>the curve of the animation</p></span>\n\t<span><b>delay</b><i>:float</i></span>\n\t\t<span class='info'>the duration of time in milliseconds before starting the animation</p></span>\n\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>the duration of time in milliseconds to perform the animation</p></span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>value of the height property to change during animation</p></span>\n\t<span><b>left</b><i>:float</i></span>\n\t\t<span class='info'>value of the left property to change during animation</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>value of the opacity property to change during animation</p></span>\n\t<span><b>opaque</b><i>:boolean</i></span>\n\t\t<span class='info'>value of the opaque property to change during animation</p></span>\n\t<span><b>repeat</b><i>:int</i></span>\n\t\t<span class='info'>the number of times the animation should be performed</p></span>\n\t<span><b>right</b><i>:float</i></span>\n\t\t<span class='info'>value of the right property to change during animation</p></span>\n\t<span><b>top</b><i>:float</i></span>\n\t\t<span class='info'>value of the top property to change during animation</p></span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>value of the transform property to change during animation</p></span>\n\t<span><b>transition</b><i>:int</i></span>\n\t\t<span class='info'>during a transition animation, this is the constant to the type of transition to use</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>value of the visible property to change during animation</p></span>\n\t<span><b>width</b><i>:float</i></span>\n\t\t<span class='info'>value of the width property to change during animation</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>value of the zIndex property to change during animation</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createAnimation","display":"(Method)\t\tTi.UI.createAnimation\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Button.html\">Titanium.UI.Button</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createButton</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the buttons background color</p></span>\n\t<span><b>backgroundDisabledImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a button image that is drawn as the background of the button when the button is in the disabled state</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a button image that is drawn as the background of the button</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundSelectedImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a button image that is drawn as the background of the button when the button is in the selected state</p></span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the foreground color of the button text</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean that indicates if the button is enabled or not</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the font properties of the button</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>image</b><i>:string</i></span>\n\t\t<span class='info'>the image to display on the button to the left of the title</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>selectedColor</b><i>:string</i></span>\n\t\t<span class='info'>the selected color of the button text when the button is in the selected state</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>style constant for the type of button</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>button title</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createButton","display":"(Method)\t\tTi.UI.createButton\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ButtonBar.html\">Titanium.UI.ButtonBar</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createButtonBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the button bar</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>the selected index</p></span>\n\t<span><b>labels</b><i>:array</i></span>\n\t\t<span class='info'>the array of labels for the button bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style of the button bar</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createButtonBar","display":"(Method)\t\tTi.UI.createButtonBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.CoverFlowView.html\">Titanium.UI.CoverFlowView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createCoverFlowView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>images</b><i>:array</i></span>\n\t\t<span class='info'>array of images to display in the view</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>selected</b><i>:int</i></span>\n\t\t<span class='info'>index to make selected</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createCoverFlowView","display":"(Method)\t\tTi.UI.createCoverFlowView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.DashboardItem.html\">Titanium.UI.DashboardItem</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createDashboardItem</u></b><i>:object()</i><br>(\n{\n\t<span><b>badge</b><i>:int</i></span>\n\t\t<span class='info'>the badge value or <tt>0</tt> to remove the badge</p></span>\n\t<span><b>canDelete</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean to indicate if this item can be deleted when it edit mode</p></span>\n\t<span><b>image</b><i>:string</i></span>\n\t\t<span class='info'>the URL to the image</p></span>\n\t<span><b>selectedImage</b><i>:string</i></span>\n\t\t<span class='info'>the URL to the image to display when the item is depressed (clicked)</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createDashboardItem","display":"(Method)\t\tTi.UI.createDashboardItem\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.DashboardView.html\">Titanium.UI.DashboardView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createDashboardView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>data</b><i>:array</i></span>\n\t\t<span class='info'>an array of <a href=\"Titanium.UI.DashboardItem-object.html\">Titanium.UI.DashboardItem</a> objects to display in the view</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createDashboardView","display":"(Method)\t\tTi.UI.createDashboardView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.EmailDialog.html\">Titanium.UI.EmailDialog</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createEmailDialog</u></b><i>:object()</i><br>(\n{\n\t<span><b>CANCELLED</b><i>:int</i></span>\n\t\t<span class='info'>constant for the CANCELLED status result</p></span>\n\t<span><b>FAILED</b><i>:int</i></span>\n\t\t<span class='info'>constant for the FAILED status result</p></span>\n\t<span><b>SAVED</b><i>:int</i></span>\n\t\t<span class='info'>constant for the SAVED status result</p></span>\n\t<span><b>SENT</b><i>:int</i></span>\n\t\t<span class='info'>constant for the SENT status result</p></span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>the bar color of the email dialog window when opened</p></span>\n\t<span><b>bccRecipients</b><i>:array</i></span>\n\t\t<span class='info'>array of email BCC: recipients</p></span>\n\t<span><b>ccRecipients</b><i>:array</i></span>\n\t\t<span class='info'>array of email CC: recipients</p></span>\n\t<span><b>html</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false</p></span>\n\t<span><b>messageBody</b><i>:string</i></span>\n\t\t<span class='info'>the email message body</p></span>\n\t<span><b>subject</b><i>:string</i></span>\n\t\t<span class='info'>the subject line for the email</p></span>\n\t<span><b>toRecipients</b><i>:array</i></span>\n\t\t<span class='info'>array of email recipients</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createEmailDialog","display":"(Method)\t\tTi.UI.createEmailDialog\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ImageView.html\">Titanium.UI.ImageView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createImageView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>animating</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly boolean to indicate if the animation is animating</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>canScale</b><i>:boolean</i></span>\n\t\t<span class='info'>allow image to scale (Android)</p></span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>defaultImage</b><i>:string</i></span>\n\t\t<span class='info'>url to the default image to display while loading a remote image</p></span>\n\t<span><b>duration</b><i>:float</i></span>\n\t\t<span class='info'>amount of time in milliseconds to animate one cycle</p></span>\n\t<span><b>enableZoomControls</b><i>:boolean</i></span>\n\t\t<span class='info'>enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)</p></span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>height of the image display</p></span>\n\t<span><b>image</b><i>:object</i></span>\n\t\t<span class='info'>image to display either as string url, Blob or File</p></span>\n\t<span><b>images</b><i>:array</i></span>\n\t\t<span class='info'>array of images (either as string url, Blob or File) to display in an animation</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>paused</b><i>:boolean</i></span>\n\t\t<span class='info'>readonly boolean to indicate if the animation is paused</p></span>\n\t<span><b>preventDefaultImage</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the default image should be displaying while loading a remote image</p></span>\n\t<span><b>repeatCount</b><i>:int</i></span>\n\t\t<span class='info'>number of times to repeat the image animation</p></span>\n\t<span><b>reverse</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the animation should happen in reverse (from last to first)</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to the image to display</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float</i></span>\n\t\t<span class='info'>width of the image display</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createImageView","display":"(Method)\t\tTi.UI.createImageView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Label.html\">Titanium.UI.Label</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createLabel</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>background image for the label</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundPaddingBottom</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the bottom</p></span>\n\t<span><b>backgroundPaddingLeft</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the left</p></span>\n\t<span><b>backgroundPaddingRight</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the right</p></span>\n\t<span><b>backgroundPaddingTop</b><i>:int</i></span>\n\t\t<span class='info'>the number of pixels to extend the background image past the label on the top</p></span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the color of the label</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the label font object properties</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>highlightedColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the label when in the highlighted state</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>minimumFontSize</b><i>:int</i></span>\n\t\t<span class='info'>the minimum font size if the label is auto-adjusting based on its contents</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>shadowColor</b><i>:string</i></span>\n\t\t<span class='info'>the text shadow color</p></span>\n\t<span><b>shadowOffset</b><i>:object</i></span>\n\t\t<span class='info'>the shadow offset as a dictionary with the properties <tt>x</tt> and <tt>y</tt></p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>text</b><i>:string</i></span>\n\t\t<span class='info'>the text of the label</p></span>\n\t<span><b>textAlign</b><i>:string,int</i></span>\n\t\t<span class='info'>the alignment constant or string value such as <tt>left</tt>, <tt>center</tt> or <tt>right</tt></p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createLabel","display":"(Method)\t\tTi.UI.createLabel\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.OptionDialog.html\">Titanium.UI.OptionDialog</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createOptionDialog</u></b><i>:object()</i><br>(\n{\n\t<span><b>cancel</b><i>:int</i></span>\n\t\t<span class='info'>an index to indicate which button should be the cancel button</p></span>\n\t<span><b>destructive</b><i>:int</i></span>\n\t\t<span class='info'>the destructive button (indicated by a visual clue in the UI)</p></span>\n\t<span><b>options</b><i>:array</i></span>\n\t\t<span class='info'>array of button names as strings</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the dialog</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createOptionDialog","display":"(Method)\t\tTi.UI.createOptionDialog\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Picker.html\">Titanium.UI.Picker</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createPicker</u></b><i>:object()</i><br>(\n{\n\t<span><b>columns</b><i>:array</i></span>\n\t\t<span class='info'>array of column values</p></span>\n\t<span><b>countDownDuration</b><i>:double</i></span>\n\t\t<span class='info'>the duration value in milliseconds for count down timer pickers</p></span>\n\t<span><b>locale</b><i>:string</i></span>\n\t\t<span class='info'>the locale used for displaying Date/Time pickers values</p></span>\n\t<span><b>maxDate</b><i>:date</i></span>\n\t\t<span class='info'>the maximum Date/Time for value for date pickers</p></span>\n\t<span><b>minDate</b><i>:date</i></span>\n\t\t<span class='info'>the minimum Date/Time for value for date pickers</p></span>\n\t<span><b>minuteInterval</b><i>:int</i></span>\n\t\t<span class='info'>property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.</p></span>\n\t<span><b>selectionIndicator</b><i>:boolean</i></span>\n\t\t<span class='info'>for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.</p></span>\n\t<span><b>type</b><i>:int</i></span>\n\t\t<span class='info'>the type constant for the picker. One of <a href=\"Titanium.UI.PICKER_TYPE_PLAIN.html\">Titanium.UI.PICKER_TYPE_PLAIN</a> (default), <a href=\"Titanium.UI.PICKER_TYPE_DATE_AND_TIME.html\">Titanium.UI.PICKER_TYPE_DATE_AND_TIME</a>, <a href=\"Titanium.UI.PICKER_TYPE_DATE.html\">Titanium.UI.PICKER_TYPE_DATE</a>, <a href=\"Titanium.UI.PICKER_TYPE_TIME.html\">Titanium.UI.PICKER_TYPE_TIME</a> or <a href=\"Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER.html\">Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER</a>.</p></span>\n\t<span><b>value</b><i>:date</i></span>\n\t\t<span class='info'>the Date/Time value for date pickers</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createPicker","display":"(Method)\t\tTi.UI.createPicker\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.PickerColumn.html\">Titanium.UI.PickerColumn</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createPickerColumn</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rowCount</b><i>:int</i></span>\n\t\t<span class='info'>number of rows in the column (readonly)</p></span>\n\t<span><b>rows</b><i>:array</i></span>\n\t\t<span class='info'>an array of rows</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createPickerColumn","display":"(Method)\t\tTi.UI.createPickerColumn\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.PickerRow.html\">Titanium.UI.PickerRow</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createPickerRow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>fontSize</b><i>:int</i></span>\n\t\t<span class='info'>the font size when displaying the text. ignored when using a custom view</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>selected</b><i>:boolean</i></span>\n\t\t<span class='info'>when used in the constructor, set the row to selected on initial display</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the display text</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createPickerRow","display":"(Method)\t\tTi.UI.createPickerRow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ProgressBar.html\">Titanium.UI.ProgressBar</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createProgressBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>the color of the progress bar text</p></span>\n\t<span><b>font</b><i>:object</i></span>\n\t\t<span class='info'>the font object for the progress bar text</p></span>\n\t<span><b>max</b><i>:float</i></span>\n\t\t<span class='info'>the maximum value of the progress bar</p></span>\n\t<span><b>message</b><i>:string</i></span>\n\t\t<span class='info'>the progress bar message</p></span>\n\t<span><b>min</b><i>:float</i></span>\n\t\t<span class='info'>the minimum value of the progress bar</p></span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style of the progress bar</p></span>\n\t<span><b>value</b><i>:float</i></span>\n\t\t<span class='info'>the current value of the progress bar</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createProgressBar","display":"(Method)\t\tTi.UI.createProgressBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ScrollView.html\">Titanium.UI.ScrollView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createScrollView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>contentHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height of the scrollable area</p></span>\n\t<span><b>contentOffset</b><i>:object</i></span>\n\t\t<span class='info'>an object (with x and y properties) to indicate the offset of the content area</p></span>\n\t<span><b>contentWidth</b><i>:float</i></span>\n\t\t<span class='info'>the width of the scrollable area</p></span>\n\t<span><b>disableBounce</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control bounce during scrolling</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>horizontalBounce</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the horizontal bounce during scrolling</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>maxZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the maximum scale of the content</p></span>\n\t<span><b>minZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the minimum scale of the content</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>scrollType</b><i>:string</i></span>\n\t\t<span class='info'>(Android only) the type of ScrollView: \"vertical\" or \"horizontal\"</p></span>\n\t<span><b>showHorizontalScrollIndicator</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the horizontal scroll indicator is visible</p></span>\n\t<span><b>showVerticalScrollIndicator</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the vertical scroll indicator is visible</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>verticalBounce</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the vertical bounce during scrolling</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n\t<span><b>zoomScale</b><i>:float</i></span>\n\t\t<span class='info'>set the zoom scale for the current content area</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createScrollView","display":"(Method)\t\tTi.UI.createScrollView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.ScrollableView.html\">Titanium.UI.ScrollableView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createScrollableView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>currentPage</b><i>:int</i></span>\n\t\t<span class='info'>the current page visible in the view</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>maxZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the maximum zoom scale for the view</p></span>\n\t<span><b>minZoomScale</b><i>:float</i></span>\n\t\t<span class='info'>the minimum zoom scale for the view</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>pagingControlColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the paging control. defaults to black.</p></span>\n\t<span><b>pagingControlHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height in pixels of the paging control, if visible. defaults to 20</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>showPagingControl</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate whether the paging control UI is visible</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>views</b><i>:array</i></span>\n\t\t<span class='info'>array of view objects to place in the view</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createScrollableView","display":"(Method)\t\tTi.UI.createScrollableView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.SearchBar.html\">Titanium.UI.SearchBar</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createSearchBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>autocapitalization</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the text in the field should be autocapitalized as typed</p></span>\n\t<span><b>autocorrect</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the text in the field should be autocorrected as typed</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>the bar color of the search bar view</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>hintText</b><i>:string</i></span>\n\t\t<span class='info'>the text to show when the search bar field is not focused</p></span>\n\t<span><b>keyboardType</b><i>:int</i></span>\n\t\t<span class='info'>the keyboard type constant to use when the field is focused</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>prompt</b><i>:string</i></span>\n\t\t<span class='info'>a single line of text displayed at the top of the search bar</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>showCancel</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicates whether the cancel button is displayed</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>the value of the search bar</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createSearchBar","display":"(Method)\t\tTi.UI.createSearchBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Slider.html\">Titanium.UI.Slider</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createSlider</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>disabledLeftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track when in the disabled state</p></span>\n\t<span><b>disabledRightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track when in the disabled state</p></span>\n\t<span><b>disabledThumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider thumb when in the disabled state</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate the enabled state of the slider</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>highlightedLeftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track when in the highlighted state</p></span>\n\t<span><b>highlightedRightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track when in the highlighted state</p></span>\n\t<span><b>highlightedThumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider thumb when in the highlighted state</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track</p></span>\n\t<span><b>max</b><i>:float</i></span>\n\t\t<span class='info'>the maximum slider value</p></span>\n\t<span><b>min</b><i>:float</i></span>\n\t\t<span class='info'>the minimum slider value</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track</p></span>\n\t<span><b>selectedLeftTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider left track when in the selected state</p></span>\n\t<span><b>selectedRightTrackImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider right track when in the selected state</p></span>\n\t<span><b>selectedThumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url of the slider thumb when in the selected state</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>thumbImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url to the slider thumb</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>the value of the slider</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createSlider","display":"(Method)\t\tTi.UI.createSlider\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Switch.html\">Titanium.UI.Switch</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createSwitch</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean for the state of the switch</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean value of the switch where true is the switch is <tt>on</tt> and false the switch if <tt>off</tt></p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createSwitch","display":"(Method)\t\tTi.UI.createSwitch\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Tab.html\">Titanium.UI.Tab</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTab</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>badge</b><i>:string</i></span>\n\t\t<span class='info'>the badge value for the tab group for this tab. null indicates no badge is value</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>icon</b><i>:string</i></span>\n\t\t<span class='info'>the icon url for the tab group for this tab</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title for the tab group for this tab</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>window</b><i>:object</i></span>\n\t\t<span class='info'>the root level tab window.  all tabs must have at least one root level tab window.</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTab","display":"(Method)\t\tTi.UI.createTab\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TabGroup.html\">Titanium.UI.TabGroup</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTabGroup</u></b><i>:object()</i><br>(\n{\n\t<span><b>activeTab</b><i>:object</i></span>\n\t\t<span class='info'>the active tab</p></span>\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>the bar color</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>tabs</b><i>:array</i></span>\n\t\t<span class='info'>array of tab objects that are managed by the tab group</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTabGroup","display":"(Method)\t\tTi.UI.createTabGroup\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TabbedBar.html\">Titanium.UI.TabbedBar</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTabbedBar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the tabbed bar</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>the selected index</p></span>\n\t<span><b>labels</b><i>:array</i></span>\n\t\t<span class='info'>the array of labels for the tabbed bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>the style of the tabbed bar</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTabbedBar","display":"(Method)\t\tTi.UI.createTabbedBar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TableView.html\">Titanium.UI.TableView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTableView</u></b><i>:object()</i><br>(\n{\n\t<span><b>allowsSelection</b><i>:boolean</i></span>\n\t\t<span class='info'>true if the rows can be selected</p></span>\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the table view</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image to render in the background of the table view</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>data</b><i>:array</i></span>\n\t\t<span class='info'>the data array of objects to be used for the rows of the table view</p></span>\n\t<span><b>editable</b><i>:boolean</i></span>\n\t\t<span class='info'>allow the table view to be editable (this must be true for swipe-to-delete)</p></span>\n\t<span><b>editing</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the editing state of the table view</p></span>\n\t<span><b>filterAttribute</b><i>:string</i></span>\n\t\t<span class='info'>the filter attribute to be used when searching. this property maps to your data object or a property on the row object</p></span>\n\t<span><b>filterCaseInsensitive</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the search should be case sensitive or case insensitive (default)</p></span>\n\t<span><b>footerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the table view footer title</p></span>\n\t<span><b>footerView</b><i>:object</i></span>\n\t\t<span class='info'>the table view footer as a view that will be rendered instead of a label</p></span>\n\t<span><b>headerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the table view header title</p></span>\n\t<span><b>headerView</b><i>:object</i></span>\n\t\t<span class='info'>the table view header as a view that will be rendered instead of a label</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>index</b><i>:array</i></span>\n\t\t<span class='info'>an array of objects (with title and index properties) to control the table view index</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>maxRowHeight</b><i>:float</i></span>\n\t\t<span class='info'>max row height for table view rows</p></span>\n\t<span><b>minRowHeight</b><i>:float</i></span>\n\t\t<span class='info'>min row height for table view rows</p></span>\n\t<span><b>moving</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the moveable state of the table view</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rowHeight</b><i>:float</i></span>\n\t\t<span class='info'>default row height for table view rows</p></span>\n\t<span><b>search</b><i>:object</i></span>\n\t\t<span class='info'>the search field to use for the table view</p></span>\n\t<span><b>searchHidden</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to control the visibility of the search field</p></span>\n\t<span><b>separatorColor</b><i>:string</i></span>\n\t\t<span class='info'>the separator color color as a hex or named value</p></span>\n\t<span><b>separatorStyle</b><i>:int</i></span>\n\t\t<span class='info'>the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>style</b><i>:int</i></span>\n\t\t<span class='info'>iPhone only. the style of the table view. constant from <a href=\"Titanium.UI.iPhone.TableViewStyle\">Titanium.UI.iPhone.TableViewStyle</a></p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTableView","display":"(Method)\t\tTi.UI.createTableView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TableViewRow.html\">Titanium.UI.TableViewRow</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTableViewRow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background cell color</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background cell image</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>className</b><i>:string</i></span>\n\t\t<span class='info'>the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.</p></span>\n\t<span><b>color</b><i>:string</i></span>\n\t\t<span class='info'>default color of the row when not selected</p></span>\n\t<span><b>hasCheck</b><i>:boolean</i></span>\n\t\t<span class='info'>render a system provided check mark in the right image area of the row cell</p></span>\n\t<span><b>hasChild</b><i>:boolean</i></span>\n\t\t<span class='info'>render a system provided right arrow in the right image area of the row cell</p></span>\n\t<span><b>hasDetail</b><i>:boolean</i></span>\n\t\t<span class='info'>render a system provided blue indicator icon in the right image area of the row cell</p></span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>the height of the row. specify <tt>auto</tt> to calculate the row height based on the size of the child views of the row</p></span>\n\t<span><b>indentionLevel</b><i>:int</i></span>\n\t\t<span class='info'>the indention level for the cell (defaults to 0)</p></span>\n\t<span><b>layout</b><i>:string</i></span>\n\t\t<span class='info'>the layout algorithm to use for the layout. either absolute (default) or vertical.</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftImage</b><i>:string</i></span>\n\t\t<span class='info'>image url to render in the left image area of the row cell</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightImage</b><i>:string</i></span>\n\t\t<span class='info'>image url to render in the right image area of the row cell</p></span>\n\t<span><b>selectedBackgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color to render when the row cell is selected</p></span>\n\t<span><b>selectedBackgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image to render when the row cell is selected</p></span>\n\t<span><b>selectedColor</b><i>:string</i></span>\n\t\t<span class='info'>color of the row during selection</p></span>\n\t<span><b>selectionStyle</b><i>:int</i></span>\n\t\t<span class='info'>a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title cell value. do not specify if using views as children of the row</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTableViewRow","display":"(Method)\t\tTi.UI.createTableViewRow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TableViewSection.html\">Titanium.UI.TableViewSection</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTableViewSection</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>footerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the title of the section footer</p></span>\n\t<span><b>footerView</b><i>:object</i></span>\n\t\t<span class='info'>a view to use instead of the default label when rendering the section footer</p></span>\n\t<span><b>headerTitle</b><i>:string</i></span>\n\t\t<span class='info'>the title of the section header</p></span>\n\t<span><b>headerView</b><i>:object</i></span>\n\t\t<span class='info'>a view to use instead of the default label when rendering the section header</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rowCount</b><i>:int</i></span>\n\t\t<span class='info'>the (readonly) number of rows in the section</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTableViewSection","display":"(Method)\t\tTi.UI.createTableViewSection\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TextArea.html\">Titanium.UI.TextArea</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTextArea</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>value of the background color of the field</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>editable</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating if the field is editable</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating the enabled state of the field</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>keyboardToolbar</b><i>:array</i></span>\n\t\t<span class='info'>array of toolbar button objects to be used when the keyboard is displayed</p></span>\n\t<span><b>keyboardToolbarColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the keyboard toolbar</p></span>\n\t<span><b>keyboardToolbarHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height of the keyboard toolbar</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>suppressReturn</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the return key should be suppressed during entry</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value of the field</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTextArea","display":"(Method)\t\tTi.UI.createTextArea\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.TextField.html\">Titanium.UI.TextField</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createTextField</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>value of the background color of the field</p></span>\n\t<span><b>backgroundDisabledImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url to the background image of the field when in the disabled state</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the image url to the background image of the field</p></span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderStyle</b><i>:int</i></span>\n\t\t<span class='info'>the border style constant for the field</p></span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>clearButtonMode</b><i>:int</i></span>\n\t\t<span class='info'>the mode constant for how to handle displaying the clear button</p></span>\n\t<span><b>clearOnEdit</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean that indicates if the value of the field is cleared upon editing</p></span>\n\t<span><b>editable</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating if the field is editable</p></span>\n\t<span><b>enabled</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating the enabled state of the field</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>hintText</b><i>:string</i></span>\n\t\t<span class='info'>the hint text to display when the field is unfocused</p></span>\n\t<span><b>keyboardToolbar</b><i>:array</i></span>\n\t\t<span class='info'>array of toolbar button objects to be used when the keyboard is displayed</p></span>\n\t<span><b>keyboardToolbarColor</b><i>:string</i></span>\n\t\t<span class='info'>the color of the keyboard toolbar</p></span>\n\t<span><b>keyboardToolbarHeight</b><i>:float</i></span>\n\t\t<span class='info'>the height of the keyboard toolbar</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftButton</b><i>:object</i></span>\n\t\t<span class='info'>the left button view</p></span>\n\t<span><b>leftButtonMode</b><i>:int</i></span>\n\t\t<span class='info'>the mode of the left button view</p></span>\n\t<span><b>leftButtonPadding</b><i>:float</i></span>\n\t\t<span class='info'>the left padding of the space between the button and the edge of the field</p></span>\n\t<span><b>minimumFontSize</b><i>:int</i></span>\n\t\t<span class='info'>the minimum size of the font when the font is sized based on the contents</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>paddingLeft</b><i>:float</i></span>\n\t\t<span class='info'>the left padding of the text field</p></span>\n\t<span><b>paddingRight</b><i>:float</i></span>\n\t\t<span class='info'>the right padding of the text field</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightButton</b><i>:object</i></span>\n\t\t<span class='info'>the right button view</p></span>\n\t<span><b>rightButtonMode</b><i>:int</i></span>\n\t\t<span class='info'>the mode of the right button view</p></span>\n\t<span><b>rightButtonPadding</b><i>:float</i></span>\n\t\t<span class='info'>the right padding of the space between the button and the edge of the field</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>suppressReturn</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the return key should be suppressed during entry</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>value</b><i>:string</i></span>\n\t\t<span class='info'>value of the field</p></span>\n\t<span><b>verticalAlign</b><i>:int,string</i></span>\n\t\t<span class='info'>the constant or string value for the fields vertical alignment.</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createTextField","display":"(Method)\t\tTi.UI.createTextField\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Toolbar.html\">Titanium.UI.Toolbar</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createToolbar</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createToolbar","display":"(Method)\t\tTi.UI.createToolbar\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.View.html\">Titanium.UI.View</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createView","display":"(Method)\t\tTi.UI.createView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.WebView.html\">Titanium.UI.WebView</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createWebView</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color for the webview</p></span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>data</b><i>:object</i></span>\n\t\t<span class='info'>a data blob or file that is used to load the web document</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>html</b><i>:string</i></span>\n\t\t<span class='info'>the html content of the web document</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>loading</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicating if the webview is loading content</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>scalesPageToFit</b><i>:boolean</i></span>\n\t\t<span class='info'>whether the webview should scale it's contents or not</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createWebView","display":"(Method)\t\tTi.UI.createWebView\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Window.html\">Titanium.UI.Window</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.createWindow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backButtonTitle</b><i>:string</i></span>\n\t\t<span class='info'>title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>backButtonTitleImage</b><i>:string</i></span>\n\t\t<span class='info'>url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>barColor</b><i>:string</i></span>\n\t\t<span class='info'>web named color or hex value for the color of the nav bar. only available in iPhone.</p></span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>fullscreen</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean indicates if the window is fullscreen (no device chrome)</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftNavButton</b><i>:object</i></span>\n\t\t<span class='info'>view to show in the left nav bar area. only available in iPhone.</p></span>\n\t<span><b>modal</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the window should be opened modal in front of other windows</p></span>\n\t<span><b>navBarHidden</b><i>:boolean</i></span>\n\t\t<span class='info'>for modal windows, hide the nav bar (true) or show the nav bar (false, default).</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>orientationModes</b><i>:array</i></span>\n\t\t<span class='info'>array of orientation mode constants defined in [Titanium.UI]</p></span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightNavButton</b><i>:object</i></span>\n\t\t<span class='info'>view to show in the right nav bar area. only available in iPhone.</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>tabBarHidden</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>title of the window.</p></span>\n\t<span><b>titleControl</b><i>:object</i></span>\n\t\t<span class='info'>view to show in the title area. only available in iPhone.</p></span>\n\t<span><b>titleImage</b><i>:string</i></span>\n\t\t<span class='info'>url to a image that show in the title area. only available in iPhone.</p></span>\n\t<span><b>titlePrompt</b><i>:string</i></span>\n\t\t<span class='info'>title prompt for the window. only available in iPhone.</p></span>\n\t<span><b>toolbar</b><i>:array</i></span>\n\t\t<span class='info'>array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>translucent</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the nav bar is translucent. only available in iPhone.</p></span>\n\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.</p></span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.createWindow","display":"(Method)\t\tTi.UI.createWindow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.fireEvent","display":"(Method)\t\tTi.UI.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.removeEventListener","display":"(Method)\t\tTi.UI.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Ti.UI.ANIMATION_CURVE_EASE_IN","display":"(Property)\tTi.UI.ANIMATION_CURVE_EASE_IN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Ti.UI.ANIMATION_CURVE_EASE_IN_OUT","display":"(Property)\tTi.UI.ANIMATION_CURVE_EASE_IN_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Ti.UI.ANIMATION_CURVE_EASE_OUT","display":"(Property)\tTi.UI.ANIMATION_CURVE_EASE_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>animation curve constant</p>","insert":"$0","match":"Ti.UI.ANIMATION_CURVE_LINEAR","display":"(Property)\tTi.UI.ANIMATION_CURVE_LINEAR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_CLEAR","display":"(Property)\tTi.UI.BLEND_MODE_CLEAR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_COLOR","display":"(Property)\tTi.UI.BLEND_MODE_COLOR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_COLOR_BURN","display":"(Property)\tTi.UI.BLEND_MODE_COLOR_BURN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_COLOR_DODGE","display":"(Property)\tTi.UI.BLEND_MODE_COLOR_DODGE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_COPY","display":"(Property)\tTi.UI.BLEND_MODE_COPY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_DARKEN","display":"(Property)\tTi.UI.BLEND_MODE_DARKEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_DESTINATION_ATOP","display":"(Property)\tTi.UI.BLEND_MODE_DESTINATION_ATOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_DESTINATION_IN","display":"(Property)\tTi.UI.BLEND_MODE_DESTINATION_IN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_DESTINATION_OUT","display":"(Property)\tTi.UI.BLEND_MODE_DESTINATION_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_DESTINATION_OVER","display":"(Property)\tTi.UI.BLEND_MODE_DESTINATION_OVER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_DIFFERENCE","display":"(Property)\tTi.UI.BLEND_MODE_DIFFERENCE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_EXCLUSION","display":"(Property)\tTi.UI.BLEND_MODE_EXCLUSION\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_HARD_LIGHT","display":"(Property)\tTi.UI.BLEND_MODE_HARD_LIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_HUE","display":"(Property)\tTi.UI.BLEND_MODE_HUE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_LIGHTEN","display":"(Property)\tTi.UI.BLEND_MODE_LIGHTEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_LUMINOSITY","display":"(Property)\tTi.UI.BLEND_MODE_LUMINOSITY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_MULTIPLY","display":"(Property)\tTi.UI.BLEND_MODE_MULTIPLY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_NORMAL","display":"(Property)\tTi.UI.BLEND_MODE_NORMAL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_OVERLAY","display":"(Property)\tTi.UI.BLEND_MODE_OVERLAY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_PLUS_DARKER","display":"(Property)\tTi.UI.BLEND_MODE_PLUS_DARKER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_PLUS_LIGHTER","display":"(Property)\tTi.UI.BLEND_MODE_PLUS_LIGHTER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_SATURATION","display":"(Property)\tTi.UI.BLEND_MODE_SATURATION\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_SCREEN","display":"(Property)\tTi.UI.BLEND_MODE_SCREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_SOFT_LIGHT","display":"(Property)\tTi.UI.BLEND_MODE_SOFT_LIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_SOURCE_ATOP","display":"(Property)\tTi.UI.BLEND_MODE_SOURCE_ATOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_SOURCE_IN","display":"(Property)\tTi.UI.BLEND_MODE_SOURCE_IN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_SOURCE_OUT","display":"(Property)\tTi.UI.BLEND_MODE_SOURCE_OUT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image mode constant</p>","insert":"$0","match":"Ti.UI.BLEND_MODE_XOR","display":"(Property)\tTi.UI.BLEND_MODE_XOR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.FACE_DOWN","display":"(Property)\tTi.UI.FACE_DOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.FACE_UP","display":"(Property)\tTi.UI.FACE_UP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Ti.UI.INPUT_BORDERSTYLE_BEZEL","display":"(Property)\tTi.UI.INPUT_BORDERSTYLE_BEZEL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Ti.UI.INPUT_BORDERSTYLE_LINE","display":"(Property)\tTi.UI.INPUT_BORDERSTYLE_LINE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Ti.UI.INPUT_BORDERSTYLE_NONE","display":"(Property)\tTi.UI.INPUT_BORDERSTYLE_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input border style constant</p>","insert":"$0","match":"Ti.UI.INPUT_BORDERSTYLE_ROUNDED","display":"(Property)\tTi.UI.INPUT_BORDERSTYLE_ROUNDED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Ti.UI.INPUT_BUTTONMODE_ALWAYS","display":"(Property)\tTi.UI.INPUT_BUTTONMODE_ALWAYS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Ti.UI.INPUT_BUTTONMODE_NEVER","display":"(Property)\tTi.UI.INPUT_BUTTONMODE_NEVER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Ti.UI.INPUT_BUTTONMODE_ONBLUR","display":"(Property)\tTi.UI.INPUT_BUTTONMODE_ONBLUR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>input button mode constant</p>","insert":"$0","match":"Ti.UI.INPUT_BUTTONMODE_ONFOCUS","display":"(Property)\tTi.UI.INPUT_BUTTONMODE_ONFOCUS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard appearance constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_APPEARANCE_ALERT","display":"(Property)\tTi.UI.KEYBOARD_APPEARANCE_ALERT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard appearance constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_APPEARANCE_DEFAULT","display":"(Property)\tTi.UI.KEYBOARD_APPEARANCE_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_ASCII","display":"(Property)\tTi.UI.KEYBOARD_ASCII\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_DEFAULT","display":"(Property)\tTi.UI.KEYBOARD_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_EMAIL","display":"(Property)\tTi.UI.KEYBOARD_EMAIL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_NAMEPHONE_PAD","display":"(Property)\tTi.UI.KEYBOARD_NAMEPHONE_PAD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION","display":"(Property)\tTi.UI.KEYBOARD_NUMBERS_PUNCTUATION\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_NUMBER_PAD","display":"(Property)\tTi.UI.KEYBOARD_NUMBER_PAD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_PHONE_PAD","display":"(Property)\tTi.UI.KEYBOARD_PHONE_PAD\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield keyboard constant</p>","insert":"$0","match":"Ti.UI.KEYBOARD_URL","display":"(Property)\tTi.UI.KEYBOARD_URL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.LANDSCAPE_LEFT","display":"(Property)\tTi.UI.LANDSCAPE_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.LANDSCAPE_RIGHT","display":"(Property)\tTi.UI.LANDSCAPE_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Ti.UI.PICKER_TYPE_COUNT_DOWN_TIMER","display":"(Property)\tTi.UI.PICKER_TYPE_COUNT_DOWN_TIMER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Ti.UI.PICKER_TYPE_DATE","display":"(Property)\tTi.UI.PICKER_TYPE_DATE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Ti.UI.PICKER_TYPE_DATE_AND_TIME","display":"(Property)\tTi.UI.PICKER_TYPE_DATE_AND_TIME\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Ti.UI.PICKER_TYPE_PLAIN","display":"(Property)\tTi.UI.PICKER_TYPE_PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>picker type constant</p>","insert":"$0","match":"Ti.UI.PICKER_TYPE_TIME","display":"(Property)\tTi.UI.PICKER_TYPE_TIME\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.PORTRAIT","display":"(Property)\tTi.UI.PORTRAIT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_DEFAULT","display":"(Property)\tTi.UI.RETURNKEY_DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_DONE","display":"(Property)\tTi.UI.RETURNKEY_DONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_EMERGENCY_CALL","display":"(Property)\tTi.UI.RETURNKEY_EMERGENCY_CALL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_GO","display":"(Property)\tTi.UI.RETURNKEY_GO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_GOOGLE","display":"(Property)\tTi.UI.RETURNKEY_GOOGLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_JOIN","display":"(Property)\tTi.UI.RETURNKEY_JOIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_NEXT","display":"(Property)\tTi.UI.RETURNKEY_NEXT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_ROUTE","display":"(Property)\tTi.UI.RETURNKEY_ROUTE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_SEARCH","display":"(Property)\tTi.UI.RETURNKEY_SEARCH\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_SEND","display":"(Property)\tTi.UI.RETURNKEY_SEND\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>textfield return key constant</p>","insert":"$0","match":"Ti.UI.RETURNKEY_YAHOO","display":"(Property)\tTi.UI.RETURNKEY_YAHOO\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text align constant</p>","insert":"$0","match":"Ti.UI.TEXT_ALIGNMENT_CENTER","display":"(Property)\tTi.UI.TEXT_ALIGNMENT_CENTER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text align constant</p>","insert":"$0","match":"Ti.UI.TEXT_ALIGNMENT_LEFT","display":"(Property)\tTi.UI.TEXT_ALIGNMENT_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text align constant</p>","insert":"$0","match":"Ti.UI.TEXT_ALIGNMENT_RIGHT","display":"(Property)\tTi.UI.TEXT_ALIGNMENT_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Ti.UI.TEXT_AUTOCAPITALIZATION_ALL","display":"(Property)\tTi.UI.TEXT_AUTOCAPITALIZATION_ALL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Ti.UI.TEXT_AUTOCAPITALIZATION_NONE","display":"(Property)\tTi.UI.TEXT_AUTOCAPITALIZATION_NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Ti.UI.TEXT_AUTOCAPITALIZATION_SENTENCES","display":"(Property)\tTi.UI.TEXT_AUTOCAPITALIZATION_SENTENCES\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text capitalization constant</p>","insert":"$0","match":"Ti.UI.TEXT_AUTOCAPITALIZATION_WORDS","display":"(Property)\tTi.UI.TEXT_AUTOCAPITALIZATION_WORDS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text vertical align constant</p>","insert":"$0","match":"Ti.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM","display":"(Property)\tTi.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text vertical align constant</p>","insert":"$0","match":"Ti.UI.TEXT_VERTICAL_ALIGNMENT_CENTER","display":"(Property)\tTi.UI.TEXT_VERTICAL_ALIGNMENT_CENTER\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>text vertical align constant</p>","insert":"$0","match":"Ti.UI.TEXT_VERTICAL_ALIGNMENT_TOP","display":"(Property)\tTi.UI.TEXT_VERTICAL_ALIGNMENT_TOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.UNKNOWN","display":"(Property)\tTi.UI.UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>orientation constant</p>","insert":"$0","match":"Ti.UI.UPSIDE_PORTRAIT","display":"(Property)\tTi.UI.UPSIDE_PORTRAIT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The 2DMatrix is created by <a href=\"Titanium.UI.create2DMatrix.html\">Titanium.UI.create2DMatrix</a>.  The 2D Matrix is an object for holding values for an affine transformation matrix. A 2D matrix is used to rotate, scale, translate, or skew the objects in a two-dimensional space. A 2D matrix is represented by a 3 by 3 matrix. Because the third column is always (0,0,1), the data structure contains values for only the first two columns.</p><hr /><p>You create an <tt>identity matrix</tt> by creating a 2D Matrix with an empty constructor.</p>","insert":"$0","match":"Titanium.UI.2DMatrix","display":"(Namespace)\tTitanium.UI.2DMatrix","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.2DMatrix.addEventListener","display":"(Method)\t\tTitanium.UI.2DMatrix.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.2DMatrix.fireEvent","display":"(Method)\t\tTitanium.UI.2DMatrix.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.2DMatrix.invert","display":"(Method)\t\tTitanium.UI.2DMatrix.invert\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by combining two existing matrix.</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.multiply</u></b><i>:object()</i><br>(\n\t\t<span><b>t2</b><i>:object</i></span>\n\t\t<span class='info'>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.2DMatrix.multiply","display":"(Method)\t\tTitanium.UI.2DMatrix.multiply\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.2DMatrix.removeEventListener","display":"(Method)\t\tTitanium.UI.2DMatrix.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by rotating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.rotate</u></b><i>:object()</i><br>(\n\t\t<span><b>angle</b><i>:float</i></span>\n\t\t<span class='info'>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</span>\n)\n</code>","insert":"(${1:${2:angle}})","match":"Titanium.UI.2DMatrix.rotate","display":"(Method)\t\tTitanium.UI.2DMatrix.rotate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by scaling an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.scale</u></b><i>:object()</i><br>(\n\t\t<span><b>sx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale x values of the matrix</span>\n\t\t<span><b>sy</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale y values of the matrix</span>\n)\n</code>","insert":"(${1:${2:sx}, ${3:sy}})","match":"Titanium.UI.2DMatrix.scale","display":"(Method)\t\tTitanium.UI.2DMatrix.scale\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by translating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.2DMatrix.translate</u></b><i>:object()</i><br>(\n\t\t<span><b>tx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move x values with the matrix</span>\n\t\t<span><b>ty</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move y values with the matrix</span>\n)\n</code>","insert":"(${1:${2:tx}, ${3:ty}})","match":"Titanium.UI.2DMatrix.translate","display":"(Method)\t\tTitanium.UI.2DMatrix.translate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.2DMatrix.a","display":"(Property)\tTitanium.UI.2DMatrix.a\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.2DMatrix.b","display":"(Property)\tTitanium.UI.2DMatrix.b\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.2DMatrix.c","display":"(Property)\tTitanium.UI.2DMatrix.c\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.2DMatrix.d","display":"(Property)\tTitanium.UI.2DMatrix.d\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.2DMatrix.tx","display":"(Property)\tTitanium.UI.2DMatrix.tx\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.2DMatrix.ty","display":"(Property)\tTitanium.UI.2DMatrix.ty\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The 2DMatrix is created by <a href=\"Titanium.UI.create2DMatrix.html\">Titanium.UI.create2DMatrix</a>.  The 2D Matrix is an object for holding values for an affine transformation matrix. A 2D matrix is used to rotate, scale, translate, or skew the objects in a two-dimensional space. A 2D matrix is represented by a 3 by 3 matrix. Because the third column is always (0,0,1), the data structure contains values for only the first two columns.</p><hr /><p>You create an <tt>identity matrix</tt> by creating a 2D Matrix with an empty constructor.</p>","insert":"$0","match":"Ti.UI.2DMatrix","display":"(Namespace)\tTi.UI.2DMatrix","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.2DMatrix.addEventListener","display":"(Method)\t\tTi.UI.2DMatrix.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.2DMatrix.fireEvent","display":"(Method)\t\tTi.UI.2DMatrix.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.2DMatrix.invert","display":"(Method)\t\tTi.UI.2DMatrix.invert\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by combining two existing matrix.</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.multiply</u></b><i>:object()</i><br>(\n\t\t<span><b>t2</b><i>:object</i></span>\n\t\t<span class='info'>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.2DMatrix.multiply","display":"(Method)\t\tTi.UI.2DMatrix.multiply\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.2DMatrix.removeEventListener","display":"(Method)\t\tTi.UI.2DMatrix.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by rotating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.rotate</u></b><i>:object()</i><br>(\n\t\t<span><b>angle</b><i>:float</i></span>\n\t\t<span class='info'>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</span>\n)\n</code>","insert":"(${1:${2:angle}})","match":"Ti.UI.2DMatrix.rotate","display":"(Method)\t\tTi.UI.2DMatrix.rotate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by scaling an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.scale</u></b><i>:object()</i><br>(\n\t\t<span><b>sx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale x values of the matrix</span>\n\t\t<span><b>sy</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale y values of the matrix</span>\n)\n</code>","insert":"(${1:${2:sx}, ${3:sy}})","match":"Ti.UI.2DMatrix.scale","display":"(Method)\t\tTi.UI.2DMatrix.scale\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by translating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.2DMatrix.translate</u></b><i>:object()</i><br>(\n\t\t<span><b>tx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move x values with the matrix</span>\n\t\t<span><b>ty</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move y values with the matrix</span>\n)\n</code>","insert":"(${1:${2:tx}, ${3:ty}})","match":"Ti.UI.2DMatrix.translate","display":"(Method)\t\tTi.UI.2DMatrix.translate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.2DMatrix.a","display":"(Property)\tTi.UI.2DMatrix.a\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.2DMatrix.b","display":"(Property)\tTi.UI.2DMatrix.b\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.2DMatrix.c","display":"(Property)\tTi.UI.2DMatrix.c\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.2DMatrix.d","display":"(Property)\tTi.UI.2DMatrix.d\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.2DMatrix.tx","display":"(Property)\tTi.UI.2DMatrix.tx\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.2DMatrix.ty","display":"(Property)\tTi.UI.2DMatrix.ty\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The 2DMatrix is created by <a href=\"Titanium.UI.create2DMatrix.html\">Titanium.UI.create2DMatrix</a>.  The 2D Matrix is an object for holding values for an affine transformation matrix. A 2D matrix is used to rotate, scale, translate, or skew the objects in a three-dimensional space. A 3D matrix is represented by a 4 by 4 matrix. Because the forth column is always (0,0,1), the data structure contains values for only the first three columns.</p><hr /><p>You create an <tt>identity matrix</tt> by creating a 3D Matrix with an empty constructor.</p>","insert":"$0","match":"Titanium.UI.3DMatrix","display":"(Namespace)\tTitanium.UI.3DMatrix","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.3DMatrix.addEventListener","display":"(Method)\t\tTitanium.UI.3DMatrix.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.3DMatrix.fireEvent","display":"(Method)\t\tTitanium.UI.3DMatrix.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.3DMatrix.invert","display":"(Method)\t\tTitanium.UI.3DMatrix.invert\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by combining two existing matrix.</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.multiply</u></b><i>:object()</i><br>(\n\t\t<span><b>t2</b><i>:object</i></span>\n\t\t<span class='info'>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.3DMatrix.multiply","display":"(Method)\t\tTitanium.UI.3DMatrix.multiply\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.3DMatrix.removeEventListener","display":"(Method)\t\tTitanium.UI.3DMatrix.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by rotating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.rotate</u></b><i>:object()</i><br>(\n\t\t<span><b>angle</b><i>:float</i></span>\n\t\t<span class='info'>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</span>\n\t\t<span><b>x</b><i>:float</i></span>\n\t\t<span class='info'>The x part of the vector about which to rotate</span>\n\t\t<span><b>y</b><i>:float</i></span>\n\t\t<span class='info'>The y part of the vector about which to rotate</span>\n\t\t<span><b>z</b><i>:float</i></span>\n\t\t<span class='info'>The z part of the vector about which to rotate</span>\n)\n</code>","insert":"(${1:${2:angle}, ${3:x}, ${4:y}, ${5:z}})","match":"Titanium.UI.3DMatrix.rotate","display":"(Method)\t\tTitanium.UI.3DMatrix.rotate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by scaling an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.scale</u></b><i>:object()</i><br>(\n\t\t<span><b>sx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale x values of the matrix</span>\n\t\t<span><b>sy</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale y values of the matrix</span>\n\t\t<span><b>sz</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale z values of the matrix</span>\n)\n</code>","insert":"(${1:${2:sx}, ${3:sy}, ${4:sz}})","match":"Titanium.UI.3DMatrix.scale","display":"(Method)\t\tTitanium.UI.3DMatrix.scale\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by translating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.3DMatrix.translate</u></b><i>:object()</i><br>(\n\t\t<span><b>tx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move x values with the matrix</span>\n\t\t<span><b>ty</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move y values with the matrix</span>\n\t\t<span><b>tz</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move z values with the matrix</span>\n)\n</code>","insert":"(${1:${2:tx}, ${3:ty}, ${4:tz}})","match":"Titanium.UI.3DMatrix.translate","display":"(Method)\t\tTitanium.UI.3DMatrix.translate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m11","display":"(Property)\tTitanium.UI.3DMatrix.m11\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m12","display":"(Property)\tTitanium.UI.3DMatrix.m12\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,3] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m13","display":"(Property)\tTitanium.UI.3DMatrix.m13\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,4] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m14","display":"(Property)\tTitanium.UI.3DMatrix.m14\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m21","display":"(Property)\tTitanium.UI.3DMatrix.m21\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m22","display":"(Property)\tTitanium.UI.3DMatrix.m22\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,3] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m23","display":"(Property)\tTitanium.UI.3DMatrix.m23\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,4] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m24","display":"(Property)\tTitanium.UI.3DMatrix.m24\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m31","display":"(Property)\tTitanium.UI.3DMatrix.m31\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m32","display":"(Property)\tTitanium.UI.3DMatrix.m32\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,3] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m33","display":"(Property)\tTitanium.UI.3DMatrix.m33\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,4] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m34","display":"(Property)\tTitanium.UI.3DMatrix.m34\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,1] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m41","display":"(Property)\tTitanium.UI.3DMatrix.m41\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,2] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m42","display":"(Property)\tTitanium.UI.3DMatrix.m42\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,3] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m43","display":"(Property)\tTitanium.UI.3DMatrix.m43\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,4] in the matrix.</p>","insert":"$0","match":"Titanium.UI.3DMatrix.m44","display":"(Property)\tTitanium.UI.3DMatrix.m44\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The 2DMatrix is created by <a href=\"Titanium.UI.create2DMatrix.html\">Titanium.UI.create2DMatrix</a>.  The 2D Matrix is an object for holding values for an affine transformation matrix. A 2D matrix is used to rotate, scale, translate, or skew the objects in a three-dimensional space. A 3D matrix is represented by a 4 by 4 matrix. Because the forth column is always (0,0,1), the data structure contains values for only the first three columns.</p><hr /><p>You create an <tt>identity matrix</tt> by creating a 3D Matrix with an empty constructor.</p>","insert":"$0","match":"Ti.UI.3DMatrix","display":"(Namespace)\tTi.UI.3DMatrix","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.3DMatrix.addEventListener","display":"(Method)\t\tTi.UI.3DMatrix.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.3DMatrix.fireEvent","display":"(Method)\t\tTi.UI.3DMatrix.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.3DMatrix.invert","display":"(Method)\t\tTi.UI.3DMatrix.invert\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by combining two existing matrix.</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.multiply</u></b><i>:object()</i><br>(\n\t\t<span><b>t2</b><i>:object</i></span>\n\t\t<span class='info'>The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.3DMatrix.multiply","display":"(Method)\t\tTi.UI.3DMatrix.multiply\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.3DMatrix.removeEventListener","display":"(Method)\t\tTi.UI.3DMatrix.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by rotating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.rotate</u></b><i>:object()</i><br>(\n\t\t<span><b>angle</b><i>:float</i></span>\n\t\t<span class='info'>The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.</span>\n\t\t<span><b>x</b><i>:float</i></span>\n\t\t<span class='info'>The x part of the vector about which to rotate</span>\n\t\t<span><b>y</b><i>:float</i></span>\n\t\t<span class='info'>The y part of the vector about which to rotate</span>\n\t\t<span><b>z</b><i>:float</i></span>\n\t\t<span class='info'>The z part of the vector about which to rotate</span>\n)\n</code>","insert":"(${1:${2:angle}, ${3:x}, ${4:y}, ${5:z}})","match":"Ti.UI.3DMatrix.rotate","display":"(Method)\t\tTi.UI.3DMatrix.rotate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by scaling an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.scale</u></b><i>:object()</i><br>(\n\t\t<span><b>sx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale x values of the matrix</span>\n\t\t<span><b>sy</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale y values of the matrix</span>\n\t\t<span><b>sz</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to scale z values of the matrix</span>\n)\n</code>","insert":"(${1:${2:sx}, ${3:sy}, ${4:sz}})","match":"Ti.UI.3DMatrix.scale","display":"(Method)\t\tTi.UI.3DMatrix.scale\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>Returns a matrix constructed by translating an existing matrix</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.3DMatrix.translate</u></b><i>:object()</i><br>(\n\t\t<span><b>tx</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move x values with the matrix</span>\n\t\t<span><b>ty</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move y values with the matrix</span>\n\t\t<span><b>tz</b><i>:float</i></span>\n\t\t<span class='info'>The value by which to move z values with the matrix</span>\n)\n</code>","insert":"(${1:${2:tx}, ${3:ty}, ${4:tz}})","match":"Ti.UI.3DMatrix.translate","display":"(Method)\t\tTi.UI.3DMatrix.translate\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m11","display":"(Property)\tTi.UI.3DMatrix.m11\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m12","display":"(Property)\tTi.UI.3DMatrix.m12\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,3] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m13","display":"(Property)\tTi.UI.3DMatrix.m13\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [1,4] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m14","display":"(Property)\tTi.UI.3DMatrix.m14\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m21","display":"(Property)\tTi.UI.3DMatrix.m21\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m22","display":"(Property)\tTi.UI.3DMatrix.m22\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,3] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m23","display":"(Property)\tTi.UI.3DMatrix.m23\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [2,4] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m24","display":"(Property)\tTi.UI.3DMatrix.m24\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m31","display":"(Property)\tTi.UI.3DMatrix.m31\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m32","display":"(Property)\tTi.UI.3DMatrix.m32\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,3] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m33","display":"(Property)\tTi.UI.3DMatrix.m33\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [3,4] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m34","display":"(Property)\tTi.UI.3DMatrix.m34\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,1] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m41","display":"(Property)\tTi.UI.3DMatrix.m41\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,2] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m42","display":"(Property)\tTi.UI.3DMatrix.m42\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,3] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m43","display":"(Property)\tTi.UI.3DMatrix.m43\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The entry at position [4,4] in the matrix.</p>","insert":"$0","match":"Ti.UI.3DMatrix.m44","display":"(Property)\tTi.UI.3DMatrix.m44\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An Activity Indicator is created by the method <a href=\"Titanium.UI.createActivityIndicator.html\">Titanium.UI.createActivityIndicator</a>.  An activity indicator can be used to show the progress of an operation in the UI to let the user know some action is taking place.</p><hr /><p>For iPhone, the style can be set from the constants <a href=\"Titanium.UI.iPhone.ActivityIndicatorStyle.html\">Titanium.UI.iPhone.ActivityIndicatorStyle</a>.</p>","insert":"$0","match":"Titanium.UI.ActivityIndicator","display":"(Namespace)\tTitanium.UI.ActivityIndicator","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ActivityIndicator.hide","display":"(Method)\t\tTitanium.UI.ActivityIndicator.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ActivityIndicator.show","display":"(Method)\t\tTitanium.UI.ActivityIndicator.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the color of the message label</p>","insert":"$0","match":"Titanium.UI.ActivityIndicator.color","display":"(Property)\tTitanium.UI.ActivityIndicator.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font object for the activity message label</p>","insert":"$0","match":"Titanium.UI.ActivityIndicator.font","display":"(Property)\tTitanium.UI.ActivityIndicator.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the activity message label text</p>","insert":"$0","match":"Titanium.UI.ActivityIndicator.message","display":"(Property)\tTitanium.UI.ActivityIndicator.message\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style constant of the activity indicator</p>","insert":"$0","match":"Titanium.UI.ActivityIndicator.style","display":"(Property)\tTitanium.UI.ActivityIndicator.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An Activity Indicator is created by the method <a href=\"Titanium.UI.createActivityIndicator.html\">Titanium.UI.createActivityIndicator</a>.  An activity indicator can be used to show the progress of an operation in the UI to let the user know some action is taking place.</p><hr /><p>For iPhone, the style can be set from the constants <a href=\"Titanium.UI.iPhone.ActivityIndicatorStyle.html\">Titanium.UI.iPhone.ActivityIndicatorStyle</a>.</p>","insert":"$0","match":"Ti.UI.ActivityIndicator","display":"(Namespace)\tTi.UI.ActivityIndicator","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ActivityIndicator.hide","display":"(Method)\t\tTi.UI.ActivityIndicator.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ActivityIndicator.show","display":"(Method)\t\tTi.UI.ActivityIndicator.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the color of the message label</p>","insert":"$0","match":"Ti.UI.ActivityIndicator.color","display":"(Property)\tTi.UI.ActivityIndicator.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font object for the activity message label</p>","insert":"$0","match":"Ti.UI.ActivityIndicator.font","display":"(Property)\tTi.UI.ActivityIndicator.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the activity message label text</p>","insert":"$0","match":"Ti.UI.ActivityIndicator.message","display":"(Property)\tTi.UI.ActivityIndicator.message\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style constant of the activity indicator</p>","insert":"$0","match":"Ti.UI.ActivityIndicator.style","display":"(Property)\tTi.UI.ActivityIndicator.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Alert Dialog is created by <a href=\"Titanium.UI.createAlertDialog.html\">Titanium.UI.createAlertDialog</a> and allows you to show a modal application dialog.</p><hr /><p>the global method <tt>alert</tt> is aliased to this object and can be invoked with a single message. For example:</p>\n<pre><code>alert(\"this is a message\");\n</code></pre>\n\n<p>Note: you should be careful not to call alert more than once while a pending alert is visible.</p>","insert":"$0","match":"Titanium.UI.AlertDialog","display":"(Namespace)\tTitanium.UI.AlertDialog","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.AlertDialog.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.AlertDialog.addEventListener","display":"(Method)\t\tTitanium.UI.AlertDialog.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.AlertDialog.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.AlertDialog.fireEvent","display":"(Method)\t\tTitanium.UI.AlertDialog.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.AlertDialog.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.AlertDialog.removeEventListener","display":"(Method)\t\tTitanium.UI.AlertDialog.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.AlertDialog.show","display":"(Method)\t\tTitanium.UI.AlertDialog.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>array of button names as strings</p>","insert":"$0","match":"Titanium.UI.AlertDialog.buttonNames","display":"(Property)\tTitanium.UI.AlertDialog.buttonNames\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an index to indicate which button should be the cancel button.</p>","insert":"$0","match":"Titanium.UI.AlertDialog.cancel","display":"(Property)\tTitanium.UI.AlertDialog.cancel\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the message of the dialog</p>","insert":"$0","match":"Titanium.UI.AlertDialog.message","display":"(Property)\tTitanium.UI.AlertDialog.message\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the dialog</p>","insert":"$0","match":"Titanium.UI.AlertDialog.title","display":"(Property)\tTitanium.UI.AlertDialog.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Alert Dialog is created by <a href=\"Titanium.UI.createAlertDialog.html\">Titanium.UI.createAlertDialog</a> and allows you to show a modal application dialog.</p><hr /><p>the global method <tt>alert</tt> is aliased to this object and can be invoked with a single message. For example:</p>\n<pre><code>alert(\"this is a message\");\n</code></pre>\n\n<p>Note: you should be careful not to call alert more than once while a pending alert is visible.</p>","insert":"$0","match":"Ti.UI.AlertDialog","display":"(Namespace)\tTi.UI.AlertDialog","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.AlertDialog.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.AlertDialog.addEventListener","display":"(Method)\t\tTi.UI.AlertDialog.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.AlertDialog.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.AlertDialog.fireEvent","display":"(Method)\t\tTi.UI.AlertDialog.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.AlertDialog.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.AlertDialog.removeEventListener","display":"(Method)\t\tTi.UI.AlertDialog.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.AlertDialog.show","display":"(Method)\t\tTi.UI.AlertDialog.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>array of button names as strings</p>","insert":"$0","match":"Ti.UI.AlertDialog.buttonNames","display":"(Property)\tTi.UI.AlertDialog.buttonNames\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an index to indicate which button should be the cancel button.</p>","insert":"$0","match":"Ti.UI.AlertDialog.cancel","display":"(Property)\tTi.UI.AlertDialog.cancel\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the message of the dialog</p>","insert":"$0","match":"Ti.UI.AlertDialog.message","display":"(Property)\tTi.UI.AlertDialog.message\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the dialog</p>","insert":"$0","match":"Ti.UI.AlertDialog.title","display":"(Property)\tTi.UI.AlertDialog.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Android specific UI capabilities. All properties, methods and events in this namespace will only work on Android related devices.</p><hr />","insert":"$0","match":"Titanium.UI.Android","display":"(Namespace)\tTitanium.UI.Android","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.addEventListener","display":"(Method)\t\tTitanium.UI.Android.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Android.fireEvent","display":"(Method)\t\tTitanium.UI.Android.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.removeEventListener","display":"(Method)\t\tTitanium.UI.Android.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The Android specific UI capabilities. All properties, methods and events in this namespace will only work on Android related devices.</p><hr />","insert":"$0","match":"Ti.UI.Android","display":"(Namespace)\tTi.UI.Android","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.addEventListener","display":"(Method)\t\tTi.UI.Android.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Android.fireEvent","display":"(Method)\t\tTi.UI.Android.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.removeEventListener","display":"(Method)\t\tTi.UI.Android.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The menu that appears at the lower portion of the display when the device's <em>Menu</em> button is pressed.</p><hr />","insert":"$0","match":"Titanium.UI.Android.OptionMenu","display":"(Namespace)\tTitanium.UI.Android.OptionMenu","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.addEventListener","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Android.OptionMenu.Menu.html\">Titanium.UI.Android.OptionMenu.Menu</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.createMenu</u></b><i>:object()</i><br>(\n{\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.createMenu","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.createMenu\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Android.OptionMenu.MenuItem.html\">Titanium.UI.Android.OptionMenu.MenuItem</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.createMenuItem</u></b><i>:object()</i><br>(\n{\n\t<span><b>icon</b><i>:string</i></span>\n\t\t<span class='info'>the path to the image to display on the menu option</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the text for the menu option</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.createMenuItem","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.createMenuItem\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.fireEvent","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.removeEventListener","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The <a href=\"Titanium.UI.Android.OptionMenu.Menu-object.html\">Titanium.UI.Android.OptionMenu.Menu</a> for this context.</p>","insert":"$0","match":"Titanium.UI.Android.OptionMenu.menu","display":"(Property)\tTitanium.UI.Android.OptionMenu.menu\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The menu that appears at the lower portion of the display when the device's <em>Menu</em> button is pressed.</p><hr />","insert":"$0","match":"Ti.UI.Android.OptionMenu","display":"(Namespace)\tTi.UI.Android.OptionMenu","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.OptionMenu.addEventListener","display":"(Method)\t\tTi.UI.Android.OptionMenu.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Android.OptionMenu.Menu.html\">Titanium.UI.Android.OptionMenu.Menu</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.createMenu</u></b><i>:object()</i><br>(\n{\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Android.OptionMenu.createMenu","display":"(Method)\t\tTi.UI.Android.OptionMenu.createMenu\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.Android.OptionMenu.MenuItem.html\">Titanium.UI.Android.OptionMenu.MenuItem</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.createMenuItem</u></b><i>:object()</i><br>(\n{\n\t<span><b>icon</b><i>:string</i></span>\n\t\t<span class='info'>the path to the image to display on the menu option</p></span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the text for the menu option</p></span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Android.OptionMenu.createMenuItem","display":"(Method)\t\tTi.UI.Android.OptionMenu.createMenuItem\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Android.OptionMenu.fireEvent","display":"(Method)\t\tTi.UI.Android.OptionMenu.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.OptionMenu.removeEventListener","display":"(Method)\t\tTi.UI.Android.OptionMenu.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The <a href=\"Titanium.UI.Android.OptionMenu.Menu-object.html\">Titanium.UI.Android.OptionMenu.Menu</a> for this context.</p>","insert":"$0","match":"Ti.UI.Android.OptionMenu.menu","display":"(Property)\tTi.UI.Android.OptionMenu.menu\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Menu allows you to provide a selection of options that appear when the <strong>menu</strong> button is pressed on device. The Menu is created by the method <a href=\"Titanium.UI.Android.OptionMenu.createMenu.html\">Titanium.UI.Android.OptionMenu.createMenu</a></p><hr />","insert":"$0","match":"Titanium.UI.Android.OptionMenu.Menu","display":"(Namespace)\tTitanium.UI.Android.OptionMenu.Menu","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a menu item. Items will be displayed in the menu based on insertion order.</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.Menu.add</u></b><i>:void()</i><br>(\n\t\t<span><b>menuitem</b><i>:object</i></span>\n\t\t<span class='info'>the menu item to add. Must be a Titanium.UI.Android.OptionMenu.MenuItem</a>.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.Menu.add","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.Menu.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.Menu.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.Menu.addEventListener","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.Menu.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.Menu.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.Menu.fireEvent","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.Menu.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.Menu.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.Menu.removeEventListener","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.Menu.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>A Menu allows you to provide a selection of options that appear when the <strong>menu</strong> button is pressed on device. The Menu is created by the method <a href=\"Titanium.UI.Android.OptionMenu.createMenu.html\">Titanium.UI.Android.OptionMenu.createMenu</a></p><hr />","insert":"$0","match":"Ti.UI.Android.OptionMenu.Menu","display":"(Namespace)\tTi.UI.Android.OptionMenu.Menu","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a menu item. Items will be displayed in the menu based on insertion order.</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.Menu.add</u></b><i>:void()</i><br>(\n\t\t<span><b>menuitem</b><i>:object</i></span>\n\t\t<span class='info'>the menu item to add. Must be a Titanium.UI.Android.OptionMenu.MenuItem</a>.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Android.OptionMenu.Menu.add","display":"(Method)\t\tTi.UI.Android.OptionMenu.Menu.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.Menu.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.OptionMenu.Menu.addEventListener","display":"(Method)\t\tTi.UI.Android.OptionMenu.Menu.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.Menu.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Android.OptionMenu.Menu.fireEvent","display":"(Method)\t\tTi.UI.Android.OptionMenu.Menu.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.Menu.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.OptionMenu.Menu.removeEventListener","display":"(Method)\t\tTi.UI.Android.OptionMenu.Menu.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>A MenuItem allows you provide a selectable option with a graphic and titel. The Menu Item is created by the method <a href=\"Titanium.UI.Android.OptionMenu.createMenuItem.html\">Titanium.UI.Android.OptionMenu.createMenuItem</a></p><hr />","insert":"$0","match":"Titanium.UI.Android.OptionMenu.MenuItem","display":"(Namespace)\tTitanium.UI.Android.OptionMenu.MenuItem","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.MenuItem.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.MenuItem.addEventListener","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.MenuItem.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.MenuItem.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.MenuItem.fireEvent","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.MenuItem.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Android.OptionMenu.MenuItem.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Android.OptionMenu.MenuItem.removeEventListener","display":"(Method)\t\tTitanium.UI.Android.OptionMenu.MenuItem.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the path to the image to display on the menu option</p>","insert":"$0","match":"Titanium.UI.Android.OptionMenu.MenuItem.icon","display":"(Property)\tTitanium.UI.Android.OptionMenu.MenuItem.icon\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text for the menu option</p>","insert":"$0","match":"Titanium.UI.Android.OptionMenu.MenuItem.title","display":"(Property)\tTitanium.UI.Android.OptionMenu.MenuItem.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A MenuItem allows you provide a selectable option with a graphic and titel. The Menu Item is created by the method <a href=\"Titanium.UI.Android.OptionMenu.createMenuItem.html\">Titanium.UI.Android.OptionMenu.createMenuItem</a></p><hr />","insert":"$0","match":"Ti.UI.Android.OptionMenu.MenuItem","display":"(Namespace)\tTi.UI.Android.OptionMenu.MenuItem","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.MenuItem.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.OptionMenu.MenuItem.addEventListener","display":"(Method)\t\tTi.UI.Android.OptionMenu.MenuItem.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.MenuItem.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Android.OptionMenu.MenuItem.fireEvent","display":"(Method)\t\tTi.UI.Android.OptionMenu.MenuItem.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Android.OptionMenu.MenuItem.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Android.OptionMenu.MenuItem.removeEventListener","display":"(Method)\t\tTi.UI.Android.OptionMenu.MenuItem.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the path to the image to display on the menu option</p>","insert":"$0","match":"Ti.UI.Android.OptionMenu.MenuItem.icon","display":"(Property)\tTi.UI.Android.OptionMenu.MenuItem.icon\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text for the menu option</p>","insert":"$0","match":"Ti.UI.Android.OptionMenu.MenuItem.title","display":"(Property)\tTi.UI.Android.OptionMenu.MenuItem.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Animation object is used for specifying lower-level animation properties and more low-level control of events during an animation. The Animation is created by the method <a href=\"Titanium.UI.createAnimation.html\">Titanium.UI.createAnimation</a>.</p><hr />","insert":"$0","match":"Titanium.UI.Animation","display":"(Namespace)\tTitanium.UI.Animation","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Animation.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Animation.addEventListener","display":"(Method)\t\tTitanium.UI.Animation.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Animation.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Animation.fireEvent","display":"(Method)\t\tTitanium.UI.Animation.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Animation.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Animation.removeEventListener","display":"(Method)\t\tTitanium.UI.Animation.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the property specifies if the animation should be replayed in reverse upon completion</p>","insert":"$0","match":"Titanium.UI.Animation.autoreverse","display":"(Property)\tTitanium.UI.Animation.autoreverse\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the backgroundColor property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.backgroundColor","display":"(Property)\tTitanium.UI.Animation.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the bottom property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.bottom","display":"(Property)\tTitanium.UI.Animation.bottom\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the center property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.center","display":"(Property)\tTitanium.UI.Animation.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the color property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.color","display":"(Property)\tTitanium.UI.Animation.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the curve of the animation</p>","insert":"$0","match":"Titanium.UI.Animation.curve","display":"(Property)\tTitanium.UI.Animation.curve\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration of time in milliseconds before starting the animation</p>","insert":"$0","match":"Titanium.UI.Animation.delay","display":"(Property)\tTitanium.UI.Animation.delay\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration of time in milliseconds to perform the animation</p>","insert":"$0","match":"Titanium.UI.Animation.duration","display":"(Property)\tTitanium.UI.Animation.duration\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the height property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.height","display":"(Property)\tTitanium.UI.Animation.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the left property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.left","display":"(Property)\tTitanium.UI.Animation.left\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the opacity property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.opacity","display":"(Property)\tTitanium.UI.Animation.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the opaque property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.opaque","display":"(Property)\tTitanium.UI.Animation.opaque\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of times the animation should be performed</p>","insert":"$0","match":"Titanium.UI.Animation.repeat","display":"(Property)\tTitanium.UI.Animation.repeat\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the right property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.right","display":"(Property)\tTitanium.UI.Animation.right\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the top property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.top","display":"(Property)\tTitanium.UI.Animation.top\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the transform property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.transform","display":"(Property)\tTitanium.UI.Animation.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>during a transition animation, this is the constant to the type of transition to use</p>","insert":"$0","match":"Titanium.UI.Animation.transition","display":"(Property)\tTitanium.UI.Animation.transition\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the visible property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.visible","display":"(Property)\tTitanium.UI.Animation.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the width property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.width","display":"(Property)\tTitanium.UI.Animation.width\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the zIndex property to change during animation</p>","insert":"$0","match":"Titanium.UI.Animation.zIndex","display":"(Property)\tTitanium.UI.Animation.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Animation object is used for specifying lower-level animation properties and more low-level control of events during an animation. The Animation is created by the method <a href=\"Titanium.UI.createAnimation.html\">Titanium.UI.createAnimation</a>.</p><hr />","insert":"$0","match":"Ti.UI.Animation","display":"(Namespace)\tTi.UI.Animation","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Animation.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Animation.addEventListener","display":"(Method)\t\tTi.UI.Animation.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Animation.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Animation.fireEvent","display":"(Method)\t\tTi.UI.Animation.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Animation.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Animation.removeEventListener","display":"(Method)\t\tTi.UI.Animation.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the property specifies if the animation should be replayed in reverse upon completion</p>","insert":"$0","match":"Ti.UI.Animation.autoreverse","display":"(Property)\tTi.UI.Animation.autoreverse\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the backgroundColor property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.backgroundColor","display":"(Property)\tTi.UI.Animation.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the bottom property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.bottom","display":"(Property)\tTi.UI.Animation.bottom\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the center property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.center","display":"(Property)\tTi.UI.Animation.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the color property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.color","display":"(Property)\tTi.UI.Animation.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the curve of the animation</p>","insert":"$0","match":"Ti.UI.Animation.curve","display":"(Property)\tTi.UI.Animation.curve\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration of time in milliseconds before starting the animation</p>","insert":"$0","match":"Ti.UI.Animation.delay","display":"(Property)\tTi.UI.Animation.delay\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration of time in milliseconds to perform the animation</p>","insert":"$0","match":"Ti.UI.Animation.duration","display":"(Property)\tTi.UI.Animation.duration\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the height property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.height","display":"(Property)\tTi.UI.Animation.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the left property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.left","display":"(Property)\tTi.UI.Animation.left\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the opacity property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.opacity","display":"(Property)\tTi.UI.Animation.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the opaque property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.opaque","display":"(Property)\tTi.UI.Animation.opaque\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of times the animation should be performed</p>","insert":"$0","match":"Ti.UI.Animation.repeat","display":"(Property)\tTi.UI.Animation.repeat\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the right property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.right","display":"(Property)\tTi.UI.Animation.right\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the top property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.top","display":"(Property)\tTi.UI.Animation.top\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the transform property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.transform","display":"(Property)\tTi.UI.Animation.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>during a transition animation, this is the constant to the type of transition to use</p>","insert":"$0","match":"Ti.UI.Animation.transition","display":"(Property)\tTi.UI.Animation.transition\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the visible property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.visible","display":"(Property)\tTi.UI.Animation.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the width property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.width","display":"(Property)\tTi.UI.Animation.width\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the zIndex property to change during animation</p>","insert":"$0","match":"Ti.UI.Animation.zIndex","display":"(Property)\tTi.UI.Animation.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Button is created by the method <a href=\"Titanium.UI.createButton.html\">Titanium.UI.createButton</a>.</p><hr />","insert":"$0","match":"Titanium.UI.Button","display":"(Namespace)\tTitanium.UI.Button","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Button.add","display":"(Method)\t\tTitanium.UI.Button.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Button.addEventListener","display":"(Method)\t\tTitanium.UI.Button.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Button.animate","display":"(Method)\t\tTitanium.UI.Button.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Button.fireEvent","display":"(Method)\t\tTitanium.UI.Button.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Button.hide","display":"(Method)\t\tTitanium.UI.Button.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Button.remove","display":"(Method)\t\tTitanium.UI.Button.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Button.removeEventListener","display":"(Method)\t\tTitanium.UI.Button.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Button.show","display":"(Method)\t\tTitanium.UI.Button.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Button.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Button.toImage","display":"(Method)\t\tTitanium.UI.Button.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Button.anchorPoint","display":"(Property)\tTitanium.UI.Button.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Button.animatedCenterPoint","display":"(Property)\tTitanium.UI.Button.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the buttons background color</p>","insert":"$0","match":"Titanium.UI.Button.backgroundColor","display":"(Property)\tTitanium.UI.Button.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a button image that is drawn as the background of the button when the button is in the disabled state</p>","insert":"$0","match":"Titanium.UI.Button.backgroundDisabledImage","display":"(Property)\tTitanium.UI.Button.backgroundDisabledImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Button.backgroundGradient","display":"(Property)\tTitanium.UI.Button.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a button image that is drawn as the background of the button</p>","insert":"$0","match":"Titanium.UI.Button.backgroundImage","display":"(Property)\tTitanium.UI.Button.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Button.backgroundLeftCap","display":"(Property)\tTitanium.UI.Button.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a button image that is drawn as the background of the button when the button is in the selected state</p>","insert":"$0","match":"Titanium.UI.Button.backgroundSelectedImage","display":"(Property)\tTitanium.UI.Button.backgroundSelectedImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Button.backgroundTopCap","display":"(Property)\tTitanium.UI.Button.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Button.borderColor","display":"(Property)\tTitanium.UI.Button.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Button.borderRadius","display":"(Property)\tTitanium.UI.Button.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Button.borderWidth","display":"(Property)\tTitanium.UI.Button.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Button.bottom","display":"(Property)\tTitanium.UI.Button.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Button.center","display":"(Property)\tTitanium.UI.Button.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the foreground color of the button text</p>","insert":"$0","match":"Titanium.UI.Button.color","display":"(Property)\tTitanium.UI.Button.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean that indicates if the button is enabled or not</p>","insert":"$0","match":"Titanium.UI.Button.enabled","display":"(Property)\tTitanium.UI.Button.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font properties of the button</p>","insert":"$0","match":"Titanium.UI.Button.font","display":"(Property)\tTitanium.UI.Button.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Button.height","display":"(Property)\tTitanium.UI.Button.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image to display on the button to the left of the title</p>","insert":"$0","match":"Titanium.UI.Button.image","display":"(Property)\tTitanium.UI.Button.image\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Button.left","display":"(Property)\tTitanium.UI.Button.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Button.opacity","display":"(Property)\tTitanium.UI.Button.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Button.right","display":"(Property)\tTitanium.UI.Button.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the selected color of the button text when the button is in the selected state</p>","insert":"$0","match":"Titanium.UI.Button.selectedColor","display":"(Property)\tTitanium.UI.Button.selectedColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Button.size","display":"(Property)\tTitanium.UI.Button.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>style constant for the type of button</p>","insert":"$0","match":"Titanium.UI.Button.style","display":"(Property)\tTitanium.UI.Button.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>button title</p>","insert":"$0","match":"Titanium.UI.Button.title","display":"(Property)\tTitanium.UI.Button.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Button.top","display":"(Property)\tTitanium.UI.Button.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Button.touchEnabled","display":"(Property)\tTitanium.UI.Button.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Button.transform","display":"(Property)\tTitanium.UI.Button.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Button.visible","display":"(Property)\tTitanium.UI.Button.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Button.width","display":"(Property)\tTitanium.UI.Button.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Button.zIndex","display":"(Property)\tTitanium.UI.Button.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Button is created by the method <a href=\"Titanium.UI.createButton.html\">Titanium.UI.createButton</a>.</p><hr />","insert":"$0","match":"Ti.UI.Button","display":"(Namespace)\tTi.UI.Button","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Button.add","display":"(Method)\t\tTi.UI.Button.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Button.addEventListener","display":"(Method)\t\tTi.UI.Button.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Button.animate","display":"(Method)\t\tTi.UI.Button.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Button.fireEvent","display":"(Method)\t\tTi.UI.Button.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Button.hide","display":"(Method)\t\tTi.UI.Button.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Button.remove","display":"(Method)\t\tTi.UI.Button.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Button.removeEventListener","display":"(Method)\t\tTi.UI.Button.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Button.show","display":"(Method)\t\tTi.UI.Button.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Button.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Button.toImage","display":"(Method)\t\tTi.UI.Button.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Button.anchorPoint","display":"(Property)\tTi.UI.Button.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Button.animatedCenterPoint","display":"(Property)\tTi.UI.Button.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the buttons background color</p>","insert":"$0","match":"Ti.UI.Button.backgroundColor","display":"(Property)\tTi.UI.Button.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a button image that is drawn as the background of the button when the button is in the disabled state</p>","insert":"$0","match":"Ti.UI.Button.backgroundDisabledImage","display":"(Property)\tTi.UI.Button.backgroundDisabledImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Button.backgroundGradient","display":"(Property)\tTi.UI.Button.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a button image that is drawn as the background of the button</p>","insert":"$0","match":"Ti.UI.Button.backgroundImage","display":"(Property)\tTi.UI.Button.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Button.backgroundLeftCap","display":"(Property)\tTi.UI.Button.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a button image that is drawn as the background of the button when the button is in the selected state</p>","insert":"$0","match":"Ti.UI.Button.backgroundSelectedImage","display":"(Property)\tTi.UI.Button.backgroundSelectedImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Button.backgroundTopCap","display":"(Property)\tTi.UI.Button.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Button.borderColor","display":"(Property)\tTi.UI.Button.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Button.borderRadius","display":"(Property)\tTi.UI.Button.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Button.borderWidth","display":"(Property)\tTi.UI.Button.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Button.bottom","display":"(Property)\tTi.UI.Button.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Button.center","display":"(Property)\tTi.UI.Button.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the foreground color of the button text</p>","insert":"$0","match":"Ti.UI.Button.color","display":"(Property)\tTi.UI.Button.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean that indicates if the button is enabled or not</p>","insert":"$0","match":"Ti.UI.Button.enabled","display":"(Property)\tTi.UI.Button.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font properties of the button</p>","insert":"$0","match":"Ti.UI.Button.font","display":"(Property)\tTi.UI.Button.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Button.height","display":"(Property)\tTi.UI.Button.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image to display on the button to the left of the title</p>","insert":"$0","match":"Ti.UI.Button.image","display":"(Property)\tTi.UI.Button.image\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Button.left","display":"(Property)\tTi.UI.Button.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Button.opacity","display":"(Property)\tTi.UI.Button.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Button.right","display":"(Property)\tTi.UI.Button.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the selected color of the button text when the button is in the selected state</p>","insert":"$0","match":"Ti.UI.Button.selectedColor","display":"(Property)\tTi.UI.Button.selectedColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Button.size","display":"(Property)\tTi.UI.Button.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>style constant for the type of button</p>","insert":"$0","match":"Ti.UI.Button.style","display":"(Property)\tTi.UI.Button.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>button title</p>","insert":"$0","match":"Ti.UI.Button.title","display":"(Property)\tTi.UI.Button.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Button.top","display":"(Property)\tTi.UI.Button.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Button.touchEnabled","display":"(Property)\tTi.UI.Button.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Button.transform","display":"(Property)\tTi.UI.Button.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Button.visible","display":"(Property)\tTi.UI.Button.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Button.width","display":"(Property)\tTi.UI.Button.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Button.zIndex","display":"(Property)\tTi.UI.Button.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Button Bar is created by the method <a href=\"Titanium.UI.createButtonBar.html\">Titanium.UI.createButtonBar</a>.</p><hr /><p>For iPhone, the style constants are available in the constants defined in <a href=\"Titanium.UI.iPhone.SystemButtonStyle\">Titanium.UI.iPhone.SystemButtonStyle</a>.</p>","insert":"$0","match":"Titanium.UI.ButtonBar","display":"(Namespace)\tTitanium.UI.ButtonBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ButtonBar.add","display":"(Method)\t\tTitanium.UI.ButtonBar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ButtonBar.addEventListener","display":"(Method)\t\tTitanium.UI.ButtonBar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ButtonBar.animate","display":"(Method)\t\tTitanium.UI.ButtonBar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.ButtonBar.fireEvent","display":"(Method)\t\tTitanium.UI.ButtonBar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ButtonBar.hide","display":"(Method)\t\tTitanium.UI.ButtonBar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ButtonBar.remove","display":"(Method)\t\tTitanium.UI.ButtonBar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ButtonBar.removeEventListener","display":"(Method)\t\tTitanium.UI.ButtonBar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ButtonBar.show","display":"(Method)\t\tTitanium.UI.ButtonBar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ButtonBar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.ButtonBar.toImage","display":"(Method)\t\tTitanium.UI.ButtonBar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.ButtonBar.anchorPoint","display":"(Property)\tTitanium.UI.ButtonBar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.ButtonBar.animatedCenterPoint","display":"(Property)\tTitanium.UI.ButtonBar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color of the button bar</p>","insert":"$0","match":"Titanium.UI.ButtonBar.backgroundColor","display":"(Property)\tTitanium.UI.ButtonBar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.ButtonBar.backgroundGradient","display":"(Property)\tTitanium.UI.ButtonBar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.ButtonBar.backgroundImage","display":"(Property)\tTitanium.UI.ButtonBar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.ButtonBar.backgroundLeftCap","display":"(Property)\tTitanium.UI.ButtonBar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.ButtonBar.backgroundTopCap","display":"(Property)\tTitanium.UI.ButtonBar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.ButtonBar.borderColor","display":"(Property)\tTitanium.UI.ButtonBar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.ButtonBar.borderRadius","display":"(Property)\tTitanium.UI.ButtonBar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.ButtonBar.borderWidth","display":"(Property)\tTitanium.UI.ButtonBar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ButtonBar.bottom","display":"(Property)\tTitanium.UI.ButtonBar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.ButtonBar.center","display":"(Property)\tTitanium.UI.ButtonBar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.ButtonBar.height","display":"(Property)\tTitanium.UI.ButtonBar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the selected index</p>","insert":"$0","match":"Titanium.UI.ButtonBar.index","display":"(Property)\tTitanium.UI.ButtonBar.index\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the array of labels for the button bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p>","insert":"$0","match":"Titanium.UI.ButtonBar.labels","display":"(Property)\tTitanium.UI.ButtonBar.labels\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ButtonBar.left","display":"(Property)\tTitanium.UI.ButtonBar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.ButtonBar.opacity","display":"(Property)\tTitanium.UI.ButtonBar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ButtonBar.right","display":"(Property)\tTitanium.UI.ButtonBar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.ButtonBar.size","display":"(Property)\tTitanium.UI.ButtonBar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style of the button bar</p>","insert":"$0","match":"Titanium.UI.ButtonBar.style","display":"(Property)\tTitanium.UI.ButtonBar.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ButtonBar.top","display":"(Property)\tTitanium.UI.ButtonBar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.ButtonBar.touchEnabled","display":"(Property)\tTitanium.UI.ButtonBar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.ButtonBar.transform","display":"(Property)\tTitanium.UI.ButtonBar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.ButtonBar.visible","display":"(Property)\tTitanium.UI.ButtonBar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ButtonBar.width","display":"(Property)\tTitanium.UI.ButtonBar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.ButtonBar.zIndex","display":"(Property)\tTitanium.UI.ButtonBar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Button Bar is created by the method <a href=\"Titanium.UI.createButtonBar.html\">Titanium.UI.createButtonBar</a>.</p><hr /><p>For iPhone, the style constants are available in the constants defined in <a href=\"Titanium.UI.iPhone.SystemButtonStyle\">Titanium.UI.iPhone.SystemButtonStyle</a>.</p>","insert":"$0","match":"Ti.UI.ButtonBar","display":"(Namespace)\tTi.UI.ButtonBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ButtonBar.add","display":"(Method)\t\tTi.UI.ButtonBar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ButtonBar.addEventListener","display":"(Method)\t\tTi.UI.ButtonBar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ButtonBar.animate","display":"(Method)\t\tTi.UI.ButtonBar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.ButtonBar.fireEvent","display":"(Method)\t\tTi.UI.ButtonBar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ButtonBar.hide","display":"(Method)\t\tTi.UI.ButtonBar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ButtonBar.remove","display":"(Method)\t\tTi.UI.ButtonBar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ButtonBar.removeEventListener","display":"(Method)\t\tTi.UI.ButtonBar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ButtonBar.show","display":"(Method)\t\tTi.UI.ButtonBar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ButtonBar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.ButtonBar.toImage","display":"(Method)\t\tTi.UI.ButtonBar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.ButtonBar.anchorPoint","display":"(Property)\tTi.UI.ButtonBar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.ButtonBar.animatedCenterPoint","display":"(Property)\tTi.UI.ButtonBar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color of the button bar</p>","insert":"$0","match":"Ti.UI.ButtonBar.backgroundColor","display":"(Property)\tTi.UI.ButtonBar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.ButtonBar.backgroundGradient","display":"(Property)\tTi.UI.ButtonBar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.ButtonBar.backgroundImage","display":"(Property)\tTi.UI.ButtonBar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.ButtonBar.backgroundLeftCap","display":"(Property)\tTi.UI.ButtonBar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.ButtonBar.backgroundTopCap","display":"(Property)\tTi.UI.ButtonBar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.ButtonBar.borderColor","display":"(Property)\tTi.UI.ButtonBar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.ButtonBar.borderRadius","display":"(Property)\tTi.UI.ButtonBar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.ButtonBar.borderWidth","display":"(Property)\tTi.UI.ButtonBar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ButtonBar.bottom","display":"(Property)\tTi.UI.ButtonBar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.ButtonBar.center","display":"(Property)\tTi.UI.ButtonBar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.ButtonBar.height","display":"(Property)\tTi.UI.ButtonBar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the selected index</p>","insert":"$0","match":"Ti.UI.ButtonBar.index","display":"(Property)\tTi.UI.ButtonBar.index\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the array of labels for the button bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p>","insert":"$0","match":"Ti.UI.ButtonBar.labels","display":"(Property)\tTi.UI.ButtonBar.labels\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ButtonBar.left","display":"(Property)\tTi.UI.ButtonBar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.ButtonBar.opacity","display":"(Property)\tTi.UI.ButtonBar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ButtonBar.right","display":"(Property)\tTi.UI.ButtonBar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.ButtonBar.size","display":"(Property)\tTi.UI.ButtonBar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style of the button bar</p>","insert":"$0","match":"Ti.UI.ButtonBar.style","display":"(Property)\tTi.UI.ButtonBar.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ButtonBar.top","display":"(Property)\tTi.UI.ButtonBar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.ButtonBar.touchEnabled","display":"(Property)\tTi.UI.ButtonBar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.ButtonBar.transform","display":"(Property)\tTi.UI.ButtonBar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.ButtonBar.visible","display":"(Property)\tTi.UI.ButtonBar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.ButtonBar.width","display":"(Property)\tTi.UI.ButtonBar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.ButtonBar.zIndex","display":"(Property)\tTi.UI.ButtonBar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Cover Flow view is container for showing  animated, three dimensional images in a nice UI. The Cover Flow view is created by the method <a href=\"Titanium.UI.createCoverFlowView.html\">Titanium.UI.createCoverFlowView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.CoverFlowView","display":"(Namespace)\tTitanium.UI.CoverFlowView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.CoverFlowView.add","display":"(Method)\t\tTitanium.UI.CoverFlowView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.CoverFlowView.addEventListener","display":"(Method)\t\tTitanium.UI.CoverFlowView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.CoverFlowView.animate","display":"(Method)\t\tTitanium.UI.CoverFlowView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.CoverFlowView.fireEvent","display":"(Method)\t\tTitanium.UI.CoverFlowView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.CoverFlowView.hide","display":"(Method)\t\tTitanium.UI.CoverFlowView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.CoverFlowView.remove","display":"(Method)\t\tTitanium.UI.CoverFlowView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.CoverFlowView.removeEventListener","display":"(Method)\t\tTitanium.UI.CoverFlowView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change an image for a index</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.setURL</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index to change</span>\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to the new image</span>\n)\n</code>","insert":"(${1:${2:index}, '${0:url}'})","match":"Titanium.UI.CoverFlowView.setURL","display":"(Method)\t\tTitanium.UI.CoverFlowView.setURL\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.CoverFlowView.show","display":"(Method)\t\tTitanium.UI.CoverFlowView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.CoverFlowView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.CoverFlowView.toImage","display":"(Method)\t\tTitanium.UI.CoverFlowView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.CoverFlowView.anchorPoint","display":"(Property)\tTitanium.UI.CoverFlowView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.CoverFlowView.animatedCenterPoint","display":"(Property)\tTitanium.UI.CoverFlowView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.CoverFlowView.backgroundColor","display":"(Property)\tTitanium.UI.CoverFlowView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.CoverFlowView.backgroundGradient","display":"(Property)\tTitanium.UI.CoverFlowView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.CoverFlowView.backgroundImage","display":"(Property)\tTitanium.UI.CoverFlowView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.CoverFlowView.backgroundLeftCap","display":"(Property)\tTitanium.UI.CoverFlowView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.CoverFlowView.backgroundTopCap","display":"(Property)\tTitanium.UI.CoverFlowView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.CoverFlowView.borderColor","display":"(Property)\tTitanium.UI.CoverFlowView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.CoverFlowView.borderRadius","display":"(Property)\tTitanium.UI.CoverFlowView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.CoverFlowView.borderWidth","display":"(Property)\tTitanium.UI.CoverFlowView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.CoverFlowView.bottom","display":"(Property)\tTitanium.UI.CoverFlowView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.CoverFlowView.center","display":"(Property)\tTitanium.UI.CoverFlowView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.CoverFlowView.height","display":"(Property)\tTitanium.UI.CoverFlowView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of images to display in the view</p>","insert":"$0","match":"Titanium.UI.CoverFlowView.images","display":"(Property)\tTitanium.UI.CoverFlowView.images\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.CoverFlowView.left","display":"(Property)\tTitanium.UI.CoverFlowView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.CoverFlowView.opacity","display":"(Property)\tTitanium.UI.CoverFlowView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.CoverFlowView.right","display":"(Property)\tTitanium.UI.CoverFlowView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>index to make selected</p>","insert":"$0","match":"Titanium.UI.CoverFlowView.selected","display":"(Property)\tTitanium.UI.CoverFlowView.selected\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.CoverFlowView.size","display":"(Property)\tTitanium.UI.CoverFlowView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.CoverFlowView.top","display":"(Property)\tTitanium.UI.CoverFlowView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.CoverFlowView.touchEnabled","display":"(Property)\tTitanium.UI.CoverFlowView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.CoverFlowView.transform","display":"(Property)\tTitanium.UI.CoverFlowView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.CoverFlowView.visible","display":"(Property)\tTitanium.UI.CoverFlowView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.CoverFlowView.width","display":"(Property)\tTitanium.UI.CoverFlowView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.CoverFlowView.zIndex","display":"(Property)\tTitanium.UI.CoverFlowView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Cover Flow view is container for showing  animated, three dimensional images in a nice UI. The Cover Flow view is created by the method <a href=\"Titanium.UI.createCoverFlowView.html\">Titanium.UI.createCoverFlowView</a>.</p><hr />","insert":"$0","match":"Ti.UI.CoverFlowView","display":"(Namespace)\tTi.UI.CoverFlowView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.CoverFlowView.add","display":"(Method)\t\tTi.UI.CoverFlowView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.CoverFlowView.addEventListener","display":"(Method)\t\tTi.UI.CoverFlowView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.CoverFlowView.animate","display":"(Method)\t\tTi.UI.CoverFlowView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.CoverFlowView.fireEvent","display":"(Method)\t\tTi.UI.CoverFlowView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.CoverFlowView.hide","display":"(Method)\t\tTi.UI.CoverFlowView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.CoverFlowView.remove","display":"(Method)\t\tTi.UI.CoverFlowView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.CoverFlowView.removeEventListener","display":"(Method)\t\tTi.UI.CoverFlowView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change an image for a index</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.setURL</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index to change</span>\n\t\t<span><b>url</b><i>:string</i></span>\n\t\t<span class='info'>url to the new image</span>\n)\n</code>","insert":"(${1:${2:index}, '${0:url}'})","match":"Ti.UI.CoverFlowView.setURL","display":"(Method)\t\tTi.UI.CoverFlowView.setURL\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.CoverFlowView.show","display":"(Method)\t\tTi.UI.CoverFlowView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.CoverFlowView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.CoverFlowView.toImage","display":"(Method)\t\tTi.UI.CoverFlowView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.CoverFlowView.anchorPoint","display":"(Property)\tTi.UI.CoverFlowView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.CoverFlowView.animatedCenterPoint","display":"(Property)\tTi.UI.CoverFlowView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.CoverFlowView.backgroundColor","display":"(Property)\tTi.UI.CoverFlowView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.CoverFlowView.backgroundGradient","display":"(Property)\tTi.UI.CoverFlowView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.CoverFlowView.backgroundImage","display":"(Property)\tTi.UI.CoverFlowView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.CoverFlowView.backgroundLeftCap","display":"(Property)\tTi.UI.CoverFlowView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.CoverFlowView.backgroundTopCap","display":"(Property)\tTi.UI.CoverFlowView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.CoverFlowView.borderColor","display":"(Property)\tTi.UI.CoverFlowView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.CoverFlowView.borderRadius","display":"(Property)\tTi.UI.CoverFlowView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.CoverFlowView.borderWidth","display":"(Property)\tTi.UI.CoverFlowView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.CoverFlowView.bottom","display":"(Property)\tTi.UI.CoverFlowView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.CoverFlowView.center","display":"(Property)\tTi.UI.CoverFlowView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.CoverFlowView.height","display":"(Property)\tTi.UI.CoverFlowView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of images to display in the view</p>","insert":"$0","match":"Ti.UI.CoverFlowView.images","display":"(Property)\tTi.UI.CoverFlowView.images\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.CoverFlowView.left","display":"(Property)\tTi.UI.CoverFlowView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.CoverFlowView.opacity","display":"(Property)\tTi.UI.CoverFlowView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.CoverFlowView.right","display":"(Property)\tTi.UI.CoverFlowView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>index to make selected</p>","insert":"$0","match":"Ti.UI.CoverFlowView.selected","display":"(Property)\tTi.UI.CoverFlowView.selected\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.CoverFlowView.size","display":"(Property)\tTi.UI.CoverFlowView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.CoverFlowView.top","display":"(Property)\tTi.UI.CoverFlowView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.CoverFlowView.touchEnabled","display":"(Property)\tTi.UI.CoverFlowView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.CoverFlowView.transform","display":"(Property)\tTi.UI.CoverFlowView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.CoverFlowView.visible","display":"(Property)\tTi.UI.CoverFlowView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.CoverFlowView.width","display":"(Property)\tTi.UI.CoverFlowView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.CoverFlowView.zIndex","display":"(Property)\tTi.UI.CoverFlowView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An item that represents a visual icon in the <a href=\"Titanium.UI.DashboardView.html\">Titanium.UI.DashboardView</a>. The Dashboard Item is created by the method <a href=\"Titanium.UI.createDashboardItem.html\">Titanium.UI.createDashboardItem</a>.</p><hr />","insert":"$0","match":"Titanium.UI.DashboardItem","display":"(Namespace)\tTitanium.UI.DashboardItem","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardItem.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.DashboardItem.addEventListener","display":"(Method)\t\tTitanium.UI.DashboardItem.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardItem.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.DashboardItem.fireEvent","display":"(Method)\t\tTitanium.UI.DashboardItem.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardItem.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.DashboardItem.removeEventListener","display":"(Method)\t\tTitanium.UI.DashboardItem.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the badge value or <tt>0</tt> to remove the badge</p>","insert":"$0","match":"Titanium.UI.DashboardItem.badge","display":"(Property)\tTitanium.UI.DashboardItem.badge\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a boolean to indicate if this item can be deleted when it edit mode</p>","insert":"$0","match":"Titanium.UI.DashboardItem.canDelete","display":"(Property)\tTitanium.UI.DashboardItem.canDelete\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the URL to the image</p>","insert":"$0","match":"Titanium.UI.DashboardItem.image","display":"(Property)\tTitanium.UI.DashboardItem.image\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the URL to the image to display when the item is depressed (clicked)</p>","insert":"$0","match":"Titanium.UI.DashboardItem.selectedImage","display":"(Property)\tTitanium.UI.DashboardItem.selectedImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An item that represents a visual icon in the <a href=\"Titanium.UI.DashboardView.html\">Titanium.UI.DashboardView</a>. The Dashboard Item is created by the method <a href=\"Titanium.UI.createDashboardItem.html\">Titanium.UI.createDashboardItem</a>.</p><hr />","insert":"$0","match":"Ti.UI.DashboardItem","display":"(Namespace)\tTi.UI.DashboardItem","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardItem.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.DashboardItem.addEventListener","display":"(Method)\t\tTi.UI.DashboardItem.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardItem.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.DashboardItem.fireEvent","display":"(Method)\t\tTi.UI.DashboardItem.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardItem.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.DashboardItem.removeEventListener","display":"(Method)\t\tTi.UI.DashboardItem.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the badge value or <tt>0</tt> to remove the badge</p>","insert":"$0","match":"Ti.UI.DashboardItem.badge","display":"(Property)\tTi.UI.DashboardItem.badge\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a boolean to indicate if this item can be deleted when it edit mode</p>","insert":"$0","match":"Ti.UI.DashboardItem.canDelete","display":"(Property)\tTi.UI.DashboardItem.canDelete\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the URL to the image</p>","insert":"$0","match":"Ti.UI.DashboardItem.image","display":"(Property)\tTi.UI.DashboardItem.image\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the URL to the image to display when the item is depressed (clicked)</p>","insert":"$0","match":"Ti.UI.DashboardItem.selectedImage","display":"(Property)\tTi.UI.DashboardItem.selectedImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Dashboard View provides a view that supports the ability to have Springboard-like view of icons which can be reordered by dragging and can contain multiple pages of icons in a scrollable view. The Dashboard View is created by the method <a href=\"Titanium.UI.createDashboardView.html\">Titanium.UI.createDashboardView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.DashboardView","display":"(Namespace)\tTitanium.UI.DashboardView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.DashboardView.add","display":"(Method)\t\tTitanium.UI.DashboardView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.DashboardView.addEventListener","display":"(Method)\t\tTitanium.UI.DashboardView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.DashboardView.animate","display":"(Method)\t\tTitanium.UI.DashboardView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.DashboardView.fireEvent","display":"(Method)\t\tTitanium.UI.DashboardView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.DashboardView.hide","display":"(Method)\t\tTitanium.UI.DashboardView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.DashboardView.remove","display":"(Method)\t\tTitanium.UI.DashboardView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.DashboardView.removeEventListener","display":"(Method)\t\tTitanium.UI.DashboardView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.DashboardView.show","display":"(Method)\t\tTitanium.UI.DashboardView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.DashboardView.startEditing","display":"(Method)\t\tTitanium.UI.DashboardView.startEditing\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.DashboardView.stopEditing","display":"(Method)\t\tTitanium.UI.DashboardView.stopEditing\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.DashboardView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.DashboardView.toImage","display":"(Method)\t\tTitanium.UI.DashboardView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.DashboardView.anchorPoint","display":"(Property)\tTitanium.UI.DashboardView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.DashboardView.animatedCenterPoint","display":"(Property)\tTitanium.UI.DashboardView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.DashboardView.backgroundColor","display":"(Property)\tTitanium.UI.DashboardView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.DashboardView.backgroundGradient","display":"(Property)\tTitanium.UI.DashboardView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.DashboardView.backgroundImage","display":"(Property)\tTitanium.UI.DashboardView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.DashboardView.backgroundLeftCap","display":"(Property)\tTitanium.UI.DashboardView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.DashboardView.backgroundTopCap","display":"(Property)\tTitanium.UI.DashboardView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.DashboardView.borderColor","display":"(Property)\tTitanium.UI.DashboardView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.DashboardView.borderRadius","display":"(Property)\tTitanium.UI.DashboardView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.DashboardView.borderWidth","display":"(Property)\tTitanium.UI.DashboardView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.DashboardView.bottom","display":"(Property)\tTitanium.UI.DashboardView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.DashboardView.center","display":"(Property)\tTitanium.UI.DashboardView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of <a href=\"Titanium.UI.DashboardItem-object.html\">Titanium.UI.DashboardItem</a> objects to display in the view</p>","insert":"$0","match":"Titanium.UI.DashboardView.data","display":"(Property)\tTitanium.UI.DashboardView.data\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.DashboardView.height","display":"(Property)\tTitanium.UI.DashboardView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.DashboardView.left","display":"(Property)\tTitanium.UI.DashboardView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.DashboardView.opacity","display":"(Property)\tTitanium.UI.DashboardView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.DashboardView.right","display":"(Property)\tTitanium.UI.DashboardView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.DashboardView.size","display":"(Property)\tTitanium.UI.DashboardView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.DashboardView.top","display":"(Property)\tTitanium.UI.DashboardView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.DashboardView.touchEnabled","display":"(Property)\tTitanium.UI.DashboardView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.DashboardView.transform","display":"(Property)\tTitanium.UI.DashboardView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.DashboardView.visible","display":"(Property)\tTitanium.UI.DashboardView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.DashboardView.width","display":"(Property)\tTitanium.UI.DashboardView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.DashboardView.zIndex","display":"(Property)\tTitanium.UI.DashboardView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Dashboard View provides a view that supports the ability to have Springboard-like view of icons which can be reordered by dragging and can contain multiple pages of icons in a scrollable view. The Dashboard View is created by the method <a href=\"Titanium.UI.createDashboardView.html\">Titanium.UI.createDashboardView</a>.</p><hr />","insert":"$0","match":"Ti.UI.DashboardView","display":"(Namespace)\tTi.UI.DashboardView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.DashboardView.add","display":"(Method)\t\tTi.UI.DashboardView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.DashboardView.addEventListener","display":"(Method)\t\tTi.UI.DashboardView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.DashboardView.animate","display":"(Method)\t\tTi.UI.DashboardView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.DashboardView.fireEvent","display":"(Method)\t\tTi.UI.DashboardView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.DashboardView.hide","display":"(Method)\t\tTi.UI.DashboardView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.DashboardView.remove","display":"(Method)\t\tTi.UI.DashboardView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.DashboardView.removeEventListener","display":"(Method)\t\tTi.UI.DashboardView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.DashboardView.show","display":"(Method)\t\tTi.UI.DashboardView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.DashboardView.startEditing","display":"(Method)\t\tTi.UI.DashboardView.startEditing\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.DashboardView.stopEditing","display":"(Method)\t\tTi.UI.DashboardView.stopEditing\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.DashboardView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.DashboardView.toImage","display":"(Method)\t\tTi.UI.DashboardView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.DashboardView.anchorPoint","display":"(Property)\tTi.UI.DashboardView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.DashboardView.animatedCenterPoint","display":"(Property)\tTi.UI.DashboardView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.DashboardView.backgroundColor","display":"(Property)\tTi.UI.DashboardView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.DashboardView.backgroundGradient","display":"(Property)\tTi.UI.DashboardView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.DashboardView.backgroundImage","display":"(Property)\tTi.UI.DashboardView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.DashboardView.backgroundLeftCap","display":"(Property)\tTi.UI.DashboardView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.DashboardView.backgroundTopCap","display":"(Property)\tTi.UI.DashboardView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.DashboardView.borderColor","display":"(Property)\tTi.UI.DashboardView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.DashboardView.borderRadius","display":"(Property)\tTi.UI.DashboardView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.DashboardView.borderWidth","display":"(Property)\tTi.UI.DashboardView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.DashboardView.bottom","display":"(Property)\tTi.UI.DashboardView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.DashboardView.center","display":"(Property)\tTi.UI.DashboardView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of <a href=\"Titanium.UI.DashboardItem-object.html\">Titanium.UI.DashboardItem</a> objects to display in the view</p>","insert":"$0","match":"Ti.UI.DashboardView.data","display":"(Property)\tTi.UI.DashboardView.data\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.DashboardView.height","display":"(Property)\tTi.UI.DashboardView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.DashboardView.left","display":"(Property)\tTi.UI.DashboardView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.DashboardView.opacity","display":"(Property)\tTi.UI.DashboardView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.DashboardView.right","display":"(Property)\tTi.UI.DashboardView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.DashboardView.size","display":"(Property)\tTi.UI.DashboardView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.DashboardView.top","display":"(Property)\tTi.UI.DashboardView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.DashboardView.touchEnabled","display":"(Property)\tTi.UI.DashboardView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.DashboardView.transform","display":"(Property)\tTi.UI.DashboardView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.DashboardView.visible","display":"(Property)\tTi.UI.DashboardView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.DashboardView.width","display":"(Property)\tTi.UI.DashboardView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.DashboardView.zIndex","display":"(Property)\tTi.UI.DashboardView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Email Dialog is created by <a href=\"Titanium.UI.createEmailDialog.html\">Titanium.UI.createEmailDialog</a> and allows you to send in application emails on behalf of the application user.</p><hr />","insert":"$0","match":"Titanium.UI.EmailDialog","display":"(Namespace)\tTitanium.UI.EmailDialog","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an attachment to the email. the attachment can either be a Blob or File object. (Note: Android will only accept one attachment at this time.)</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.EmailDialog.addAttachment</u></b><i>:void()</i><br>(\n\t\t<span><b>attachment</b><i>:object</i></span>\n\t\t<span class='info'>attachment object as either a Blob or File object</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.EmailDialog.addAttachment","display":"(Method)\t\tTitanium.UI.EmailDialog.addAttachment\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.EmailDialog.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.EmailDialog.addEventListener","display":"(Method)\t\tTitanium.UI.EmailDialog.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.EmailDialog.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.EmailDialog.fireEvent","display":"(Method)\t\tTitanium.UI.EmailDialog.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the email dialog. the email dialog itself is a modal window</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.EmailDialog.open</u></b><i>:void()</i><br>(\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>object of animation properties. pass animated</tt> property (as boolean) to indicate if the dialog should be animated on open.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.EmailDialog.open","display":"(Method)\t\tTitanium.UI.EmailDialog.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.EmailDialog.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.EmailDialog.removeEventListener","display":"(Method)\t\tTitanium.UI.EmailDialog.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>constant for the CANCELLED status result</p>","insert":"$0","match":"Titanium.UI.EmailDialog.CANCELLED","display":"(Property)\tTitanium.UI.EmailDialog.CANCELLED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for the FAILED status result</p>","insert":"$0","match":"Titanium.UI.EmailDialog.FAILED","display":"(Property)\tTitanium.UI.EmailDialog.FAILED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for the SAVED status result</p>","insert":"$0","match":"Titanium.UI.EmailDialog.SAVED","display":"(Property)\tTitanium.UI.EmailDialog.SAVED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for the SENT status result</p>","insert":"$0","match":"Titanium.UI.EmailDialog.SENT","display":"(Property)\tTitanium.UI.EmailDialog.SENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the bar color of the email dialog window when opened</p>","insert":"$0","match":"Titanium.UI.EmailDialog.barColor","display":"(Property)\tTitanium.UI.EmailDialog.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of email BCC: recipients</p>","insert":"$0","match":"Titanium.UI.EmailDialog.bccRecipients","display":"(Property)\tTitanium.UI.EmailDialog.bccRecipients\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of email CC: recipients</p>","insert":"$0","match":"Titanium.UI.EmailDialog.ccRecipients","display":"(Property)\tTitanium.UI.EmailDialog.ccRecipients\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false</p>","insert":"$0","match":"Titanium.UI.EmailDialog.html","display":"(Property)\tTitanium.UI.EmailDialog.html\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the email message body</p>","insert":"$0","match":"Titanium.UI.EmailDialog.messageBody","display":"(Property)\tTitanium.UI.EmailDialog.messageBody\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the subject line for the email</p>","insert":"$0","match":"Titanium.UI.EmailDialog.subject","display":"(Property)\tTitanium.UI.EmailDialog.subject\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of email recipients</p>","insert":"$0","match":"Titanium.UI.EmailDialog.toRecipients","display":"(Property)\tTitanium.UI.EmailDialog.toRecipients\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Email Dialog is created by <a href=\"Titanium.UI.createEmailDialog.html\">Titanium.UI.createEmailDialog</a> and allows you to send in application emails on behalf of the application user.</p><hr />","insert":"$0","match":"Ti.UI.EmailDialog","display":"(Namespace)\tTi.UI.EmailDialog","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an attachment to the email. the attachment can either be a Blob or File object. (Note: Android will only accept one attachment at this time.)</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.EmailDialog.addAttachment</u></b><i>:void()</i><br>(\n\t\t<span><b>attachment</b><i>:object</i></span>\n\t\t<span class='info'>attachment object as either a Blob or File object</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.EmailDialog.addAttachment","display":"(Method)\t\tTi.UI.EmailDialog.addAttachment\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.EmailDialog.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.EmailDialog.addEventListener","display":"(Method)\t\tTi.UI.EmailDialog.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.EmailDialog.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.EmailDialog.fireEvent","display":"(Method)\t\tTi.UI.EmailDialog.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the email dialog. the email dialog itself is a modal window</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.EmailDialog.open</u></b><i>:void()</i><br>(\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>object of animation properties. pass animated</tt> property (as boolean) to indicate if the dialog should be animated on open.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.EmailDialog.open","display":"(Method)\t\tTi.UI.EmailDialog.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.EmailDialog.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.EmailDialog.removeEventListener","display":"(Method)\t\tTi.UI.EmailDialog.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>constant for the CANCELLED status result</p>","insert":"$0","match":"Ti.UI.EmailDialog.CANCELLED","display":"(Property)\tTi.UI.EmailDialog.CANCELLED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for the FAILED status result</p>","insert":"$0","match":"Ti.UI.EmailDialog.FAILED","display":"(Property)\tTi.UI.EmailDialog.FAILED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for the SAVED status result</p>","insert":"$0","match":"Ti.UI.EmailDialog.SAVED","display":"(Property)\tTi.UI.EmailDialog.SAVED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant for the SENT status result</p>","insert":"$0","match":"Ti.UI.EmailDialog.SENT","display":"(Property)\tTi.UI.EmailDialog.SENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the bar color of the email dialog window when opened</p>","insert":"$0","match":"Ti.UI.EmailDialog.barColor","display":"(Property)\tTi.UI.EmailDialog.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of email BCC: recipients</p>","insert":"$0","match":"Ti.UI.EmailDialog.bccRecipients","display":"(Property)\tTi.UI.EmailDialog.bccRecipients\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of email CC: recipients</p>","insert":"$0","match":"Ti.UI.EmailDialog.ccRecipients","display":"(Property)\tTi.UI.EmailDialog.ccRecipients\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false</p>","insert":"$0","match":"Ti.UI.EmailDialog.html","display":"(Property)\tTi.UI.EmailDialog.html\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the email message body</p>","insert":"$0","match":"Ti.UI.EmailDialog.messageBody","display":"(Property)\tTi.UI.EmailDialog.messageBody\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the subject line for the email</p>","insert":"$0","match":"Ti.UI.EmailDialog.subject","display":"(Property)\tTi.UI.EmailDialog.subject\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of email recipients</p>","insert":"$0","match":"Ti.UI.EmailDialog.toRecipients","display":"(Property)\tTi.UI.EmailDialog.toRecipients\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An Image View is used to display an image or a series of images in an animation. The Image View is created by the method <a href=\"Titanium.UI.createImageView.html\">Titanium.UI.createImageView</a>.</p><hr /><p>If you specify a <tt>width</tt> and/or <tt>height</tt> property on the image, the image will be scaled to fit into this space if the image is larger.</p>","insert":"$0","match":"Titanium.UI.ImageView","display":"(Namespace)\tTitanium.UI.ImageView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ImageView.add","display":"(Method)\t\tTitanium.UI.ImageView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ImageView.addEventListener","display":"(Method)\t\tTitanium.UI.ImageView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ImageView.animate","display":"(Method)\t\tTitanium.UI.ImageView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.ImageView.fireEvent","display":"(Method)\t\tTitanium.UI.ImageView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ImageView.hide","display":"(Method)\t\tTitanium.UI.ImageView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ImageView.pause","display":"(Method)\t\tTitanium.UI.ImageView.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ImageView.remove","display":"(Method)\t\tTitanium.UI.ImageView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ImageView.removeEventListener","display":"(Method)\t\tTitanium.UI.ImageView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ImageView.show","display":"(Method)\t\tTitanium.UI.ImageView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ImageView.start","display":"(Method)\t\tTitanium.UI.ImageView.start\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ImageView.stop","display":"(Method)\t\tTitanium.UI.ImageView.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ImageView.toBlob","display":"(Method)\t\tTitanium.UI.ImageView.toBlob\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ImageView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.ImageView.toImage","display":"(Method)\t\tTitanium.UI.ImageView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.ImageView.anchorPoint","display":"(Property)\tTitanium.UI.ImageView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.ImageView.animatedCenterPoint","display":"(Property)\tTitanium.UI.ImageView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly boolean to indicate if the animation is animating</p>","insert":"$0","match":"Titanium.UI.ImageView.animating","display":"(Property)\tTitanium.UI.ImageView.animating\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.ImageView.backgroundColor","display":"(Property)\tTitanium.UI.ImageView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.ImageView.backgroundGradient","display":"(Property)\tTitanium.UI.ImageView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.ImageView.backgroundImage","display":"(Property)\tTitanium.UI.ImageView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.ImageView.backgroundLeftCap","display":"(Property)\tTitanium.UI.ImageView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.ImageView.backgroundTopCap","display":"(Property)\tTitanium.UI.ImageView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.ImageView.borderColor","display":"(Property)\tTitanium.UI.ImageView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.ImageView.borderRadius","display":"(Property)\tTitanium.UI.ImageView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.ImageView.borderWidth","display":"(Property)\tTitanium.UI.ImageView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ImageView.bottom","display":"(Property)\tTitanium.UI.ImageView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>allow image to scale (Android)</p>","insert":"$0","match":"Titanium.UI.ImageView.canScale","display":"(Property)\tTitanium.UI.ImageView.canScale\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.ImageView.center","display":"(Property)\tTitanium.UI.ImageView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to the default image to display while loading a remote image</p>","insert":"$0","match":"Titanium.UI.ImageView.defaultImage","display":"(Property)\tTitanium.UI.ImageView.defaultImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>amount of time in milliseconds to animate one cycle</p>","insert":"$0","match":"Titanium.UI.ImageView.duration","display":"(Property)\tTitanium.UI.ImageView.duration\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)</p>","insert":"$0","match":"Titanium.UI.ImageView.enableZoomControls","display":"(Property)\tTitanium.UI.ImageView.enableZoomControls\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>height of the image display</p>","insert":"$0","match":"Titanium.UI.ImageView.height","display":"(Property)\tTitanium.UI.ImageView.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image to display either as string url, Blob or File</p>","insert":"$0","match":"Titanium.UI.ImageView.image","display":"(Property)\tTitanium.UI.ImageView.image\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of images (either as string url, Blob or File) to display in an animation</p>","insert":"$0","match":"Titanium.UI.ImageView.images","display":"(Property)\tTitanium.UI.ImageView.images\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ImageView.left","display":"(Property)\tTitanium.UI.ImageView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.ImageView.opacity","display":"(Property)\tTitanium.UI.ImageView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly boolean to indicate if the animation is paused</p>","insert":"$0","match":"Titanium.UI.ImageView.paused","display":"(Property)\tTitanium.UI.ImageView.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the default image should be displaying while loading a remote image</p>","insert":"$0","match":"Titanium.UI.ImageView.preventDefaultImage","display":"(Property)\tTitanium.UI.ImageView.preventDefaultImage\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>number of times to repeat the image animation</p>","insert":"$0","match":"Titanium.UI.ImageView.repeatCount","display":"(Property)\tTitanium.UI.ImageView.repeatCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the animation should happen in reverse (from last to first)</p>","insert":"$0","match":"Titanium.UI.ImageView.reverse","display":"(Property)\tTitanium.UI.ImageView.reverse\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ImageView.right","display":"(Property)\tTitanium.UI.ImageView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.ImageView.size","display":"(Property)\tTitanium.UI.ImageView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ImageView.top","display":"(Property)\tTitanium.UI.ImageView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.ImageView.touchEnabled","display":"(Property)\tTitanium.UI.ImageView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.ImageView.transform","display":"(Property)\tTitanium.UI.ImageView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to the image to display</p>","insert":"$0","match":"Titanium.UI.ImageView.url","display":"(Property)\tTitanium.UI.ImageView.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.ImageView.visible","display":"(Property)\tTitanium.UI.ImageView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>width of the image display</p>","insert":"$0","match":"Titanium.UI.ImageView.width","display":"(Property)\tTitanium.UI.ImageView.width\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.ImageView.zIndex","display":"(Property)\tTitanium.UI.ImageView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An Image View is used to display an image or a series of images in an animation. The Image View is created by the method <a href=\"Titanium.UI.createImageView.html\">Titanium.UI.createImageView</a>.</p><hr /><p>If you specify a <tt>width</tt> and/or <tt>height</tt> property on the image, the image will be scaled to fit into this space if the image is larger.</p>","insert":"$0","match":"Ti.UI.ImageView","display":"(Namespace)\tTi.UI.ImageView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ImageView.add","display":"(Method)\t\tTi.UI.ImageView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ImageView.addEventListener","display":"(Method)\t\tTi.UI.ImageView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ImageView.animate","display":"(Method)\t\tTi.UI.ImageView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.ImageView.fireEvent","display":"(Method)\t\tTi.UI.ImageView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ImageView.hide","display":"(Method)\t\tTi.UI.ImageView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ImageView.pause","display":"(Method)\t\tTi.UI.ImageView.pause\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ImageView.remove","display":"(Method)\t\tTi.UI.ImageView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ImageView.removeEventListener","display":"(Method)\t\tTi.UI.ImageView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ImageView.show","display":"(Method)\t\tTi.UI.ImageView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ImageView.start","display":"(Method)\t\tTi.UI.ImageView.start\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ImageView.stop","display":"(Method)\t\tTi.UI.ImageView.stop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ImageView.toBlob","display":"(Method)\t\tTi.UI.ImageView.toBlob\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ImageView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.ImageView.toImage","display":"(Method)\t\tTi.UI.ImageView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.ImageView.anchorPoint","display":"(Property)\tTi.UI.ImageView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.ImageView.animatedCenterPoint","display":"(Property)\tTi.UI.ImageView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly boolean to indicate if the animation is animating</p>","insert":"$0","match":"Ti.UI.ImageView.animating","display":"(Property)\tTi.UI.ImageView.animating\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.ImageView.backgroundColor","display":"(Property)\tTi.UI.ImageView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.ImageView.backgroundGradient","display":"(Property)\tTi.UI.ImageView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.ImageView.backgroundImage","display":"(Property)\tTi.UI.ImageView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.ImageView.backgroundLeftCap","display":"(Property)\tTi.UI.ImageView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.ImageView.backgroundTopCap","display":"(Property)\tTi.UI.ImageView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.ImageView.borderColor","display":"(Property)\tTi.UI.ImageView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.ImageView.borderRadius","display":"(Property)\tTi.UI.ImageView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.ImageView.borderWidth","display":"(Property)\tTi.UI.ImageView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ImageView.bottom","display":"(Property)\tTi.UI.ImageView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>allow image to scale (Android)</p>","insert":"$0","match":"Ti.UI.ImageView.canScale","display":"(Property)\tTi.UI.ImageView.canScale\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.ImageView.center","display":"(Property)\tTi.UI.ImageView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to the default image to display while loading a remote image</p>","insert":"$0","match":"Ti.UI.ImageView.defaultImage","display":"(Property)\tTi.UI.ImageView.defaultImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>amount of time in milliseconds to animate one cycle</p>","insert":"$0","match":"Ti.UI.ImageView.duration","display":"(Property)\tTi.UI.ImageView.duration\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)</p>","insert":"$0","match":"Ti.UI.ImageView.enableZoomControls","display":"(Property)\tTi.UI.ImageView.enableZoomControls\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>height of the image display</p>","insert":"$0","match":"Ti.UI.ImageView.height","display":"(Property)\tTi.UI.ImageView.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image to display either as string url, Blob or File</p>","insert":"$0","match":"Ti.UI.ImageView.image","display":"(Property)\tTi.UI.ImageView.image\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of images (either as string url, Blob or File) to display in an animation</p>","insert":"$0","match":"Ti.UI.ImageView.images","display":"(Property)\tTi.UI.ImageView.images\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ImageView.left","display":"(Property)\tTi.UI.ImageView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.ImageView.opacity","display":"(Property)\tTi.UI.ImageView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>readonly boolean to indicate if the animation is paused</p>","insert":"$0","match":"Ti.UI.ImageView.paused","display":"(Property)\tTi.UI.ImageView.paused\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the default image should be displaying while loading a remote image</p>","insert":"$0","match":"Ti.UI.ImageView.preventDefaultImage","display":"(Property)\tTi.UI.ImageView.preventDefaultImage\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>number of times to repeat the image animation</p>","insert":"$0","match":"Ti.UI.ImageView.repeatCount","display":"(Property)\tTi.UI.ImageView.repeatCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the animation should happen in reverse (from last to first)</p>","insert":"$0","match":"Ti.UI.ImageView.reverse","display":"(Property)\tTi.UI.ImageView.reverse\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ImageView.right","display":"(Property)\tTi.UI.ImageView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.ImageView.size","display":"(Property)\tTi.UI.ImageView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ImageView.top","display":"(Property)\tTi.UI.ImageView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.ImageView.touchEnabled","display":"(Property)\tTi.UI.ImageView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.ImageView.transform","display":"(Property)\tTi.UI.ImageView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to the image to display</p>","insert":"$0","match":"Ti.UI.ImageView.url","display":"(Property)\tTi.UI.ImageView.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.ImageView.visible","display":"(Property)\tTi.UI.ImageView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>width of the image display</p>","insert":"$0","match":"Ti.UI.ImageView.width","display":"(Property)\tTi.UI.ImageView.width\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.ImageView.zIndex","display":"(Property)\tTi.UI.ImageView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Label is created by the method <a href=\"Titanium.UI.createLabel.html\">Titanium.UI.createLabel</a>.</p><hr />","insert":"$0","match":"Titanium.UI.Label","display":"(Namespace)\tTitanium.UI.Label","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Label.add","display":"(Method)\t\tTitanium.UI.Label.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Label.addEventListener","display":"(Method)\t\tTitanium.UI.Label.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Label.animate","display":"(Method)\t\tTitanium.UI.Label.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Label.fireEvent","display":"(Method)\t\tTitanium.UI.Label.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Label.hide","display":"(Method)\t\tTitanium.UI.Label.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Label.remove","display":"(Method)\t\tTitanium.UI.Label.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Label.removeEventListener","display":"(Method)\t\tTitanium.UI.Label.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Label.show","display":"(Method)\t\tTitanium.UI.Label.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Label.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Label.toImage","display":"(Method)\t\tTitanium.UI.Label.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Label.anchorPoint","display":"(Property)\tTitanium.UI.Label.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Label.animatedCenterPoint","display":"(Property)\tTitanium.UI.Label.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.Label.backgroundColor","display":"(Property)\tTitanium.UI.Label.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Label.backgroundGradient","display":"(Property)\tTitanium.UI.Label.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>background image for the label</p>","insert":"$0","match":"Titanium.UI.Label.backgroundImage","display":"(Property)\tTitanium.UI.Label.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Label.backgroundLeftCap","display":"(Property)\tTitanium.UI.Label.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the bottom</p>","insert":"$0","match":"Titanium.UI.Label.backgroundPaddingBottom","display":"(Property)\tTitanium.UI.Label.backgroundPaddingBottom\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the left</p>","insert":"$0","match":"Titanium.UI.Label.backgroundPaddingLeft","display":"(Property)\tTitanium.UI.Label.backgroundPaddingLeft\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the right</p>","insert":"$0","match":"Titanium.UI.Label.backgroundPaddingRight","display":"(Property)\tTitanium.UI.Label.backgroundPaddingRight\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the top</p>","insert":"$0","match":"Titanium.UI.Label.backgroundPaddingTop","display":"(Property)\tTitanium.UI.Label.backgroundPaddingTop\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Label.backgroundTopCap","display":"(Property)\tTitanium.UI.Label.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Label.borderColor","display":"(Property)\tTitanium.UI.Label.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Label.borderRadius","display":"(Property)\tTitanium.UI.Label.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Label.borderWidth","display":"(Property)\tTitanium.UI.Label.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Label.bottom","display":"(Property)\tTitanium.UI.Label.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Label.center","display":"(Property)\tTitanium.UI.Label.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the label</p>","insert":"$0","match":"Titanium.UI.Label.color","display":"(Property)\tTitanium.UI.Label.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the label font object properties</p>","insert":"$0","match":"Titanium.UI.Label.font","display":"(Property)\tTitanium.UI.Label.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Label.height","display":"(Property)\tTitanium.UI.Label.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the label when in the highlighted state</p>","insert":"$0","match":"Titanium.UI.Label.highlightedColor","display":"(Property)\tTitanium.UI.Label.highlightedColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Label.left","display":"(Property)\tTitanium.UI.Label.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum font size if the label is auto-adjusting based on its contents</p>","insert":"$0","match":"Titanium.UI.Label.minimumFontSize","display":"(Property)\tTitanium.UI.Label.minimumFontSize\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Label.opacity","display":"(Property)\tTitanium.UI.Label.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Label.right","display":"(Property)\tTitanium.UI.Label.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text shadow color</p>","insert":"$0","match":"Titanium.UI.Label.shadowColor","display":"(Property)\tTitanium.UI.Label.shadowColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the shadow offset as a dictionary with the properties <tt>x</tt> and <tt>y</tt></p>","insert":"$0","match":"Titanium.UI.Label.shadowOffset","display":"(Property)\tTitanium.UI.Label.shadowOffset\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Label.size","display":"(Property)\tTitanium.UI.Label.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text of the label</p>","insert":"$0","match":"Titanium.UI.Label.text","display":"(Property)\tTitanium.UI.Label.text\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the alignment constant or string value such as <tt>left</tt>, <tt>center</tt> or <tt>right</tt></p>","insert":"$0","match":"Titanium.UI.Label.textAlign","display":"(Property)\tTitanium.UI.Label.textAlign\t:string,int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Label.top","display":"(Property)\tTitanium.UI.Label.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Label.touchEnabled","display":"(Property)\tTitanium.UI.Label.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Label.transform","display":"(Property)\tTitanium.UI.Label.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Label.visible","display":"(Property)\tTitanium.UI.Label.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Label.width","display":"(Property)\tTitanium.UI.Label.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Label.zIndex","display":"(Property)\tTitanium.UI.Label.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Label is created by the method <a href=\"Titanium.UI.createLabel.html\">Titanium.UI.createLabel</a>.</p><hr />","insert":"$0","match":"Ti.UI.Label","display":"(Namespace)\tTi.UI.Label","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Label.add","display":"(Method)\t\tTi.UI.Label.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Label.addEventListener","display":"(Method)\t\tTi.UI.Label.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Label.animate","display":"(Method)\t\tTi.UI.Label.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Label.fireEvent","display":"(Method)\t\tTi.UI.Label.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Label.hide","display":"(Method)\t\tTi.UI.Label.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Label.remove","display":"(Method)\t\tTi.UI.Label.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Label.removeEventListener","display":"(Method)\t\tTi.UI.Label.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Label.show","display":"(Method)\t\tTi.UI.Label.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Label.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Label.toImage","display":"(Method)\t\tTi.UI.Label.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Label.anchorPoint","display":"(Property)\tTi.UI.Label.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Label.animatedCenterPoint","display":"(Property)\tTi.UI.Label.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.Label.backgroundColor","display":"(Property)\tTi.UI.Label.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Label.backgroundGradient","display":"(Property)\tTi.UI.Label.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>background image for the label</p>","insert":"$0","match":"Ti.UI.Label.backgroundImage","display":"(Property)\tTi.UI.Label.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Label.backgroundLeftCap","display":"(Property)\tTi.UI.Label.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the bottom</p>","insert":"$0","match":"Ti.UI.Label.backgroundPaddingBottom","display":"(Property)\tTi.UI.Label.backgroundPaddingBottom\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the left</p>","insert":"$0","match":"Ti.UI.Label.backgroundPaddingLeft","display":"(Property)\tTi.UI.Label.backgroundPaddingLeft\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the right</p>","insert":"$0","match":"Ti.UI.Label.backgroundPaddingRight","display":"(Property)\tTi.UI.Label.backgroundPaddingRight\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the number of pixels to extend the background image past the label on the top</p>","insert":"$0","match":"Ti.UI.Label.backgroundPaddingTop","display":"(Property)\tTi.UI.Label.backgroundPaddingTop\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Label.backgroundTopCap","display":"(Property)\tTi.UI.Label.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Label.borderColor","display":"(Property)\tTi.UI.Label.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Label.borderRadius","display":"(Property)\tTi.UI.Label.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Label.borderWidth","display":"(Property)\tTi.UI.Label.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Label.bottom","display":"(Property)\tTi.UI.Label.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Label.center","display":"(Property)\tTi.UI.Label.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the label</p>","insert":"$0","match":"Ti.UI.Label.color","display":"(Property)\tTi.UI.Label.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the label font object properties</p>","insert":"$0","match":"Ti.UI.Label.font","display":"(Property)\tTi.UI.Label.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Label.height","display":"(Property)\tTi.UI.Label.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the label when in the highlighted state</p>","insert":"$0","match":"Ti.UI.Label.highlightedColor","display":"(Property)\tTi.UI.Label.highlightedColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Label.left","display":"(Property)\tTi.UI.Label.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum font size if the label is auto-adjusting based on its contents</p>","insert":"$0","match":"Ti.UI.Label.minimumFontSize","display":"(Property)\tTi.UI.Label.minimumFontSize\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Label.opacity","display":"(Property)\tTi.UI.Label.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Label.right","display":"(Property)\tTi.UI.Label.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text shadow color</p>","insert":"$0","match":"Ti.UI.Label.shadowColor","display":"(Property)\tTi.UI.Label.shadowColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the shadow offset as a dictionary with the properties <tt>x</tt> and <tt>y</tt></p>","insert":"$0","match":"Ti.UI.Label.shadowOffset","display":"(Property)\tTi.UI.Label.shadowOffset\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Label.size","display":"(Property)\tTi.UI.Label.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text of the label</p>","insert":"$0","match":"Ti.UI.Label.text","display":"(Property)\tTi.UI.Label.text\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the alignment constant or string value such as <tt>left</tt>, <tt>center</tt> or <tt>right</tt></p>","insert":"$0","match":"Ti.UI.Label.textAlign","display":"(Property)\tTi.UI.Label.textAlign\t:string,int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Label.top","display":"(Property)\tTi.UI.Label.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Label.touchEnabled","display":"(Property)\tTi.UI.Label.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Label.transform","display":"(Property)\tTi.UI.Label.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Label.visible","display":"(Property)\tTi.UI.Label.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Label.width","display":"(Property)\tTi.UI.Label.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Label.zIndex","display":"(Property)\tTi.UI.Label.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Option Dialog is created by <a href=\"Titanium.UI.createOptionDialog.html\">Titanium.UI.createOptionDialog</a> and allows you to show a modal dialog of one or more options to the user.</p><hr />","insert":"$0","match":"Titanium.UI.OptionDialog","display":"(Namespace)\tTitanium.UI.OptionDialog","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.OptionDialog.show","display":"(Method)\t\tTitanium.UI.OptionDialog.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>an index to indicate which button should be the cancel button</p>","insert":"$0","match":"Titanium.UI.OptionDialog.cancel","display":"(Property)\tTitanium.UI.OptionDialog.cancel\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the destructive button (indicated by a visual clue in the UI)</p>","insert":"$0","match":"Titanium.UI.OptionDialog.destructive","display":"(Property)\tTitanium.UI.OptionDialog.destructive\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of button names as strings</p>","insert":"$0","match":"Titanium.UI.OptionDialog.options","display":"(Property)\tTitanium.UI.OptionDialog.options\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the dialog</p>","insert":"$0","match":"Titanium.UI.OptionDialog.title","display":"(Property)\tTitanium.UI.OptionDialog.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Option Dialog is created by <a href=\"Titanium.UI.createOptionDialog.html\">Titanium.UI.createOptionDialog</a> and allows you to show a modal dialog of one or more options to the user.</p><hr />","insert":"$0","match":"Ti.UI.OptionDialog","display":"(Namespace)\tTi.UI.OptionDialog","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.OptionDialog.show","display":"(Method)\t\tTi.UI.OptionDialog.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>an index to indicate which button should be the cancel button</p>","insert":"$0","match":"Ti.UI.OptionDialog.cancel","display":"(Property)\tTi.UI.OptionDialog.cancel\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the destructive button (indicated by a visual clue in the UI)</p>","insert":"$0","match":"Ti.UI.OptionDialog.destructive","display":"(Property)\tTi.UI.OptionDialog.destructive\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of button names as strings</p>","insert":"$0","match":"Ti.UI.OptionDialog.options","display":"(Property)\tTi.UI.OptionDialog.options\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the dialog</p>","insert":"$0","match":"Ti.UI.OptionDialog.title","display":"(Property)\tTi.UI.OptionDialog.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Picker is created by the method <a href=\"Titanium.UI.createPicker\">Titanium.UI.createPicker</a>.  A Picker can be used to select one or more fixed values.</p><hr /><p>Android does not support the DateTime or Count Down Timer picker type.</p>","insert":"$0","match":"Titanium.UI.Picker","display":"(Namespace)\tTitanium.UI.Picker","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an array of rows, a single row or a column to the picker</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.add</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:array,object</i></span>\n\t\t<span class='info'>add an array of rows, a single row or a column to the picker</span>\n)\n</code>","insert":"(${1:${2:data}})","match":"Titanium.UI.Picker.add","display":"(Method)\t\tTitanium.UI.Picker.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Picker.addEventListener","display":"(Method)\t\tTitanium.UI.Picker.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Picker.fireEvent","display":"(Method)\t\tTitanium.UI.Picker.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>get the selected row object for column</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.getSelectedRow</u></b><i>:object()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>for the column index, return the row object or nil if not found</span>\n)\n</code>","insert":"(${1:${2:index}})","match":"Titanium.UI.Picker.getSelectedRow","display":"(Method)\t\tTitanium.UI.Picker.getSelectedRow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>causes the picker to reload the values from the new column</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.reloadColumn</u></b><i>:void()</i><br>(\n\t\t<span><b>column</b><i>:object</i></span>\n\t\t<span class='info'>new column to load</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Picker.reloadColumn","display":"(Method)\t\tTitanium.UI.Picker.reloadColumn\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Picker.removeEventListener","display":"(Method)\t\tTitanium.UI.Picker.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the column's row to the selected state</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Picker.setSelectedRow</u></b><i>:void()</i><br>(\n\t\t<span><b>column</b><i>:int</i></span>\n\t\t<span class='info'>the column index</span>\n\t\t<span><b>row</b><i>:int</i></span>\n\t\t<span class='info'>the row index</span>\n\t\t<span><b>animated</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the selection should be animated (default)</span>\n)\n</code>","insert":"(${1:${2:column}, ${3:row}, ${4:animated}})","match":"Titanium.UI.Picker.setSelectedRow","display":"(Method)\t\tTitanium.UI.Picker.setSelectedRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>array of column values</p>","insert":"$0","match":"Titanium.UI.Picker.columns","display":"(Property)\tTitanium.UI.Picker.columns\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration value in milliseconds for count down timer pickers</p>","insert":"$0","match":"Titanium.UI.Picker.countDownDuration","display":"(Property)\tTitanium.UI.Picker.countDownDuration\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the locale used for displaying Date/Time pickers values</p>","insert":"$0","match":"Titanium.UI.Picker.locale","display":"(Property)\tTitanium.UI.Picker.locale\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum Date/Time for value for date pickers</p>","insert":"$0","match":"Titanium.UI.Picker.maxDate","display":"(Property)\tTitanium.UI.Picker.maxDate\t:date","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum Date/Time for value for date pickers</p>","insert":"$0","match":"Titanium.UI.Picker.minDate","display":"(Property)\tTitanium.UI.Picker.minDate\t:date","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.</p>","insert":"$0","match":"Titanium.UI.Picker.minuteInterval","display":"(Property)\tTitanium.UI.Picker.minuteInterval\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.</p>","insert":"$0","match":"Titanium.UI.Picker.selectionIndicator","display":"(Property)\tTitanium.UI.Picker.selectionIndicator\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the type constant for the picker. One of <a href=\"Titanium.UI.PICKER_TYPE_PLAIN.html\">Titanium.UI.PICKER_TYPE_PLAIN</a> (default), <a href=\"Titanium.UI.PICKER_TYPE_DATE_AND_TIME.html\">Titanium.UI.PICKER_TYPE_DATE_AND_TIME</a>, <a href=\"Titanium.UI.PICKER_TYPE_DATE.html\">Titanium.UI.PICKER_TYPE_DATE</a>, <a href=\"Titanium.UI.PICKER_TYPE_TIME.html\">Titanium.UI.PICKER_TYPE_TIME</a> or <a href=\"Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER.html\">Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER</a>.</p>","insert":"$0","match":"Titanium.UI.Picker.type","display":"(Property)\tTitanium.UI.Picker.type\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the Date/Time value for date pickers</p>","insert":"$0","match":"Titanium.UI.Picker.value","display":"(Property)\tTitanium.UI.Picker.value\t:date","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Picker is created by the method <a href=\"Titanium.UI.createPicker\">Titanium.UI.createPicker</a>.  A Picker can be used to select one or more fixed values.</p><hr /><p>Android does not support the DateTime or Count Down Timer picker type.</p>","insert":"$0","match":"Ti.UI.Picker","display":"(Namespace)\tTi.UI.Picker","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an array of rows, a single row or a column to the picker</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.add</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:array,object</i></span>\n\t\t<span class='info'>add an array of rows, a single row or a column to the picker</span>\n)\n</code>","insert":"(${1:${2:data}})","match":"Ti.UI.Picker.add","display":"(Method)\t\tTi.UI.Picker.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Picker.addEventListener","display":"(Method)\t\tTi.UI.Picker.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Picker.fireEvent","display":"(Method)\t\tTi.UI.Picker.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>get the selected row object for column</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.getSelectedRow</u></b><i>:object()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>for the column index, return the row object or nil if not found</span>\n)\n</code>","insert":"(${1:${2:index}})","match":"Ti.UI.Picker.getSelectedRow","display":"(Method)\t\tTi.UI.Picker.getSelectedRow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>causes the picker to reload the values from the new column</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.reloadColumn</u></b><i>:void()</i><br>(\n\t\t<span><b>column</b><i>:object</i></span>\n\t\t<span class='info'>new column to load</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Picker.reloadColumn","display":"(Method)\t\tTi.UI.Picker.reloadColumn\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Picker.removeEventListener","display":"(Method)\t\tTi.UI.Picker.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the column's row to the selected state</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Picker.setSelectedRow</u></b><i>:void()</i><br>(\n\t\t<span><b>column</b><i>:int</i></span>\n\t\t<span class='info'>the column index</span>\n\t\t<span><b>row</b><i>:int</i></span>\n\t\t<span class='info'>the row index</span>\n\t\t<span><b>animated</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the selection should be animated (default)</span>\n)\n</code>","insert":"(${1:${2:column}, ${3:row}, ${4:animated}})","match":"Ti.UI.Picker.setSelectedRow","display":"(Method)\t\tTi.UI.Picker.setSelectedRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>array of column values</p>","insert":"$0","match":"Ti.UI.Picker.columns","display":"(Property)\tTi.UI.Picker.columns\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the duration value in milliseconds for count down timer pickers</p>","insert":"$0","match":"Ti.UI.Picker.countDownDuration","display":"(Property)\tTi.UI.Picker.countDownDuration\t:double","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the locale used for displaying Date/Time pickers values</p>","insert":"$0","match":"Ti.UI.Picker.locale","display":"(Property)\tTi.UI.Picker.locale\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum Date/Time for value for date pickers</p>","insert":"$0","match":"Ti.UI.Picker.maxDate","display":"(Property)\tTi.UI.Picker.maxDate\t:date","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum Date/Time for value for date pickers</p>","insert":"$0","match":"Ti.UI.Picker.minDate","display":"(Property)\tTi.UI.Picker.minDate\t:date","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.</p>","insert":"$0","match":"Ti.UI.Picker.minuteInterval","display":"(Property)\tTi.UI.Picker.minuteInterval\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.</p>","insert":"$0","match":"Ti.UI.Picker.selectionIndicator","display":"(Property)\tTi.UI.Picker.selectionIndicator\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the type constant for the picker. One of <a href=\"Titanium.UI.PICKER_TYPE_PLAIN.html\">Titanium.UI.PICKER_TYPE_PLAIN</a> (default), <a href=\"Titanium.UI.PICKER_TYPE_DATE_AND_TIME.html\">Titanium.UI.PICKER_TYPE_DATE_AND_TIME</a>, <a href=\"Titanium.UI.PICKER_TYPE_DATE.html\">Titanium.UI.PICKER_TYPE_DATE</a>, <a href=\"Titanium.UI.PICKER_TYPE_TIME.html\">Titanium.UI.PICKER_TYPE_TIME</a> or <a href=\"Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER.html\">Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER</a>.</p>","insert":"$0","match":"Ti.UI.Picker.type","display":"(Property)\tTi.UI.Picker.type\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the Date/Time value for date pickers</p>","insert":"$0","match":"Ti.UI.Picker.value","display":"(Property)\tTi.UI.Picker.value\t:date","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The picker row object created by <a href=\"Titanium.UI.createPickerColumn\">Titanium.UI.createPickerColumn</a>.</p><hr />","insert":"$0","match":"Titanium.UI.PickerColumn","display":"(Namespace)\tTitanium.UI.PickerColumn","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.PickerColumn.add","display":"(Method)\t\tTitanium.UI.PickerColumn.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.PickerColumn.addEventListener","display":"(Method)\t\tTitanium.UI.PickerColumn.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.PickerColumn.addRow[object]","display":"(Method)\t\tTitanium.UI.PickerColumn.addRow[object]\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.PickerColumn.animate","display":"(Method)\t\tTitanium.UI.PickerColumn.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.PickerColumn.fireEvent","display":"(Method)\t\tTitanium.UI.PickerColumn.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.PickerColumn.hide","display":"(Method)\t\tTitanium.UI.PickerColumn.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.PickerColumn.remove","display":"(Method)\t\tTitanium.UI.PickerColumn.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.PickerColumn.removeEventListener","display":"(Method)\t\tTitanium.UI.PickerColumn.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.PickerColumn.removeRow[object]","display":"(Method)\t\tTitanium.UI.PickerColumn.removeRow[object]\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.PickerColumn.show","display":"(Method)\t\tTitanium.UI.PickerColumn.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerColumn.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.PickerColumn.toImage","display":"(Method)\t\tTitanium.UI.PickerColumn.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.PickerColumn.anchorPoint","display":"(Property)\tTitanium.UI.PickerColumn.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.PickerColumn.animatedCenterPoint","display":"(Property)\tTitanium.UI.PickerColumn.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.PickerColumn.backgroundColor","display":"(Property)\tTitanium.UI.PickerColumn.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.PickerColumn.backgroundGradient","display":"(Property)\tTitanium.UI.PickerColumn.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.PickerColumn.backgroundImage","display":"(Property)\tTitanium.UI.PickerColumn.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.PickerColumn.backgroundLeftCap","display":"(Property)\tTitanium.UI.PickerColumn.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.PickerColumn.backgroundTopCap","display":"(Property)\tTitanium.UI.PickerColumn.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.PickerColumn.borderColor","display":"(Property)\tTitanium.UI.PickerColumn.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.PickerColumn.borderRadius","display":"(Property)\tTitanium.UI.PickerColumn.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.PickerColumn.borderWidth","display":"(Property)\tTitanium.UI.PickerColumn.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerColumn.bottom","display":"(Property)\tTitanium.UI.PickerColumn.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.PickerColumn.center","display":"(Property)\tTitanium.UI.PickerColumn.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerColumn.height","display":"(Property)\tTitanium.UI.PickerColumn.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerColumn.left","display":"(Property)\tTitanium.UI.PickerColumn.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.PickerColumn.opacity","display":"(Property)\tTitanium.UI.PickerColumn.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerColumn.right","display":"(Property)\tTitanium.UI.PickerColumn.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>number of rows in the column (readonly)</p>","insert":"$0","match":"Titanium.UI.PickerColumn.rowCount","display":"(Property)\tTitanium.UI.PickerColumn.rowCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of rows</p>","insert":"$0","match":"Titanium.UI.PickerColumn.rows","display":"(Property)\tTitanium.UI.PickerColumn.rows\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.PickerColumn.size","display":"(Property)\tTitanium.UI.PickerColumn.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerColumn.top","display":"(Property)\tTitanium.UI.PickerColumn.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.PickerColumn.touchEnabled","display":"(Property)\tTitanium.UI.PickerColumn.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.PickerColumn.transform","display":"(Property)\tTitanium.UI.PickerColumn.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.PickerColumn.visible","display":"(Property)\tTitanium.UI.PickerColumn.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerColumn.width","display":"(Property)\tTitanium.UI.PickerColumn.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.PickerColumn.zIndex","display":"(Property)\tTitanium.UI.PickerColumn.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The picker row object created by <a href=\"Titanium.UI.createPickerColumn\">Titanium.UI.createPickerColumn</a>.</p><hr />","insert":"$0","match":"Ti.UI.PickerColumn","display":"(Namespace)\tTi.UI.PickerColumn","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.PickerColumn.add","display":"(Method)\t\tTi.UI.PickerColumn.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.PickerColumn.addEventListener","display":"(Method)\t\tTi.UI.PickerColumn.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.PickerColumn.addRow[object]","display":"(Method)\t\tTi.UI.PickerColumn.addRow[object]\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.PickerColumn.animate","display":"(Method)\t\tTi.UI.PickerColumn.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.PickerColumn.fireEvent","display":"(Method)\t\tTi.UI.PickerColumn.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.PickerColumn.hide","display":"(Method)\t\tTi.UI.PickerColumn.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.PickerColumn.remove","display":"(Method)\t\tTi.UI.PickerColumn.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.PickerColumn.removeEventListener","display":"(Method)\t\tTi.UI.PickerColumn.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.PickerColumn.removeRow[object]","display":"(Method)\t\tTi.UI.PickerColumn.removeRow[object]\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.PickerColumn.show","display":"(Method)\t\tTi.UI.PickerColumn.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerColumn.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.PickerColumn.toImage","display":"(Method)\t\tTi.UI.PickerColumn.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.PickerColumn.anchorPoint","display":"(Property)\tTi.UI.PickerColumn.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.PickerColumn.animatedCenterPoint","display":"(Property)\tTi.UI.PickerColumn.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.PickerColumn.backgroundColor","display":"(Property)\tTi.UI.PickerColumn.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.PickerColumn.backgroundGradient","display":"(Property)\tTi.UI.PickerColumn.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.PickerColumn.backgroundImage","display":"(Property)\tTi.UI.PickerColumn.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.PickerColumn.backgroundLeftCap","display":"(Property)\tTi.UI.PickerColumn.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.PickerColumn.backgroundTopCap","display":"(Property)\tTi.UI.PickerColumn.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.PickerColumn.borderColor","display":"(Property)\tTi.UI.PickerColumn.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.PickerColumn.borderRadius","display":"(Property)\tTi.UI.PickerColumn.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.PickerColumn.borderWidth","display":"(Property)\tTi.UI.PickerColumn.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerColumn.bottom","display":"(Property)\tTi.UI.PickerColumn.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.PickerColumn.center","display":"(Property)\tTi.UI.PickerColumn.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerColumn.height","display":"(Property)\tTi.UI.PickerColumn.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerColumn.left","display":"(Property)\tTi.UI.PickerColumn.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.PickerColumn.opacity","display":"(Property)\tTi.UI.PickerColumn.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerColumn.right","display":"(Property)\tTi.UI.PickerColumn.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>number of rows in the column (readonly)</p>","insert":"$0","match":"Ti.UI.PickerColumn.rowCount","display":"(Property)\tTi.UI.PickerColumn.rowCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of rows</p>","insert":"$0","match":"Ti.UI.PickerColumn.rows","display":"(Property)\tTi.UI.PickerColumn.rows\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.PickerColumn.size","display":"(Property)\tTi.UI.PickerColumn.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerColumn.top","display":"(Property)\tTi.UI.PickerColumn.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.PickerColumn.touchEnabled","display":"(Property)\tTi.UI.PickerColumn.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.PickerColumn.transform","display":"(Property)\tTi.UI.PickerColumn.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.PickerColumn.visible","display":"(Property)\tTi.UI.PickerColumn.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerColumn.width","display":"(Property)\tTi.UI.PickerColumn.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.PickerColumn.zIndex","display":"(Property)\tTi.UI.PickerColumn.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The picker row object created by <a href=\"Titanium.UI.createPickerRow\">Titanium.UI.createPickerRow</a>.</p><hr />","insert":"$0","match":"Titanium.UI.PickerRow","display":"(Namespace)\tTitanium.UI.PickerRow","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.PickerRow.add","display":"(Method)\t\tTitanium.UI.PickerRow.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.PickerRow.addEventListener","display":"(Method)\t\tTitanium.UI.PickerRow.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.PickerRow.animate","display":"(Method)\t\tTitanium.UI.PickerRow.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.PickerRow.fireEvent","display":"(Method)\t\tTitanium.UI.PickerRow.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.PickerRow.hide","display":"(Method)\t\tTitanium.UI.PickerRow.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.PickerRow.remove","display":"(Method)\t\tTitanium.UI.PickerRow.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.PickerRow.removeEventListener","display":"(Method)\t\tTitanium.UI.PickerRow.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.PickerRow.show","display":"(Method)\t\tTitanium.UI.PickerRow.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.PickerRow.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.PickerRow.toImage","display":"(Method)\t\tTitanium.UI.PickerRow.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.PickerRow.anchorPoint","display":"(Property)\tTitanium.UI.PickerRow.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.PickerRow.animatedCenterPoint","display":"(Property)\tTitanium.UI.PickerRow.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.PickerRow.backgroundColor","display":"(Property)\tTitanium.UI.PickerRow.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.PickerRow.backgroundGradient","display":"(Property)\tTitanium.UI.PickerRow.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.PickerRow.backgroundImage","display":"(Property)\tTitanium.UI.PickerRow.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.PickerRow.backgroundLeftCap","display":"(Property)\tTitanium.UI.PickerRow.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.PickerRow.backgroundTopCap","display":"(Property)\tTitanium.UI.PickerRow.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.PickerRow.borderColor","display":"(Property)\tTitanium.UI.PickerRow.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.PickerRow.borderRadius","display":"(Property)\tTitanium.UI.PickerRow.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.PickerRow.borderWidth","display":"(Property)\tTitanium.UI.PickerRow.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerRow.bottom","display":"(Property)\tTitanium.UI.PickerRow.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.PickerRow.center","display":"(Property)\tTitanium.UI.PickerRow.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font size when displaying the text. ignored when using a custom view</p>","insert":"$0","match":"Titanium.UI.PickerRow.fontSize","display":"(Property)\tTitanium.UI.PickerRow.fontSize\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerRow.height","display":"(Property)\tTitanium.UI.PickerRow.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerRow.left","display":"(Property)\tTitanium.UI.PickerRow.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.PickerRow.opacity","display":"(Property)\tTitanium.UI.PickerRow.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerRow.right","display":"(Property)\tTitanium.UI.PickerRow.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>when used in the constructor, set the row to selected on initial display</p>","insert":"$0","match":"Titanium.UI.PickerRow.selected","display":"(Property)\tTitanium.UI.PickerRow.selected\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.PickerRow.size","display":"(Property)\tTitanium.UI.PickerRow.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the display text</p>","insert":"$0","match":"Titanium.UI.PickerRow.title","display":"(Property)\tTitanium.UI.PickerRow.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerRow.top","display":"(Property)\tTitanium.UI.PickerRow.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.PickerRow.touchEnabled","display":"(Property)\tTitanium.UI.PickerRow.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.PickerRow.transform","display":"(Property)\tTitanium.UI.PickerRow.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.PickerRow.visible","display":"(Property)\tTitanium.UI.PickerRow.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.PickerRow.width","display":"(Property)\tTitanium.UI.PickerRow.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.PickerRow.zIndex","display":"(Property)\tTitanium.UI.PickerRow.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The picker row object created by <a href=\"Titanium.UI.createPickerRow\">Titanium.UI.createPickerRow</a>.</p><hr />","insert":"$0","match":"Ti.UI.PickerRow","display":"(Namespace)\tTi.UI.PickerRow","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.PickerRow.add","display":"(Method)\t\tTi.UI.PickerRow.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.PickerRow.addEventListener","display":"(Method)\t\tTi.UI.PickerRow.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.PickerRow.animate","display":"(Method)\t\tTi.UI.PickerRow.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.PickerRow.fireEvent","display":"(Method)\t\tTi.UI.PickerRow.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.PickerRow.hide","display":"(Method)\t\tTi.UI.PickerRow.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.PickerRow.remove","display":"(Method)\t\tTi.UI.PickerRow.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.PickerRow.removeEventListener","display":"(Method)\t\tTi.UI.PickerRow.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.PickerRow.show","display":"(Method)\t\tTi.UI.PickerRow.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.PickerRow.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.PickerRow.toImage","display":"(Method)\t\tTi.UI.PickerRow.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.PickerRow.anchorPoint","display":"(Property)\tTi.UI.PickerRow.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.PickerRow.animatedCenterPoint","display":"(Property)\tTi.UI.PickerRow.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.PickerRow.backgroundColor","display":"(Property)\tTi.UI.PickerRow.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.PickerRow.backgroundGradient","display":"(Property)\tTi.UI.PickerRow.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.PickerRow.backgroundImage","display":"(Property)\tTi.UI.PickerRow.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.PickerRow.backgroundLeftCap","display":"(Property)\tTi.UI.PickerRow.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.PickerRow.backgroundTopCap","display":"(Property)\tTi.UI.PickerRow.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.PickerRow.borderColor","display":"(Property)\tTi.UI.PickerRow.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.PickerRow.borderRadius","display":"(Property)\tTi.UI.PickerRow.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.PickerRow.borderWidth","display":"(Property)\tTi.UI.PickerRow.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerRow.bottom","display":"(Property)\tTi.UI.PickerRow.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.PickerRow.center","display":"(Property)\tTi.UI.PickerRow.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font size when displaying the text. ignored when using a custom view</p>","insert":"$0","match":"Ti.UI.PickerRow.fontSize","display":"(Property)\tTi.UI.PickerRow.fontSize\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerRow.height","display":"(Property)\tTi.UI.PickerRow.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerRow.left","display":"(Property)\tTi.UI.PickerRow.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.PickerRow.opacity","display":"(Property)\tTi.UI.PickerRow.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerRow.right","display":"(Property)\tTi.UI.PickerRow.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>when used in the constructor, set the row to selected on initial display</p>","insert":"$0","match":"Ti.UI.PickerRow.selected","display":"(Property)\tTi.UI.PickerRow.selected\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.PickerRow.size","display":"(Property)\tTi.UI.PickerRow.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the display text</p>","insert":"$0","match":"Ti.UI.PickerRow.title","display":"(Property)\tTi.UI.PickerRow.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerRow.top","display":"(Property)\tTi.UI.PickerRow.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.PickerRow.touchEnabled","display":"(Property)\tTi.UI.PickerRow.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.PickerRow.transform","display":"(Property)\tTi.UI.PickerRow.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.PickerRow.visible","display":"(Property)\tTi.UI.PickerRow.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.PickerRow.width","display":"(Property)\tTi.UI.PickerRow.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.PickerRow.zIndex","display":"(Property)\tTi.UI.PickerRow.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Progress Bar is created by the method <a href=\"Titanium.UI.createProgressBar.html\">Titanium.UI.createProgressBar</a>.</p><hr /><p>For iPhone, progress bar styles are constants defined in <a href=\"Titanium.UI.iPhone.ProgressBarStyle\">Titanium.UI.iPhone.ProgressBarStyle</a>.</p>","insert":"$0","match":"Titanium.UI.ProgressBar","display":"(Namespace)\tTitanium.UI.ProgressBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>the color of the progress bar text</p>","insert":"$0","match":"Titanium.UI.ProgressBar.color","display":"(Property)\tTitanium.UI.ProgressBar.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font object for the progress bar text</p>","insert":"$0","match":"Titanium.UI.ProgressBar.font","display":"(Property)\tTitanium.UI.ProgressBar.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum value of the progress bar</p>","insert":"$0","match":"Titanium.UI.ProgressBar.max","display":"(Property)\tTitanium.UI.ProgressBar.max\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the progress bar message</p>","insert":"$0","match":"Titanium.UI.ProgressBar.message","display":"(Property)\tTitanium.UI.ProgressBar.message\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum value of the progress bar</p>","insert":"$0","match":"Titanium.UI.ProgressBar.min","display":"(Property)\tTitanium.UI.ProgressBar.min\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style of the progress bar</p>","insert":"$0","match":"Titanium.UI.ProgressBar.style","display":"(Property)\tTitanium.UI.ProgressBar.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current value of the progress bar</p>","insert":"$0","match":"Titanium.UI.ProgressBar.value","display":"(Property)\tTitanium.UI.ProgressBar.value\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Progress Bar is created by the method <a href=\"Titanium.UI.createProgressBar.html\">Titanium.UI.createProgressBar</a>.</p><hr /><p>For iPhone, progress bar styles are constants defined in <a href=\"Titanium.UI.iPhone.ProgressBarStyle\">Titanium.UI.iPhone.ProgressBarStyle</a>.</p>","insert":"$0","match":"Ti.UI.ProgressBar","display":"(Namespace)\tTi.UI.ProgressBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>the color of the progress bar text</p>","insert":"$0","match":"Ti.UI.ProgressBar.color","display":"(Property)\tTi.UI.ProgressBar.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the font object for the progress bar text</p>","insert":"$0","match":"Ti.UI.ProgressBar.font","display":"(Property)\tTi.UI.ProgressBar.font\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum value of the progress bar</p>","insert":"$0","match":"Ti.UI.ProgressBar.max","display":"(Property)\tTi.UI.ProgressBar.max\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the progress bar message</p>","insert":"$0","match":"Ti.UI.ProgressBar.message","display":"(Property)\tTi.UI.ProgressBar.message\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum value of the progress bar</p>","insert":"$0","match":"Ti.UI.ProgressBar.min","display":"(Property)\tTi.UI.ProgressBar.min\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style of the progress bar</p>","insert":"$0","match":"Ti.UI.ProgressBar.style","display":"(Property)\tTi.UI.ProgressBar.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current value of the progress bar</p>","insert":"$0","match":"Ti.UI.ProgressBar.value","display":"(Property)\tTi.UI.ProgressBar.value\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Scroll View is used to create a scrollable region of content.  Views added to the Scroll View will be scrolled based on the content size of the Scroll View. The Scroll View is created by the method <a href=\"Titanium.UI.createScrollView.html\">Titanium.UI.createScrollView</a>. Note: In Android, Scroll Views can only scroll in one direction, either vertical or horizontal, but not both at the same time. See the <a href=\"Titanium.UI.ScrollView.scrollType.html\">Titanium.UI.ScrollView.scrollType</a> property</p><hr /><p>If your scrollable region fits within the size of the content area the scroll view will not scroll.</p>","insert":"$0","match":"Titanium.UI.ScrollView","display":"(Namespace)\tTitanium.UI.ScrollView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ScrollView.add","display":"(Method)\t\tTitanium.UI.ScrollView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ScrollView.addEventListener","display":"(Method)\t\tTitanium.UI.ScrollView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ScrollView.animate","display":"(Method)\t\tTitanium.UI.ScrollView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.ScrollView.fireEvent","display":"(Method)\t\tTitanium.UI.ScrollView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ScrollView.hide","display":"(Method)\t\tTitanium.UI.ScrollView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ScrollView.remove","display":"(Method)\t\tTitanium.UI.ScrollView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ScrollView.removeEventListener","display":"(Method)\t\tTitanium.UI.ScrollView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scrollTo a particular point</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.scrollTo</u></b><i>:void()</i><br>(\n\t\t<span><b>x</b><i>:float</i></span>\n\t\t<span class='info'>the x point within the view</span>\n\t\t<span><b>y</b><i>:float</i></span>\n\t\t<span class='info'>the y point within the view</span>\n)\n</code>","insert":"(${1:${2:x}, ${3:y}})","match":"Titanium.UI.ScrollView.scrollTo","display":"(Method)\t\tTitanium.UI.ScrollView.scrollTo\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ScrollView.show","display":"(Method)\t\tTitanium.UI.ScrollView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.ScrollView.toImage","display":"(Method)\t\tTitanium.UI.ScrollView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.ScrollView.anchorPoint","display":"(Property)\tTitanium.UI.ScrollView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.ScrollView.animatedCenterPoint","display":"(Property)\tTitanium.UI.ScrollView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.ScrollView.backgroundColor","display":"(Property)\tTitanium.UI.ScrollView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.ScrollView.backgroundGradient","display":"(Property)\tTitanium.UI.ScrollView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.ScrollView.backgroundImage","display":"(Property)\tTitanium.UI.ScrollView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.ScrollView.backgroundLeftCap","display":"(Property)\tTitanium.UI.ScrollView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.ScrollView.backgroundTopCap","display":"(Property)\tTitanium.UI.ScrollView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.ScrollView.borderColor","display":"(Property)\tTitanium.UI.ScrollView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.ScrollView.borderRadius","display":"(Property)\tTitanium.UI.ScrollView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.ScrollView.borderWidth","display":"(Property)\tTitanium.UI.ScrollView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollView.bottom","display":"(Property)\tTitanium.UI.ScrollView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.ScrollView.center","display":"(Property)\tTitanium.UI.ScrollView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the scrollable area</p>","insert":"$0","match":"Titanium.UI.ScrollView.contentHeight","display":"(Property)\tTitanium.UI.ScrollView.contentHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an object (with x and y properties) to indicate the offset of the content area</p>","insert":"$0","match":"Titanium.UI.ScrollView.contentOffset","display":"(Property)\tTitanium.UI.ScrollView.contentOffset\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the width of the scrollable area</p>","insert":"$0","match":"Titanium.UI.ScrollView.contentWidth","display":"(Property)\tTitanium.UI.ScrollView.contentWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control bounce during scrolling</p>","insert":"$0","match":"Titanium.UI.ScrollView.disableBounce","display":"(Property)\tTitanium.UI.ScrollView.disableBounce\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollView.height","display":"(Property)\tTitanium.UI.ScrollView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the horizontal bounce during scrolling</p>","insert":"$0","match":"Titanium.UI.ScrollView.horizontalBounce","display":"(Property)\tTitanium.UI.ScrollView.horizontalBounce\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollView.left","display":"(Property)\tTitanium.UI.ScrollView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum scale of the content</p>","insert":"$0","match":"Titanium.UI.ScrollView.maxZoomScale","display":"(Property)\tTitanium.UI.ScrollView.maxZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum scale of the content</p>","insert":"$0","match":"Titanium.UI.ScrollView.minZoomScale","display":"(Property)\tTitanium.UI.ScrollView.minZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.ScrollView.opacity","display":"(Property)\tTitanium.UI.ScrollView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollView.right","display":"(Property)\tTitanium.UI.ScrollView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>(Android only) the type of ScrollView: \"vertical\" or \"horizontal\"</p>","insert":"$0","match":"Titanium.UI.ScrollView.scrollType","display":"(Property)\tTitanium.UI.ScrollView.scrollType\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the horizontal scroll indicator is visible</p>","insert":"$0","match":"Titanium.UI.ScrollView.showHorizontalScrollIndicator","display":"(Property)\tTitanium.UI.ScrollView.showHorizontalScrollIndicator\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the vertical scroll indicator is visible</p>","insert":"$0","match":"Titanium.UI.ScrollView.showVerticalScrollIndicator","display":"(Property)\tTitanium.UI.ScrollView.showVerticalScrollIndicator\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.ScrollView.size","display":"(Property)\tTitanium.UI.ScrollView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollView.top","display":"(Property)\tTitanium.UI.ScrollView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.ScrollView.touchEnabled","display":"(Property)\tTitanium.UI.ScrollView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.ScrollView.transform","display":"(Property)\tTitanium.UI.ScrollView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the vertical bounce during scrolling</p>","insert":"$0","match":"Titanium.UI.ScrollView.verticalBounce","display":"(Property)\tTitanium.UI.ScrollView.verticalBounce\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.ScrollView.visible","display":"(Property)\tTitanium.UI.ScrollView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollView.width","display":"(Property)\tTitanium.UI.ScrollView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.ScrollView.zIndex","display":"(Property)\tTitanium.UI.ScrollView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set the zoom scale for the current content area</p>","insert":"$0","match":"Titanium.UI.ScrollView.zoomScale","display":"(Property)\tTitanium.UI.ScrollView.zoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Scroll View is used to create a scrollable region of content.  Views added to the Scroll View will be scrolled based on the content size of the Scroll View. The Scroll View is created by the method <a href=\"Titanium.UI.createScrollView.html\">Titanium.UI.createScrollView</a>. Note: In Android, Scroll Views can only scroll in one direction, either vertical or horizontal, but not both at the same time. See the <a href=\"Titanium.UI.ScrollView.scrollType.html\">Titanium.UI.ScrollView.scrollType</a> property</p><hr /><p>If your scrollable region fits within the size of the content area the scroll view will not scroll.</p>","insert":"$0","match":"Ti.UI.ScrollView","display":"(Namespace)\tTi.UI.ScrollView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ScrollView.add","display":"(Method)\t\tTi.UI.ScrollView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ScrollView.addEventListener","display":"(Method)\t\tTi.UI.ScrollView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ScrollView.animate","display":"(Method)\t\tTi.UI.ScrollView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.ScrollView.fireEvent","display":"(Method)\t\tTi.UI.ScrollView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ScrollView.hide","display":"(Method)\t\tTi.UI.ScrollView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ScrollView.remove","display":"(Method)\t\tTi.UI.ScrollView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ScrollView.removeEventListener","display":"(Method)\t\tTi.UI.ScrollView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scrollTo a particular point</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.scrollTo</u></b><i>:void()</i><br>(\n\t\t<span><b>x</b><i>:float</i></span>\n\t\t<span class='info'>the x point within the view</span>\n\t\t<span><b>y</b><i>:float</i></span>\n\t\t<span class='info'>the y point within the view</span>\n)\n</code>","insert":"(${1:${2:x}, ${3:y}})","match":"Ti.UI.ScrollView.scrollTo","display":"(Method)\t\tTi.UI.ScrollView.scrollTo\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ScrollView.show","display":"(Method)\t\tTi.UI.ScrollView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.ScrollView.toImage","display":"(Method)\t\tTi.UI.ScrollView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.ScrollView.anchorPoint","display":"(Property)\tTi.UI.ScrollView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.ScrollView.animatedCenterPoint","display":"(Property)\tTi.UI.ScrollView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.ScrollView.backgroundColor","display":"(Property)\tTi.UI.ScrollView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.ScrollView.backgroundGradient","display":"(Property)\tTi.UI.ScrollView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.ScrollView.backgroundImage","display":"(Property)\tTi.UI.ScrollView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.ScrollView.backgroundLeftCap","display":"(Property)\tTi.UI.ScrollView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.ScrollView.backgroundTopCap","display":"(Property)\tTi.UI.ScrollView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.ScrollView.borderColor","display":"(Property)\tTi.UI.ScrollView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.ScrollView.borderRadius","display":"(Property)\tTi.UI.ScrollView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.ScrollView.borderWidth","display":"(Property)\tTi.UI.ScrollView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollView.bottom","display":"(Property)\tTi.UI.ScrollView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.ScrollView.center","display":"(Property)\tTi.UI.ScrollView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the scrollable area</p>","insert":"$0","match":"Ti.UI.ScrollView.contentHeight","display":"(Property)\tTi.UI.ScrollView.contentHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an object (with x and y properties) to indicate the offset of the content area</p>","insert":"$0","match":"Ti.UI.ScrollView.contentOffset","display":"(Property)\tTi.UI.ScrollView.contentOffset\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the width of the scrollable area</p>","insert":"$0","match":"Ti.UI.ScrollView.contentWidth","display":"(Property)\tTi.UI.ScrollView.contentWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control bounce during scrolling</p>","insert":"$0","match":"Ti.UI.ScrollView.disableBounce","display":"(Property)\tTi.UI.ScrollView.disableBounce\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollView.height","display":"(Property)\tTi.UI.ScrollView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the horizontal bounce during scrolling</p>","insert":"$0","match":"Ti.UI.ScrollView.horizontalBounce","display":"(Property)\tTi.UI.ScrollView.horizontalBounce\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollView.left","display":"(Property)\tTi.UI.ScrollView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum scale of the content</p>","insert":"$0","match":"Ti.UI.ScrollView.maxZoomScale","display":"(Property)\tTi.UI.ScrollView.maxZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum scale of the content</p>","insert":"$0","match":"Ti.UI.ScrollView.minZoomScale","display":"(Property)\tTi.UI.ScrollView.minZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.ScrollView.opacity","display":"(Property)\tTi.UI.ScrollView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollView.right","display":"(Property)\tTi.UI.ScrollView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>(Android only) the type of ScrollView: \"vertical\" or \"horizontal\"</p>","insert":"$0","match":"Ti.UI.ScrollView.scrollType","display":"(Property)\tTi.UI.ScrollView.scrollType\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the horizontal scroll indicator is visible</p>","insert":"$0","match":"Ti.UI.ScrollView.showHorizontalScrollIndicator","display":"(Property)\tTi.UI.ScrollView.showHorizontalScrollIndicator\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the vertical scroll indicator is visible</p>","insert":"$0","match":"Ti.UI.ScrollView.showVerticalScrollIndicator","display":"(Property)\tTi.UI.ScrollView.showVerticalScrollIndicator\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.ScrollView.size","display":"(Property)\tTi.UI.ScrollView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollView.top","display":"(Property)\tTi.UI.ScrollView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.ScrollView.touchEnabled","display":"(Property)\tTi.UI.ScrollView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.ScrollView.transform","display":"(Property)\tTi.UI.ScrollView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the vertical bounce during scrolling</p>","insert":"$0","match":"Ti.UI.ScrollView.verticalBounce","display":"(Property)\tTi.UI.ScrollView.verticalBounce\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.ScrollView.visible","display":"(Property)\tTi.UI.ScrollView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollView.width","display":"(Property)\tTi.UI.ScrollView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.ScrollView.zIndex","display":"(Property)\tTi.UI.ScrollView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set the zoom scale for the current content area</p>","insert":"$0","match":"Ti.UI.ScrollView.zoomScale","display":"(Property)\tTi.UI.ScrollView.zoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Scrollable View provides a view that supports horizontal scrolling on one or more views in a gesture motion.  The Scrollable View also optionally supports a visual paging control to indicate the page that the view is visible. The Scrollable View is created by the method <a href=\"Titanium.UI.createScrollableView.html\">Titanium.UI.createScrollableView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.ScrollableView","display":"(Namespace)\tTitanium.UI.ScrollableView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ScrollableView.add","display":"(Method)\t\tTitanium.UI.ScrollableView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ScrollableView.addEventListener","display":"(Method)\t\tTitanium.UI.ScrollableView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add a new view to the Scrollable View</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.addView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ScrollableView.addView","display":"(Method)\t\tTitanium.UI.ScrollableView.addView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ScrollableView.animate","display":"(Method)\t\tTitanium.UI.ScrollableView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.ScrollableView.fireEvent","display":"(Method)\t\tTitanium.UI.ScrollableView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ScrollableView.hide","display":"(Method)\t\tTitanium.UI.ScrollableView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ScrollableView.remove","display":"(Method)\t\tTitanium.UI.ScrollableView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.ScrollableView.removeEventListener","display":"(Method)\t\tTitanium.UI.ScrollableView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove an existing view from the Scrollable View</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.removeView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.ScrollableView.removeView","display":"(Method)\t\tTitanium.UI.ScrollableView.removeView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scroll to a specific view</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.scrollToView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:int,object</i></span>\n\t\t<span class='info'>either an integer index or the view object to bring into view as the currentPage</span>\n)\n</code>","insert":"(${1:${2:view}})","match":"Titanium.UI.ScrollableView.scrollToView","display":"(Method)\t\tTitanium.UI.ScrollableView.scrollToView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.ScrollableView.show","display":"(Method)\t\tTitanium.UI.ScrollableView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.ScrollableView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.ScrollableView.toImage","display":"(Method)\t\tTitanium.UI.ScrollableView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.ScrollableView.anchorPoint","display":"(Property)\tTitanium.UI.ScrollableView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.ScrollableView.animatedCenterPoint","display":"(Property)\tTitanium.UI.ScrollableView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.ScrollableView.backgroundColor","display":"(Property)\tTitanium.UI.ScrollableView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.ScrollableView.backgroundGradient","display":"(Property)\tTitanium.UI.ScrollableView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.ScrollableView.backgroundImage","display":"(Property)\tTitanium.UI.ScrollableView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.ScrollableView.backgroundLeftCap","display":"(Property)\tTitanium.UI.ScrollableView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.ScrollableView.backgroundTopCap","display":"(Property)\tTitanium.UI.ScrollableView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.ScrollableView.borderColor","display":"(Property)\tTitanium.UI.ScrollableView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.ScrollableView.borderRadius","display":"(Property)\tTitanium.UI.ScrollableView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.ScrollableView.borderWidth","display":"(Property)\tTitanium.UI.ScrollableView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollableView.bottom","display":"(Property)\tTitanium.UI.ScrollableView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.ScrollableView.center","display":"(Property)\tTitanium.UI.ScrollableView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current page visible in the view</p>","insert":"$0","match":"Titanium.UI.ScrollableView.currentPage","display":"(Property)\tTitanium.UI.ScrollableView.currentPage\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollableView.height","display":"(Property)\tTitanium.UI.ScrollableView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollableView.left","display":"(Property)\tTitanium.UI.ScrollableView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum zoom scale for the view</p>","insert":"$0","match":"Titanium.UI.ScrollableView.maxZoomScale","display":"(Property)\tTitanium.UI.ScrollableView.maxZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum zoom scale for the view</p>","insert":"$0","match":"Titanium.UI.ScrollableView.minZoomScale","display":"(Property)\tTitanium.UI.ScrollableView.minZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.ScrollableView.opacity","display":"(Property)\tTitanium.UI.ScrollableView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the paging control. defaults to black.</p>","insert":"$0","match":"Titanium.UI.ScrollableView.pagingControlColor","display":"(Property)\tTitanium.UI.ScrollableView.pagingControlColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height in pixels of the paging control, if visible. defaults to 20</p>","insert":"$0","match":"Titanium.UI.ScrollableView.pagingControlHeight","display":"(Property)\tTitanium.UI.ScrollableView.pagingControlHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollableView.right","display":"(Property)\tTitanium.UI.ScrollableView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the paging control UI is visible</p>","insert":"$0","match":"Titanium.UI.ScrollableView.showPagingControl","display":"(Property)\tTitanium.UI.ScrollableView.showPagingControl\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.ScrollableView.size","display":"(Property)\tTitanium.UI.ScrollableView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollableView.top","display":"(Property)\tTitanium.UI.ScrollableView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.ScrollableView.touchEnabled","display":"(Property)\tTitanium.UI.ScrollableView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.ScrollableView.transform","display":"(Property)\tTitanium.UI.ScrollableView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of view objects to place in the view</p>","insert":"$0","match":"Titanium.UI.ScrollableView.views","display":"(Property)\tTitanium.UI.ScrollableView.views\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.ScrollableView.visible","display":"(Property)\tTitanium.UI.ScrollableView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.ScrollableView.width","display":"(Property)\tTitanium.UI.ScrollableView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.ScrollableView.zIndex","display":"(Property)\tTitanium.UI.ScrollableView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Scrollable View provides a view that supports horizontal scrolling on one or more views in a gesture motion.  The Scrollable View also optionally supports a visual paging control to indicate the page that the view is visible. The Scrollable View is created by the method <a href=\"Titanium.UI.createScrollableView.html\">Titanium.UI.createScrollableView</a>.</p><hr />","insert":"$0","match":"Ti.UI.ScrollableView","display":"(Namespace)\tTi.UI.ScrollableView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ScrollableView.add","display":"(Method)\t\tTi.UI.ScrollableView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ScrollableView.addEventListener","display":"(Method)\t\tTi.UI.ScrollableView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add a new view to the Scrollable View</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.addView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ScrollableView.addView","display":"(Method)\t\tTi.UI.ScrollableView.addView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ScrollableView.animate","display":"(Method)\t\tTi.UI.ScrollableView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.ScrollableView.fireEvent","display":"(Method)\t\tTi.UI.ScrollableView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ScrollableView.hide","display":"(Method)\t\tTi.UI.ScrollableView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ScrollableView.remove","display":"(Method)\t\tTi.UI.ScrollableView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.ScrollableView.removeEventListener","display":"(Method)\t\tTi.UI.ScrollableView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove an existing view from the Scrollable View</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.removeView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.ScrollableView.removeView","display":"(Method)\t\tTi.UI.ScrollableView.removeView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scroll to a specific view</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.scrollToView</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:int,object</i></span>\n\t\t<span class='info'>either an integer index or the view object to bring into view as the currentPage</span>\n)\n</code>","insert":"(${1:${2:view}})","match":"Ti.UI.ScrollableView.scrollToView","display":"(Method)\t\tTi.UI.ScrollableView.scrollToView\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.ScrollableView.show","display":"(Method)\t\tTi.UI.ScrollableView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.ScrollableView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.ScrollableView.toImage","display":"(Method)\t\tTi.UI.ScrollableView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.ScrollableView.anchorPoint","display":"(Property)\tTi.UI.ScrollableView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.ScrollableView.animatedCenterPoint","display":"(Property)\tTi.UI.ScrollableView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.ScrollableView.backgroundColor","display":"(Property)\tTi.UI.ScrollableView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.ScrollableView.backgroundGradient","display":"(Property)\tTi.UI.ScrollableView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.ScrollableView.backgroundImage","display":"(Property)\tTi.UI.ScrollableView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.ScrollableView.backgroundLeftCap","display":"(Property)\tTi.UI.ScrollableView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.ScrollableView.backgroundTopCap","display":"(Property)\tTi.UI.ScrollableView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.ScrollableView.borderColor","display":"(Property)\tTi.UI.ScrollableView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.ScrollableView.borderRadius","display":"(Property)\tTi.UI.ScrollableView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.ScrollableView.borderWidth","display":"(Property)\tTi.UI.ScrollableView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollableView.bottom","display":"(Property)\tTi.UI.ScrollableView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.ScrollableView.center","display":"(Property)\tTi.UI.ScrollableView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the current page visible in the view</p>","insert":"$0","match":"Ti.UI.ScrollableView.currentPage","display":"(Property)\tTi.UI.ScrollableView.currentPage\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollableView.height","display":"(Property)\tTi.UI.ScrollableView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollableView.left","display":"(Property)\tTi.UI.ScrollableView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum zoom scale for the view</p>","insert":"$0","match":"Ti.UI.ScrollableView.maxZoomScale","display":"(Property)\tTi.UI.ScrollableView.maxZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum zoom scale for the view</p>","insert":"$0","match":"Ti.UI.ScrollableView.minZoomScale","display":"(Property)\tTi.UI.ScrollableView.minZoomScale\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.ScrollableView.opacity","display":"(Property)\tTi.UI.ScrollableView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the paging control. defaults to black.</p>","insert":"$0","match":"Ti.UI.ScrollableView.pagingControlColor","display":"(Property)\tTi.UI.ScrollableView.pagingControlColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height in pixels of the paging control, if visible. defaults to 20</p>","insert":"$0","match":"Ti.UI.ScrollableView.pagingControlHeight","display":"(Property)\tTi.UI.ScrollableView.pagingControlHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollableView.right","display":"(Property)\tTi.UI.ScrollableView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate whether the paging control UI is visible</p>","insert":"$0","match":"Ti.UI.ScrollableView.showPagingControl","display":"(Property)\tTi.UI.ScrollableView.showPagingControl\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.ScrollableView.size","display":"(Property)\tTi.UI.ScrollableView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollableView.top","display":"(Property)\tTi.UI.ScrollableView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.ScrollableView.touchEnabled","display":"(Property)\tTi.UI.ScrollableView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.ScrollableView.transform","display":"(Property)\tTi.UI.ScrollableView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of view objects to place in the view</p>","insert":"$0","match":"Ti.UI.ScrollableView.views","display":"(Property)\tTi.UI.ScrollableView.views\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.ScrollableView.visible","display":"(Property)\tTi.UI.ScrollableView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.ScrollableView.width","display":"(Property)\tTi.UI.ScrollableView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.ScrollableView.zIndex","display":"(Property)\tTi.UI.ScrollableView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Search Bar is created by the method <a href=\"Titanium.UI.createSearchBar.html\">Titanium.UI.createSearchBar</a>.</p><hr />","insert":"$0","match":"Titanium.UI.SearchBar","display":"(Namespace)\tTitanium.UI.SearchBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.SearchBar.add","display":"(Method)\t\tTitanium.UI.SearchBar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.SearchBar.addEventListener","display":"(Method)\t\tTitanium.UI.SearchBar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.SearchBar.animate","display":"(Method)\t\tTitanium.UI.SearchBar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.SearchBar.blur","display":"(Method)\t\tTitanium.UI.SearchBar.blur\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.SearchBar.fireEvent","display":"(Method)\t\tTitanium.UI.SearchBar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.SearchBar.focus","display":"(Method)\t\tTitanium.UI.SearchBar.focus\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.SearchBar.hide","display":"(Method)\t\tTitanium.UI.SearchBar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.SearchBar.remove","display":"(Method)\t\tTitanium.UI.SearchBar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.SearchBar.removeEventListener","display":"(Method)\t\tTitanium.UI.SearchBar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.SearchBar.show","display":"(Method)\t\tTitanium.UI.SearchBar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.SearchBar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.SearchBar.toImage","display":"(Method)\t\tTitanium.UI.SearchBar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.SearchBar.anchorPoint","display":"(Property)\tTitanium.UI.SearchBar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.SearchBar.animatedCenterPoint","display":"(Property)\tTitanium.UI.SearchBar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the text in the field should be autocapitalized as typed</p>","insert":"$0","match":"Titanium.UI.SearchBar.autocapitalization","display":"(Property)\tTitanium.UI.SearchBar.autocapitalization\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the text in the field should be autocorrected as typed</p>","insert":"$0","match":"Titanium.UI.SearchBar.autocorrect","display":"(Property)\tTitanium.UI.SearchBar.autocorrect\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.SearchBar.backgroundColor","display":"(Property)\tTitanium.UI.SearchBar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.SearchBar.backgroundGradient","display":"(Property)\tTitanium.UI.SearchBar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.SearchBar.backgroundImage","display":"(Property)\tTitanium.UI.SearchBar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.SearchBar.backgroundLeftCap","display":"(Property)\tTitanium.UI.SearchBar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.SearchBar.backgroundTopCap","display":"(Property)\tTitanium.UI.SearchBar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the bar color of the search bar view</p>","insert":"$0","match":"Titanium.UI.SearchBar.barColor","display":"(Property)\tTitanium.UI.SearchBar.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.SearchBar.borderColor","display":"(Property)\tTitanium.UI.SearchBar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.SearchBar.borderRadius","display":"(Property)\tTitanium.UI.SearchBar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.SearchBar.borderWidth","display":"(Property)\tTitanium.UI.SearchBar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.SearchBar.bottom","display":"(Property)\tTitanium.UI.SearchBar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.SearchBar.center","display":"(Property)\tTitanium.UI.SearchBar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.SearchBar.height","display":"(Property)\tTitanium.UI.SearchBar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text to show when the search bar field is not focused</p>","insert":"$0","match":"Titanium.UI.SearchBar.hintText","display":"(Property)\tTitanium.UI.SearchBar.hintText\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the keyboard type constant to use when the field is focused</p>","insert":"$0","match":"Titanium.UI.SearchBar.keyboardType","display":"(Property)\tTitanium.UI.SearchBar.keyboardType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.SearchBar.left","display":"(Property)\tTitanium.UI.SearchBar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.SearchBar.opacity","display":"(Property)\tTitanium.UI.SearchBar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a single line of text displayed at the top of the search bar</p>","insert":"$0","match":"Titanium.UI.SearchBar.prompt","display":"(Property)\tTitanium.UI.SearchBar.prompt\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.SearchBar.right","display":"(Property)\tTitanium.UI.SearchBar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicates whether the cancel button is displayed</p>","insert":"$0","match":"Titanium.UI.SearchBar.showCancel","display":"(Property)\tTitanium.UI.SearchBar.showCancel\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.SearchBar.size","display":"(Property)\tTitanium.UI.SearchBar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.SearchBar.top","display":"(Property)\tTitanium.UI.SearchBar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.SearchBar.touchEnabled","display":"(Property)\tTitanium.UI.SearchBar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.SearchBar.transform","display":"(Property)\tTitanium.UI.SearchBar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the value of the search bar</p>","insert":"$0","match":"Titanium.UI.SearchBar.value","display":"(Property)\tTitanium.UI.SearchBar.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.SearchBar.visible","display":"(Property)\tTitanium.UI.SearchBar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.SearchBar.width","display":"(Property)\tTitanium.UI.SearchBar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.SearchBar.zIndex","display":"(Property)\tTitanium.UI.SearchBar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Search Bar is created by the method <a href=\"Titanium.UI.createSearchBar.html\">Titanium.UI.createSearchBar</a>.</p><hr />","insert":"$0","match":"Ti.UI.SearchBar","display":"(Namespace)\tTi.UI.SearchBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.SearchBar.add","display":"(Method)\t\tTi.UI.SearchBar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.SearchBar.addEventListener","display":"(Method)\t\tTi.UI.SearchBar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.SearchBar.animate","display":"(Method)\t\tTi.UI.SearchBar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.SearchBar.blur","display":"(Method)\t\tTi.UI.SearchBar.blur\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.SearchBar.fireEvent","display":"(Method)\t\tTi.UI.SearchBar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.SearchBar.focus","display":"(Method)\t\tTi.UI.SearchBar.focus\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.SearchBar.hide","display":"(Method)\t\tTi.UI.SearchBar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.SearchBar.remove","display":"(Method)\t\tTi.UI.SearchBar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.SearchBar.removeEventListener","display":"(Method)\t\tTi.UI.SearchBar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.SearchBar.show","display":"(Method)\t\tTi.UI.SearchBar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.SearchBar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.SearchBar.toImage","display":"(Method)\t\tTi.UI.SearchBar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.SearchBar.anchorPoint","display":"(Property)\tTi.UI.SearchBar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.SearchBar.animatedCenterPoint","display":"(Property)\tTi.UI.SearchBar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the text in the field should be autocapitalized as typed</p>","insert":"$0","match":"Ti.UI.SearchBar.autocapitalization","display":"(Property)\tTi.UI.SearchBar.autocapitalization\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the text in the field should be autocorrected as typed</p>","insert":"$0","match":"Ti.UI.SearchBar.autocorrect","display":"(Property)\tTi.UI.SearchBar.autocorrect\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.SearchBar.backgroundColor","display":"(Property)\tTi.UI.SearchBar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.SearchBar.backgroundGradient","display":"(Property)\tTi.UI.SearchBar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.SearchBar.backgroundImage","display":"(Property)\tTi.UI.SearchBar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.SearchBar.backgroundLeftCap","display":"(Property)\tTi.UI.SearchBar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.SearchBar.backgroundTopCap","display":"(Property)\tTi.UI.SearchBar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the bar color of the search bar view</p>","insert":"$0","match":"Ti.UI.SearchBar.barColor","display":"(Property)\tTi.UI.SearchBar.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.SearchBar.borderColor","display":"(Property)\tTi.UI.SearchBar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.SearchBar.borderRadius","display":"(Property)\tTi.UI.SearchBar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.SearchBar.borderWidth","display":"(Property)\tTi.UI.SearchBar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.SearchBar.bottom","display":"(Property)\tTi.UI.SearchBar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.SearchBar.center","display":"(Property)\tTi.UI.SearchBar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.SearchBar.height","display":"(Property)\tTi.UI.SearchBar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the text to show when the search bar field is not focused</p>","insert":"$0","match":"Ti.UI.SearchBar.hintText","display":"(Property)\tTi.UI.SearchBar.hintText\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the keyboard type constant to use when the field is focused</p>","insert":"$0","match":"Ti.UI.SearchBar.keyboardType","display":"(Property)\tTi.UI.SearchBar.keyboardType\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.SearchBar.left","display":"(Property)\tTi.UI.SearchBar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.SearchBar.opacity","display":"(Property)\tTi.UI.SearchBar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a single line of text displayed at the top of the search bar</p>","insert":"$0","match":"Ti.UI.SearchBar.prompt","display":"(Property)\tTi.UI.SearchBar.prompt\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.SearchBar.right","display":"(Property)\tTi.UI.SearchBar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicates whether the cancel button is displayed</p>","insert":"$0","match":"Ti.UI.SearchBar.showCancel","display":"(Property)\tTi.UI.SearchBar.showCancel\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.SearchBar.size","display":"(Property)\tTi.UI.SearchBar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.SearchBar.top","display":"(Property)\tTi.UI.SearchBar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.SearchBar.touchEnabled","display":"(Property)\tTi.UI.SearchBar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.SearchBar.transform","display":"(Property)\tTi.UI.SearchBar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the value of the search bar</p>","insert":"$0","match":"Ti.UI.SearchBar.value","display":"(Property)\tTi.UI.SearchBar.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.SearchBar.visible","display":"(Property)\tTi.UI.SearchBar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.SearchBar.width","display":"(Property)\tTi.UI.SearchBar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.SearchBar.zIndex","display":"(Property)\tTi.UI.SearchBar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Slider is created by the method <a href=\"Titanium.UI.createSlider.html\">Titanium.UI.createSlider</a>.</p><hr />","insert":"$0","match":"Titanium.UI.Slider","display":"(Namespace)\tTitanium.UI.Slider","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Slider.add","display":"(Method)\t\tTitanium.UI.Slider.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Slider.addEventListener","display":"(Method)\t\tTitanium.UI.Slider.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Slider.animate","display":"(Method)\t\tTitanium.UI.Slider.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Slider.fireEvent","display":"(Method)\t\tTitanium.UI.Slider.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Slider.hide","display":"(Method)\t\tTitanium.UI.Slider.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Slider.remove","display":"(Method)\t\tTitanium.UI.Slider.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Slider.removeEventListener","display":"(Method)\t\tTitanium.UI.Slider.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Slider.show","display":"(Method)\t\tTitanium.UI.Slider.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Slider.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Slider.toImage","display":"(Method)\t\tTitanium.UI.Slider.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Slider.anchorPoint","display":"(Property)\tTitanium.UI.Slider.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Slider.animatedCenterPoint","display":"(Property)\tTitanium.UI.Slider.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.Slider.backgroundColor","display":"(Property)\tTitanium.UI.Slider.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Slider.backgroundGradient","display":"(Property)\tTitanium.UI.Slider.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.Slider.backgroundImage","display":"(Property)\tTitanium.UI.Slider.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Slider.backgroundLeftCap","display":"(Property)\tTitanium.UI.Slider.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Slider.backgroundTopCap","display":"(Property)\tTitanium.UI.Slider.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Slider.borderColor","display":"(Property)\tTitanium.UI.Slider.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Slider.borderRadius","display":"(Property)\tTitanium.UI.Slider.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Slider.borderWidth","display":"(Property)\tTitanium.UI.Slider.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Slider.bottom","display":"(Property)\tTitanium.UI.Slider.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Slider.center","display":"(Property)\tTitanium.UI.Slider.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track when in the disabled state</p>","insert":"$0","match":"Titanium.UI.Slider.disabledLeftTrackImage","display":"(Property)\tTitanium.UI.Slider.disabledLeftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track when in the disabled state</p>","insert":"$0","match":"Titanium.UI.Slider.disabledRightTrackImage","display":"(Property)\tTitanium.UI.Slider.disabledRightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider thumb when in the disabled state</p>","insert":"$0","match":"Titanium.UI.Slider.disabledThumbImage","display":"(Property)\tTitanium.UI.Slider.disabledThumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate the enabled state of the slider</p>","insert":"$0","match":"Titanium.UI.Slider.enabled","display":"(Property)\tTitanium.UI.Slider.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Slider.height","display":"(Property)\tTitanium.UI.Slider.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track when in the highlighted state</p>","insert":"$0","match":"Titanium.UI.Slider.highlightedLeftTrackImage","display":"(Property)\tTitanium.UI.Slider.highlightedLeftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track when in the highlighted state</p>","insert":"$0","match":"Titanium.UI.Slider.highlightedRightTrackImage","display":"(Property)\tTitanium.UI.Slider.highlightedRightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider thumb when in the highlighted state</p>","insert":"$0","match":"Titanium.UI.Slider.highlightedThumbImage","display":"(Property)\tTitanium.UI.Slider.highlightedThumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Slider.left","display":"(Property)\tTitanium.UI.Slider.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track</p>","insert":"$0","match":"Titanium.UI.Slider.leftTrackImage","display":"(Property)\tTitanium.UI.Slider.leftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum slider value</p>","insert":"$0","match":"Titanium.UI.Slider.max","display":"(Property)\tTitanium.UI.Slider.max\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum slider value</p>","insert":"$0","match":"Titanium.UI.Slider.min","display":"(Property)\tTitanium.UI.Slider.min\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Slider.opacity","display":"(Property)\tTitanium.UI.Slider.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Slider.right","display":"(Property)\tTitanium.UI.Slider.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track</p>","insert":"$0","match":"Titanium.UI.Slider.rightTrackImage","display":"(Property)\tTitanium.UI.Slider.rightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track when in the selected state</p>","insert":"$0","match":"Titanium.UI.Slider.selectedLeftTrackImage","display":"(Property)\tTitanium.UI.Slider.selectedLeftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track when in the selected state</p>","insert":"$0","match":"Titanium.UI.Slider.selectedRightTrackImage","display":"(Property)\tTitanium.UI.Slider.selectedRightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider thumb when in the selected state</p>","insert":"$0","match":"Titanium.UI.Slider.selectedThumbImage","display":"(Property)\tTitanium.UI.Slider.selectedThumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Slider.size","display":"(Property)\tTitanium.UI.Slider.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url to the slider thumb</p>","insert":"$0","match":"Titanium.UI.Slider.thumbImage","display":"(Property)\tTitanium.UI.Slider.thumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Slider.top","display":"(Property)\tTitanium.UI.Slider.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Slider.touchEnabled","display":"(Property)\tTitanium.UI.Slider.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Slider.transform","display":"(Property)\tTitanium.UI.Slider.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the value of the slider</p>","insert":"$0","match":"Titanium.UI.Slider.value","display":"(Property)\tTitanium.UI.Slider.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Slider.visible","display":"(Property)\tTitanium.UI.Slider.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Slider.width","display":"(Property)\tTitanium.UI.Slider.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Slider.zIndex","display":"(Property)\tTitanium.UI.Slider.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Slider is created by the method <a href=\"Titanium.UI.createSlider.html\">Titanium.UI.createSlider</a>.</p><hr />","insert":"$0","match":"Ti.UI.Slider","display":"(Namespace)\tTi.UI.Slider","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Slider.add","display":"(Method)\t\tTi.UI.Slider.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Slider.addEventListener","display":"(Method)\t\tTi.UI.Slider.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Slider.animate","display":"(Method)\t\tTi.UI.Slider.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Slider.fireEvent","display":"(Method)\t\tTi.UI.Slider.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Slider.hide","display":"(Method)\t\tTi.UI.Slider.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Slider.remove","display":"(Method)\t\tTi.UI.Slider.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Slider.removeEventListener","display":"(Method)\t\tTi.UI.Slider.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Slider.show","display":"(Method)\t\tTi.UI.Slider.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Slider.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Slider.toImage","display":"(Method)\t\tTi.UI.Slider.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Slider.anchorPoint","display":"(Property)\tTi.UI.Slider.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Slider.animatedCenterPoint","display":"(Property)\tTi.UI.Slider.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.Slider.backgroundColor","display":"(Property)\tTi.UI.Slider.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Slider.backgroundGradient","display":"(Property)\tTi.UI.Slider.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.Slider.backgroundImage","display":"(Property)\tTi.UI.Slider.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Slider.backgroundLeftCap","display":"(Property)\tTi.UI.Slider.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Slider.backgroundTopCap","display":"(Property)\tTi.UI.Slider.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Slider.borderColor","display":"(Property)\tTi.UI.Slider.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Slider.borderRadius","display":"(Property)\tTi.UI.Slider.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Slider.borderWidth","display":"(Property)\tTi.UI.Slider.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Slider.bottom","display":"(Property)\tTi.UI.Slider.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Slider.center","display":"(Property)\tTi.UI.Slider.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track when in the disabled state</p>","insert":"$0","match":"Ti.UI.Slider.disabledLeftTrackImage","display":"(Property)\tTi.UI.Slider.disabledLeftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track when in the disabled state</p>","insert":"$0","match":"Ti.UI.Slider.disabledRightTrackImage","display":"(Property)\tTi.UI.Slider.disabledRightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider thumb when in the disabled state</p>","insert":"$0","match":"Ti.UI.Slider.disabledThumbImage","display":"(Property)\tTi.UI.Slider.disabledThumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate the enabled state of the slider</p>","insert":"$0","match":"Ti.UI.Slider.enabled","display":"(Property)\tTi.UI.Slider.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Slider.height","display":"(Property)\tTi.UI.Slider.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track when in the highlighted state</p>","insert":"$0","match":"Ti.UI.Slider.highlightedLeftTrackImage","display":"(Property)\tTi.UI.Slider.highlightedLeftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track when in the highlighted state</p>","insert":"$0","match":"Ti.UI.Slider.highlightedRightTrackImage","display":"(Property)\tTi.UI.Slider.highlightedRightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider thumb when in the highlighted state</p>","insert":"$0","match":"Ti.UI.Slider.highlightedThumbImage","display":"(Property)\tTi.UI.Slider.highlightedThumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Slider.left","display":"(Property)\tTi.UI.Slider.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track</p>","insert":"$0","match":"Ti.UI.Slider.leftTrackImage","display":"(Property)\tTi.UI.Slider.leftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the maximum slider value</p>","insert":"$0","match":"Ti.UI.Slider.max","display":"(Property)\tTi.UI.Slider.max\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum slider value</p>","insert":"$0","match":"Ti.UI.Slider.min","display":"(Property)\tTi.UI.Slider.min\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Slider.opacity","display":"(Property)\tTi.UI.Slider.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Slider.right","display":"(Property)\tTi.UI.Slider.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track</p>","insert":"$0","match":"Ti.UI.Slider.rightTrackImage","display":"(Property)\tTi.UI.Slider.rightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider left track when in the selected state</p>","insert":"$0","match":"Ti.UI.Slider.selectedLeftTrackImage","display":"(Property)\tTi.UI.Slider.selectedLeftTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider right track when in the selected state</p>","insert":"$0","match":"Ti.UI.Slider.selectedRightTrackImage","display":"(Property)\tTi.UI.Slider.selectedRightTrackImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url of the slider thumb when in the selected state</p>","insert":"$0","match":"Ti.UI.Slider.selectedThumbImage","display":"(Property)\tTi.UI.Slider.selectedThumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Slider.size","display":"(Property)\tTi.UI.Slider.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url to the slider thumb</p>","insert":"$0","match":"Ti.UI.Slider.thumbImage","display":"(Property)\tTi.UI.Slider.thumbImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Slider.top","display":"(Property)\tTi.UI.Slider.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Slider.touchEnabled","display":"(Property)\tTi.UI.Slider.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Slider.transform","display":"(Property)\tTi.UI.Slider.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the value of the slider</p>","insert":"$0","match":"Ti.UI.Slider.value","display":"(Property)\tTi.UI.Slider.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Slider.visible","display":"(Property)\tTi.UI.Slider.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Slider.width","display":"(Property)\tTi.UI.Slider.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Slider.zIndex","display":"(Property)\tTi.UI.Slider.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Switch is created by the method <a href=\"Titanium.UI.createSwitch.html\">Titanium.UI.createSwitch</a>.</p><hr />","insert":"$0","match":"Titanium.UI.Switch","display":"(Namespace)\tTitanium.UI.Switch","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Switch.add","display":"(Method)\t\tTitanium.UI.Switch.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Switch.addEventListener","display":"(Method)\t\tTitanium.UI.Switch.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Switch.animate","display":"(Method)\t\tTitanium.UI.Switch.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Switch.fireEvent","display":"(Method)\t\tTitanium.UI.Switch.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Switch.hide","display":"(Method)\t\tTitanium.UI.Switch.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Switch.remove","display":"(Method)\t\tTitanium.UI.Switch.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Switch.removeEventListener","display":"(Method)\t\tTitanium.UI.Switch.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Switch.show","display":"(Method)\t\tTitanium.UI.Switch.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Switch.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Switch.toImage","display":"(Method)\t\tTitanium.UI.Switch.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Switch.anchorPoint","display":"(Property)\tTitanium.UI.Switch.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Switch.animatedCenterPoint","display":"(Property)\tTitanium.UI.Switch.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.Switch.backgroundColor","display":"(Property)\tTitanium.UI.Switch.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Switch.backgroundGradient","display":"(Property)\tTitanium.UI.Switch.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.Switch.backgroundImage","display":"(Property)\tTitanium.UI.Switch.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Switch.backgroundLeftCap","display":"(Property)\tTitanium.UI.Switch.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Switch.backgroundTopCap","display":"(Property)\tTitanium.UI.Switch.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Switch.borderColor","display":"(Property)\tTitanium.UI.Switch.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Switch.borderRadius","display":"(Property)\tTitanium.UI.Switch.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Switch.borderWidth","display":"(Property)\tTitanium.UI.Switch.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Switch.bottom","display":"(Property)\tTitanium.UI.Switch.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Switch.center","display":"(Property)\tTitanium.UI.Switch.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean for the state of the switch</p>","insert":"$0","match":"Titanium.UI.Switch.enabled","display":"(Property)\tTitanium.UI.Switch.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Switch.height","display":"(Property)\tTitanium.UI.Switch.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Switch.left","display":"(Property)\tTitanium.UI.Switch.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Switch.opacity","display":"(Property)\tTitanium.UI.Switch.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Switch.right","display":"(Property)\tTitanium.UI.Switch.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Switch.size","display":"(Property)\tTitanium.UI.Switch.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Switch.top","display":"(Property)\tTitanium.UI.Switch.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Switch.touchEnabled","display":"(Property)\tTitanium.UI.Switch.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Switch.transform","display":"(Property)\tTitanium.UI.Switch.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean value of the switch where true is the switch is <tt>on</tt> and false the switch if <tt>off</tt></p>","insert":"$0","match":"Titanium.UI.Switch.value","display":"(Property)\tTitanium.UI.Switch.value\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Switch.visible","display":"(Property)\tTitanium.UI.Switch.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Switch.width","display":"(Property)\tTitanium.UI.Switch.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Switch.zIndex","display":"(Property)\tTitanium.UI.Switch.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Switch is created by the method <a href=\"Titanium.UI.createSwitch.html\">Titanium.UI.createSwitch</a>.</p><hr />","insert":"$0","match":"Ti.UI.Switch","display":"(Namespace)\tTi.UI.Switch","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Switch.add","display":"(Method)\t\tTi.UI.Switch.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Switch.addEventListener","display":"(Method)\t\tTi.UI.Switch.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Switch.animate","display":"(Method)\t\tTi.UI.Switch.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Switch.fireEvent","display":"(Method)\t\tTi.UI.Switch.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Switch.hide","display":"(Method)\t\tTi.UI.Switch.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Switch.remove","display":"(Method)\t\tTi.UI.Switch.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Switch.removeEventListener","display":"(Method)\t\tTi.UI.Switch.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Switch.show","display":"(Method)\t\tTi.UI.Switch.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Switch.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Switch.toImage","display":"(Method)\t\tTi.UI.Switch.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Switch.anchorPoint","display":"(Property)\tTi.UI.Switch.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Switch.animatedCenterPoint","display":"(Property)\tTi.UI.Switch.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.Switch.backgroundColor","display":"(Property)\tTi.UI.Switch.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Switch.backgroundGradient","display":"(Property)\tTi.UI.Switch.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.Switch.backgroundImage","display":"(Property)\tTi.UI.Switch.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Switch.backgroundLeftCap","display":"(Property)\tTi.UI.Switch.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Switch.backgroundTopCap","display":"(Property)\tTi.UI.Switch.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Switch.borderColor","display":"(Property)\tTi.UI.Switch.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Switch.borderRadius","display":"(Property)\tTi.UI.Switch.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Switch.borderWidth","display":"(Property)\tTi.UI.Switch.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Switch.bottom","display":"(Property)\tTi.UI.Switch.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Switch.center","display":"(Property)\tTi.UI.Switch.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean for the state of the switch</p>","insert":"$0","match":"Ti.UI.Switch.enabled","display":"(Property)\tTi.UI.Switch.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Switch.height","display":"(Property)\tTi.UI.Switch.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Switch.left","display":"(Property)\tTi.UI.Switch.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Switch.opacity","display":"(Property)\tTi.UI.Switch.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Switch.right","display":"(Property)\tTi.UI.Switch.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Switch.size","display":"(Property)\tTi.UI.Switch.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Switch.top","display":"(Property)\tTi.UI.Switch.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Switch.touchEnabled","display":"(Property)\tTi.UI.Switch.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Switch.transform","display":"(Property)\tTi.UI.Switch.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean value of the switch where true is the switch is <tt>on</tt> and false the switch if <tt>off</tt></p>","insert":"$0","match":"Ti.UI.Switch.value","display":"(Property)\tTi.UI.Switch.value\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Switch.visible","display":"(Property)\tTi.UI.Switch.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Switch.width","display":"(Property)\tTi.UI.Switch.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Switch.zIndex","display":"(Property)\tTi.UI.Switch.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A TabGroup Tab instance.  Each Tab instance maintains a stack of tab windows. Only one window within in the Tab can be visible at a time.  When a window is closed, either by the user or by code, the window is removed from the stack, make the previous window visible. The root tab window cannot be removed. The Tab Group is created by the method <a href=\"Titanium.UI.createTab.html\">Titanium.UI.createTab</a>.</p><hr />","insert":"$0","match":"Titanium.UI.Tab","display":"(Namespace)\tTitanium.UI.Tab","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Tab.add","display":"(Method)\t\tTitanium.UI.Tab.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Tab.addEventListener","display":"(Method)\t\tTitanium.UI.Tab.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Tab.animate","display":"(Method)\t\tTitanium.UI.Tab.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Tab.fireEvent","display":"(Method)\t\tTitanium.UI.Tab.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Tab.hide","display":"(Method)\t\tTitanium.UI.Tab.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Tab.remove","display":"(Method)\t\tTitanium.UI.Tab.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Tab.removeEventListener","display":"(Method)\t\tTitanium.UI.Tab.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Tab.show","display":"(Method)\t\tTitanium.UI.Tab.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Tab.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Tab.toImage","display":"(Method)\t\tTitanium.UI.Tab.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Tab.anchorPoint","display":"(Property)\tTitanium.UI.Tab.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Tab.animatedCenterPoint","display":"(Property)\tTitanium.UI.Tab.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.Tab.backgroundColor","display":"(Property)\tTitanium.UI.Tab.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Tab.backgroundGradient","display":"(Property)\tTitanium.UI.Tab.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.Tab.backgroundImage","display":"(Property)\tTitanium.UI.Tab.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Tab.backgroundLeftCap","display":"(Property)\tTitanium.UI.Tab.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Tab.backgroundTopCap","display":"(Property)\tTitanium.UI.Tab.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the badge value for the tab group for this tab. null indicates no badge is value</p>","insert":"$0","match":"Titanium.UI.Tab.badge","display":"(Property)\tTitanium.UI.Tab.badge\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Tab.borderColor","display":"(Property)\tTitanium.UI.Tab.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Tab.borderRadius","display":"(Property)\tTitanium.UI.Tab.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Tab.borderWidth","display":"(Property)\tTitanium.UI.Tab.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Tab.bottom","display":"(Property)\tTitanium.UI.Tab.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Tab.center","display":"(Property)\tTitanium.UI.Tab.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Tab.height","display":"(Property)\tTitanium.UI.Tab.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the icon url for the tab group for this tab</p>","insert":"$0","match":"Titanium.UI.Tab.icon","display":"(Property)\tTitanium.UI.Tab.icon\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Tab.left","display":"(Property)\tTitanium.UI.Tab.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Tab.opacity","display":"(Property)\tTitanium.UI.Tab.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Tab.right","display":"(Property)\tTitanium.UI.Tab.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Tab.size","display":"(Property)\tTitanium.UI.Tab.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title for the tab group for this tab</p>","insert":"$0","match":"Titanium.UI.Tab.title","display":"(Property)\tTitanium.UI.Tab.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Tab.top","display":"(Property)\tTitanium.UI.Tab.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Tab.touchEnabled","display":"(Property)\tTitanium.UI.Tab.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Tab.transform","display":"(Property)\tTitanium.UI.Tab.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Tab.visible","display":"(Property)\tTitanium.UI.Tab.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Tab.width","display":"(Property)\tTitanium.UI.Tab.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the root level tab window.  all tabs must have at least one root level tab window.</p>","insert":"$0","match":"Titanium.UI.Tab.window","display":"(Property)\tTitanium.UI.Tab.window\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Tab.zIndex","display":"(Property)\tTitanium.UI.Tab.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A TabGroup Tab instance.  Each Tab instance maintains a stack of tab windows. Only one window within in the Tab can be visible at a time.  When a window is closed, either by the user or by code, the window is removed from the stack, make the previous window visible. The root tab window cannot be removed. The Tab Group is created by the method <a href=\"Titanium.UI.createTab.html\">Titanium.UI.createTab</a>.</p><hr />","insert":"$0","match":"Ti.UI.Tab","display":"(Namespace)\tTi.UI.Tab","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Tab.add","display":"(Method)\t\tTi.UI.Tab.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Tab.addEventListener","display":"(Method)\t\tTi.UI.Tab.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Tab.animate","display":"(Method)\t\tTi.UI.Tab.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Tab.fireEvent","display":"(Method)\t\tTi.UI.Tab.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Tab.hide","display":"(Method)\t\tTi.UI.Tab.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Tab.remove","display":"(Method)\t\tTi.UI.Tab.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Tab.removeEventListener","display":"(Method)\t\tTi.UI.Tab.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Tab.show","display":"(Method)\t\tTi.UI.Tab.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Tab.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Tab.toImage","display":"(Method)\t\tTi.UI.Tab.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Tab.anchorPoint","display":"(Property)\tTi.UI.Tab.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Tab.animatedCenterPoint","display":"(Property)\tTi.UI.Tab.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.Tab.backgroundColor","display":"(Property)\tTi.UI.Tab.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Tab.backgroundGradient","display":"(Property)\tTi.UI.Tab.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.Tab.backgroundImage","display":"(Property)\tTi.UI.Tab.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Tab.backgroundLeftCap","display":"(Property)\tTi.UI.Tab.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Tab.backgroundTopCap","display":"(Property)\tTi.UI.Tab.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the badge value for the tab group for this tab. null indicates no badge is value</p>","insert":"$0","match":"Ti.UI.Tab.badge","display":"(Property)\tTi.UI.Tab.badge\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Tab.borderColor","display":"(Property)\tTi.UI.Tab.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Tab.borderRadius","display":"(Property)\tTi.UI.Tab.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Tab.borderWidth","display":"(Property)\tTi.UI.Tab.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Tab.bottom","display":"(Property)\tTi.UI.Tab.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Tab.center","display":"(Property)\tTi.UI.Tab.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Tab.height","display":"(Property)\tTi.UI.Tab.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the icon url for the tab group for this tab</p>","insert":"$0","match":"Ti.UI.Tab.icon","display":"(Property)\tTi.UI.Tab.icon\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Tab.left","display":"(Property)\tTi.UI.Tab.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Tab.opacity","display":"(Property)\tTi.UI.Tab.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Tab.right","display":"(Property)\tTi.UI.Tab.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Tab.size","display":"(Property)\tTi.UI.Tab.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title for the tab group for this tab</p>","insert":"$0","match":"Ti.UI.Tab.title","display":"(Property)\tTi.UI.Tab.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Tab.top","display":"(Property)\tTi.UI.Tab.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Tab.touchEnabled","display":"(Property)\tTi.UI.Tab.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Tab.transform","display":"(Property)\tTi.UI.Tab.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Tab.visible","display":"(Property)\tTi.UI.Tab.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Tab.width","display":"(Property)\tTi.UI.Tab.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the root level tab window.  all tabs must have at least one root level tab window.</p>","insert":"$0","match":"Ti.UI.Tab.window","display":"(Property)\tTi.UI.Tab.window\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Tab.zIndex","display":"(Property)\tTi.UI.Tab.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Tab Group allows you to manage a tabbed UI of one or more windows. The Tab Group is created by the method <a href=\"Titanium.UI.createTabGroup.html\">Titanium.UI.createTabGroup</a>.</p><hr />","insert":"$0","match":"Titanium.UI.TabGroup","display":"(Namespace)\tTitanium.UI.TabGroup","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TabGroup.add","display":"(Method)\t\tTitanium.UI.TabGroup.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TabGroup.addEventListener","display":"(Method)\t\tTitanium.UI.TabGroup.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabGroup.addTab","display":"(Method)\t\tTitanium.UI.TabGroup.addTab\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TabGroup.animate","display":"(Method)\t\tTitanium.UI.TabGroup.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabGroup.close","display":"(Method)\t\tTitanium.UI.TabGroup.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TabGroup.fireEvent","display":"(Method)\t\tTitanium.UI.TabGroup.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabGroup.hide","display":"(Method)\t\tTitanium.UI.TabGroup.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabGroup.open","display":"(Method)\t\tTitanium.UI.TabGroup.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TabGroup.remove","display":"(Method)\t\tTitanium.UI.TabGroup.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TabGroup.removeEventListener","display":"(Method)\t\tTitanium.UI.TabGroup.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabGroup.removeTab","display":"(Method)\t\tTitanium.UI.TabGroup.removeTab\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabGroup.show","display":"(Method)\t\tTitanium.UI.TabGroup.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabGroup.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TabGroup.toImage","display":"(Method)\t\tTitanium.UI.TabGroup.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the active tab</p>","insert":"$0","match":"Titanium.UI.TabGroup.activeTab","display":"(Property)\tTitanium.UI.TabGroup.activeTab\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TabGroup.anchorPoint","display":"(Property)\tTitanium.UI.TabGroup.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TabGroup.animatedCenterPoint","display":"(Property)\tTitanium.UI.TabGroup.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.TabGroup.backgroundColor","display":"(Property)\tTitanium.UI.TabGroup.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TabGroup.backgroundGradient","display":"(Property)\tTitanium.UI.TabGroup.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.TabGroup.backgroundImage","display":"(Property)\tTitanium.UI.TabGroup.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TabGroup.backgroundLeftCap","display":"(Property)\tTitanium.UI.TabGroup.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TabGroup.backgroundTopCap","display":"(Property)\tTitanium.UI.TabGroup.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the bar color</p>","insert":"$0","match":"Titanium.UI.TabGroup.barColor","display":"(Property)\tTitanium.UI.TabGroup.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TabGroup.borderColor","display":"(Property)\tTitanium.UI.TabGroup.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TabGroup.borderRadius","display":"(Property)\tTitanium.UI.TabGroup.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TabGroup.borderWidth","display":"(Property)\tTitanium.UI.TabGroup.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabGroup.bottom","display":"(Property)\tTitanium.UI.TabGroup.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TabGroup.center","display":"(Property)\tTitanium.UI.TabGroup.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabGroup.height","display":"(Property)\tTitanium.UI.TabGroup.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabGroup.left","display":"(Property)\tTitanium.UI.TabGroup.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TabGroup.opacity","display":"(Property)\tTitanium.UI.TabGroup.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabGroup.right","display":"(Property)\tTitanium.UI.TabGroup.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TabGroup.size","display":"(Property)\tTitanium.UI.TabGroup.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of tab objects that are managed by the tab group</p>","insert":"$0","match":"Titanium.UI.TabGroup.tabs","display":"(Property)\tTitanium.UI.TabGroup.tabs\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabGroup.top","display":"(Property)\tTitanium.UI.TabGroup.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TabGroup.touchEnabled","display":"(Property)\tTitanium.UI.TabGroup.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TabGroup.transform","display":"(Property)\tTitanium.UI.TabGroup.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TabGroup.visible","display":"(Property)\tTitanium.UI.TabGroup.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabGroup.width","display":"(Property)\tTitanium.UI.TabGroup.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TabGroup.zIndex","display":"(Property)\tTitanium.UI.TabGroup.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Tab Group allows you to manage a tabbed UI of one or more windows. The Tab Group is created by the method <a href=\"Titanium.UI.createTabGroup.html\">Titanium.UI.createTabGroup</a>.</p><hr />","insert":"$0","match":"Ti.UI.TabGroup","display":"(Namespace)\tTi.UI.TabGroup","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TabGroup.add","display":"(Method)\t\tTi.UI.TabGroup.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TabGroup.addEventListener","display":"(Method)\t\tTi.UI.TabGroup.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabGroup.addTab","display":"(Method)\t\tTi.UI.TabGroup.addTab\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TabGroup.animate","display":"(Method)\t\tTi.UI.TabGroup.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabGroup.close","display":"(Method)\t\tTi.UI.TabGroup.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TabGroup.fireEvent","display":"(Method)\t\tTi.UI.TabGroup.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabGroup.hide","display":"(Method)\t\tTi.UI.TabGroup.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabGroup.open","display":"(Method)\t\tTi.UI.TabGroup.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TabGroup.remove","display":"(Method)\t\tTi.UI.TabGroup.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TabGroup.removeEventListener","display":"(Method)\t\tTi.UI.TabGroup.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabGroup.removeTab","display":"(Method)\t\tTi.UI.TabGroup.removeTab\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabGroup.show","display":"(Method)\t\tTi.UI.TabGroup.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabGroup.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TabGroup.toImage","display":"(Method)\t\tTi.UI.TabGroup.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>the active tab</p>","insert":"$0","match":"Ti.UI.TabGroup.activeTab","display":"(Property)\tTi.UI.TabGroup.activeTab\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TabGroup.anchorPoint","display":"(Property)\tTi.UI.TabGroup.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TabGroup.animatedCenterPoint","display":"(Property)\tTi.UI.TabGroup.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.TabGroup.backgroundColor","display":"(Property)\tTi.UI.TabGroup.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TabGroup.backgroundGradient","display":"(Property)\tTi.UI.TabGroup.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.TabGroup.backgroundImage","display":"(Property)\tTi.UI.TabGroup.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TabGroup.backgroundLeftCap","display":"(Property)\tTi.UI.TabGroup.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TabGroup.backgroundTopCap","display":"(Property)\tTi.UI.TabGroup.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the bar color</p>","insert":"$0","match":"Ti.UI.TabGroup.barColor","display":"(Property)\tTi.UI.TabGroup.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TabGroup.borderColor","display":"(Property)\tTi.UI.TabGroup.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TabGroup.borderRadius","display":"(Property)\tTi.UI.TabGroup.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TabGroup.borderWidth","display":"(Property)\tTi.UI.TabGroup.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabGroup.bottom","display":"(Property)\tTi.UI.TabGroup.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TabGroup.center","display":"(Property)\tTi.UI.TabGroup.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.TabGroup.height","display":"(Property)\tTi.UI.TabGroup.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabGroup.left","display":"(Property)\tTi.UI.TabGroup.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TabGroup.opacity","display":"(Property)\tTi.UI.TabGroup.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabGroup.right","display":"(Property)\tTi.UI.TabGroup.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TabGroup.size","display":"(Property)\tTi.UI.TabGroup.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of tab objects that are managed by the tab group</p>","insert":"$0","match":"Ti.UI.TabGroup.tabs","display":"(Property)\tTi.UI.TabGroup.tabs\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabGroup.top","display":"(Property)\tTi.UI.TabGroup.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TabGroup.touchEnabled","display":"(Property)\tTi.UI.TabGroup.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TabGroup.transform","display":"(Property)\tTi.UI.TabGroup.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TabGroup.visible","display":"(Property)\tTi.UI.TabGroup.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabGroup.width","display":"(Property)\tTi.UI.TabGroup.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TabGroup.zIndex","display":"(Property)\tTi.UI.TabGroup.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Tabbed Bar is created by the method <a href=\"Titanium.UI.createTabbedBar.html\">Titanium.UI.createTabbedBar</a>. The difference between the Tabbed Bar and the Button Bar is that the tabbed bar visually maintains a state (visually distinguished as a pressed or selected look).</p><hr /><p>For iPhone, the style constants are available in the constants defined in <a href=\"Titanium.UI.iPhone.SystemButtonStyle\">Titanium.UI.iPhone.SystemButtonStyle</a>.</p>","insert":"$0","match":"Titanium.UI.TabbedBar","display":"(Namespace)\tTitanium.UI.TabbedBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TabbedBar.add","display":"(Method)\t\tTitanium.UI.TabbedBar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TabbedBar.addEventListener","display":"(Method)\t\tTitanium.UI.TabbedBar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TabbedBar.animate","display":"(Method)\t\tTitanium.UI.TabbedBar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TabbedBar.fireEvent","display":"(Method)\t\tTitanium.UI.TabbedBar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabbedBar.hide","display":"(Method)\t\tTitanium.UI.TabbedBar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TabbedBar.remove","display":"(Method)\t\tTitanium.UI.TabbedBar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TabbedBar.removeEventListener","display":"(Method)\t\tTitanium.UI.TabbedBar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TabbedBar.show","display":"(Method)\t\tTitanium.UI.TabbedBar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TabbedBar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TabbedBar.toImage","display":"(Method)\t\tTitanium.UI.TabbedBar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TabbedBar.anchorPoint","display":"(Property)\tTitanium.UI.TabbedBar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TabbedBar.animatedCenterPoint","display":"(Property)\tTitanium.UI.TabbedBar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color of the tabbed bar</p>","insert":"$0","match":"Titanium.UI.TabbedBar.backgroundColor","display":"(Property)\tTitanium.UI.TabbedBar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TabbedBar.backgroundGradient","display":"(Property)\tTitanium.UI.TabbedBar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.TabbedBar.backgroundImage","display":"(Property)\tTitanium.UI.TabbedBar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TabbedBar.backgroundLeftCap","display":"(Property)\tTitanium.UI.TabbedBar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TabbedBar.backgroundTopCap","display":"(Property)\tTitanium.UI.TabbedBar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TabbedBar.borderColor","display":"(Property)\tTitanium.UI.TabbedBar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TabbedBar.borderRadius","display":"(Property)\tTitanium.UI.TabbedBar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TabbedBar.borderWidth","display":"(Property)\tTitanium.UI.TabbedBar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabbedBar.bottom","display":"(Property)\tTitanium.UI.TabbedBar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TabbedBar.center","display":"(Property)\tTitanium.UI.TabbedBar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabbedBar.height","display":"(Property)\tTitanium.UI.TabbedBar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the selected index</p>","insert":"$0","match":"Titanium.UI.TabbedBar.index","display":"(Property)\tTitanium.UI.TabbedBar.index\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the array of labels for the tabbed bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p>","insert":"$0","match":"Titanium.UI.TabbedBar.labels","display":"(Property)\tTitanium.UI.TabbedBar.labels\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabbedBar.left","display":"(Property)\tTitanium.UI.TabbedBar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TabbedBar.opacity","display":"(Property)\tTitanium.UI.TabbedBar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabbedBar.right","display":"(Property)\tTitanium.UI.TabbedBar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TabbedBar.size","display":"(Property)\tTitanium.UI.TabbedBar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style of the tabbed bar</p>","insert":"$0","match":"Titanium.UI.TabbedBar.style","display":"(Property)\tTitanium.UI.TabbedBar.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabbedBar.top","display":"(Property)\tTitanium.UI.TabbedBar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TabbedBar.touchEnabled","display":"(Property)\tTitanium.UI.TabbedBar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TabbedBar.transform","display":"(Property)\tTitanium.UI.TabbedBar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TabbedBar.visible","display":"(Property)\tTitanium.UI.TabbedBar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TabbedBar.width","display":"(Property)\tTitanium.UI.TabbedBar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TabbedBar.zIndex","display":"(Property)\tTitanium.UI.TabbedBar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Tabbed Bar is created by the method <a href=\"Titanium.UI.createTabbedBar.html\">Titanium.UI.createTabbedBar</a>. The difference between the Tabbed Bar and the Button Bar is that the tabbed bar visually maintains a state (visually distinguished as a pressed or selected look).</p><hr /><p>For iPhone, the style constants are available in the constants defined in <a href=\"Titanium.UI.iPhone.SystemButtonStyle\">Titanium.UI.iPhone.SystemButtonStyle</a>.</p>","insert":"$0","match":"Ti.UI.TabbedBar","display":"(Namespace)\tTi.UI.TabbedBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TabbedBar.add","display":"(Method)\t\tTi.UI.TabbedBar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TabbedBar.addEventListener","display":"(Method)\t\tTi.UI.TabbedBar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TabbedBar.animate","display":"(Method)\t\tTi.UI.TabbedBar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TabbedBar.fireEvent","display":"(Method)\t\tTi.UI.TabbedBar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabbedBar.hide","display":"(Method)\t\tTi.UI.TabbedBar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TabbedBar.remove","display":"(Method)\t\tTi.UI.TabbedBar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TabbedBar.removeEventListener","display":"(Method)\t\tTi.UI.TabbedBar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TabbedBar.show","display":"(Method)\t\tTi.UI.TabbedBar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TabbedBar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TabbedBar.toImage","display":"(Method)\t\tTi.UI.TabbedBar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TabbedBar.anchorPoint","display":"(Property)\tTi.UI.TabbedBar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TabbedBar.animatedCenterPoint","display":"(Property)\tTi.UI.TabbedBar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color of the tabbed bar</p>","insert":"$0","match":"Ti.UI.TabbedBar.backgroundColor","display":"(Property)\tTi.UI.TabbedBar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TabbedBar.backgroundGradient","display":"(Property)\tTi.UI.TabbedBar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.TabbedBar.backgroundImage","display":"(Property)\tTi.UI.TabbedBar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TabbedBar.backgroundLeftCap","display":"(Property)\tTi.UI.TabbedBar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TabbedBar.backgroundTopCap","display":"(Property)\tTi.UI.TabbedBar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TabbedBar.borderColor","display":"(Property)\tTi.UI.TabbedBar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TabbedBar.borderRadius","display":"(Property)\tTi.UI.TabbedBar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TabbedBar.borderWidth","display":"(Property)\tTi.UI.TabbedBar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabbedBar.bottom","display":"(Property)\tTi.UI.TabbedBar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TabbedBar.center","display":"(Property)\tTi.UI.TabbedBar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.TabbedBar.height","display":"(Property)\tTi.UI.TabbedBar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the selected index</p>","insert":"$0","match":"Ti.UI.TabbedBar.index","display":"(Property)\tTi.UI.TabbedBar.index\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the array of labels for the tabbed bar. each object should have the properties <tt>title</tt>, <tt>image</tt>, <tt>width</tt> and <tt>enabled</tt>.</p>","insert":"$0","match":"Ti.UI.TabbedBar.labels","display":"(Property)\tTi.UI.TabbedBar.labels\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabbedBar.left","display":"(Property)\tTi.UI.TabbedBar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TabbedBar.opacity","display":"(Property)\tTi.UI.TabbedBar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabbedBar.right","display":"(Property)\tTi.UI.TabbedBar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TabbedBar.size","display":"(Property)\tTi.UI.TabbedBar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the style of the tabbed bar</p>","insert":"$0","match":"Ti.UI.TabbedBar.style","display":"(Property)\tTi.UI.TabbedBar.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabbedBar.top","display":"(Property)\tTi.UI.TabbedBar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TabbedBar.touchEnabled","display":"(Property)\tTi.UI.TabbedBar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TabbedBar.transform","display":"(Property)\tTi.UI.TabbedBar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TabbedBar.visible","display":"(Property)\tTi.UI.TabbedBar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TabbedBar.width","display":"(Property)\tTi.UI.TabbedBar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TabbedBar.zIndex","display":"(Property)\tTi.UI.TabbedBar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Table View allows you to create a scrollable table of content in a list-based fashion. The Table View is created by the method <a href=\"Titanium.UI.createTableView.html\">Titanium.UI.createTableView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.TableView","display":"(Namespace)\tTitanium.UI.TableView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TableView.add","display":"(Method)\t\tTitanium.UI.TableView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableView.addEventListener","display":"(Method)\t\tTitanium.UI.TableView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableView.animate","display":"(Method)\t\tTitanium.UI.TableView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>append a row to the table, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.appendRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to append</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.TableView.appendRow","display":"(Method)\t\tTitanium.UI.TableView.appendRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>delete an existing row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.deleteRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to delete</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.TableView.deleteRow","display":"(Method)\t\tTitanium.UI.TableView.deleteRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>programmatically deselect a row</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.deselectRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:int</i></span>\n\t\t<span class='info'>row index to deselect</span>\n)\n</code>","insert":"(${1:${2:row}})","match":"Titanium.UI.TableView.deselectRow","display":"(Method)\t\tTitanium.UI.TableView.deselectRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TableView.fireEvent","display":"(Method)\t\tTitanium.UI.TableView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableView.hide","display":"(Method)\t\tTitanium.UI.TableView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>insert a row before another row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.insertRowAfter</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to insert</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:${2:index}, {${3:}\\}, {${0:}\\}})","match":"Titanium.UI.TableView.insertRowAfter","display":"(Method)\t\tTitanium.UI.TableView.insertRowAfter\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>insert a row after another row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.insertRowBefore</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to insert</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:${2:index}, {${3:}\\}, {${0:}\\}})","match":"Titanium.UI.TableView.insertRowBefore","display":"(Method)\t\tTitanium.UI.TableView.insertRowBefore\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TableView.remove","display":"(Method)\t\tTitanium.UI.TableView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableView.removeEventListener","display":"(Method)\t\tTitanium.UI.TableView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scroll to a specific row index and ensure that that row is on screen</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.scrollToIndex</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties. position</tt> property controls the position constant to use for position (on iPhone, use constants from Titanium.UI.iPhone.TableViewScrollPosition).</span>\n)\n</code>","insert":"(${1:${2:index}, {${0:}\\}})","match":"Titanium.UI.TableView.scrollToIndex","display":"(Method)\t\tTitanium.UI.TableView.scrollToIndex\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scroll the table to a specific top position where 0 is the topmost y position in the table view</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.scrollToTop</u></b><i>:void()</i><br>(\n\t\t<span><b>top</b><i>:float</i></span>\n\t\t<span class='info'>y position</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>optional dictionary with the key animated</tt> (default, true) as boolean to indicate if the scroll should be animated or immediate</span>\n)\n</code>","insert":"(${1:${2:top}, {${0:}\\}})","match":"Titanium.UI.TableView.scrollToTop","display":"(Method)\t\tTitanium.UI.TableView.scrollToTop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>programmatically select a row</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.selectRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:int</i></span>\n\t\t<span class='info'>row index to select</span>\n)\n</code>","insert":"(${1:${2:row}})","match":"Titanium.UI.TableView.selectRow","display":"(Method)\t\tTitanium.UI.TableView.selectRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the data in the table, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.setData</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:array</i></span>\n\t\t<span class='info'>data array of rows either as objects or row objects</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:${2:data}, {${0:}\\}})","match":"Titanium.UI.TableView.setData","display":"(Method)\t\tTitanium.UI.TableView.setData\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableView.show","display":"(Method)\t\tTitanium.UI.TableView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TableView.toImage","display":"(Method)\t\tTitanium.UI.TableView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>update an existing row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableView.updateRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row data to update</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.TableView.updateRow","display":"(Method)\t\tTitanium.UI.TableView.updateRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>true if the rows can be selected</p>","insert":"$0","match":"Titanium.UI.TableView.allowsSelection","display":"(Property)\tTitanium.UI.TableView.allowsSelection\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TableView.anchorPoint","display":"(Property)\tTitanium.UI.TableView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TableView.animatedCenterPoint","display":"(Property)\tTitanium.UI.TableView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color of the table view</p>","insert":"$0","match":"Titanium.UI.TableView.backgroundColor","display":"(Property)\tTitanium.UI.TableView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TableView.backgroundGradient","display":"(Property)\tTitanium.UI.TableView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background image to render in the background of the table view</p>","insert":"$0","match":"Titanium.UI.TableView.backgroundImage","display":"(Property)\tTitanium.UI.TableView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TableView.backgroundLeftCap","display":"(Property)\tTitanium.UI.TableView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TableView.backgroundTopCap","display":"(Property)\tTitanium.UI.TableView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TableView.borderColor","display":"(Property)\tTitanium.UI.TableView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TableView.borderRadius","display":"(Property)\tTitanium.UI.TableView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TableView.borderWidth","display":"(Property)\tTitanium.UI.TableView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableView.bottom","display":"(Property)\tTitanium.UI.TableView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TableView.center","display":"(Property)\tTitanium.UI.TableView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the data array of objects to be used for the rows of the table view</p>","insert":"$0","match":"Titanium.UI.TableView.data","display":"(Property)\tTitanium.UI.TableView.data\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>allow the table view to be editable (this must be true for swipe-to-delete)</p>","insert":"$0","match":"Titanium.UI.TableView.editable","display":"(Property)\tTitanium.UI.TableView.editable\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the editing state of the table view</p>","insert":"$0","match":"Titanium.UI.TableView.editing","display":"(Property)\tTitanium.UI.TableView.editing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the filter attribute to be used when searching. this property maps to your data object or a property on the row object</p>","insert":"$0","match":"Titanium.UI.TableView.filterAttribute","display":"(Property)\tTitanium.UI.TableView.filterAttribute\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the search should be case sensitive or case insensitive (default)</p>","insert":"$0","match":"Titanium.UI.TableView.filterCaseInsensitive","display":"(Property)\tTitanium.UI.TableView.filterCaseInsensitive\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view footer title</p>","insert":"$0","match":"Titanium.UI.TableView.footerTitle","display":"(Property)\tTitanium.UI.TableView.footerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view footer as a view that will be rendered instead of a label</p>","insert":"$0","match":"Titanium.UI.TableView.footerView","display":"(Property)\tTitanium.UI.TableView.footerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view header title</p>","insert":"$0","match":"Titanium.UI.TableView.headerTitle","display":"(Property)\tTitanium.UI.TableView.headerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view header as a view that will be rendered instead of a label</p>","insert":"$0","match":"Titanium.UI.TableView.headerView","display":"(Property)\tTitanium.UI.TableView.headerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableView.height","display":"(Property)\tTitanium.UI.TableView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of objects (with title and index properties) to control the table view index</p>","insert":"$0","match":"Titanium.UI.TableView.index","display":"(Property)\tTitanium.UI.TableView.index\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableView.left","display":"(Property)\tTitanium.UI.TableView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>max row height for table view rows</p>","insert":"$0","match":"Titanium.UI.TableView.maxRowHeight","display":"(Property)\tTitanium.UI.TableView.maxRowHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>min row height for table view rows</p>","insert":"$0","match":"Titanium.UI.TableView.minRowHeight","display":"(Property)\tTitanium.UI.TableView.minRowHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the moveable state of the table view</p>","insert":"$0","match":"Titanium.UI.TableView.moving","display":"(Property)\tTitanium.UI.TableView.moving\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TableView.opacity","display":"(Property)\tTitanium.UI.TableView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableView.right","display":"(Property)\tTitanium.UI.TableView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>default row height for table view rows</p>","insert":"$0","match":"Titanium.UI.TableView.rowHeight","display":"(Property)\tTitanium.UI.TableView.rowHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the search field to use for the table view</p>","insert":"$0","match":"Titanium.UI.TableView.search","display":"(Property)\tTitanium.UI.TableView.search\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the visibility of the search field</p>","insert":"$0","match":"Titanium.UI.TableView.searchHidden","display":"(Property)\tTitanium.UI.TableView.searchHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the separator color color as a hex or named value</p>","insert":"$0","match":"Titanium.UI.TableView.separatorColor","display":"(Property)\tTitanium.UI.TableView.separatorColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle</p>","insert":"$0","match":"Titanium.UI.TableView.separatorStyle","display":"(Property)\tTitanium.UI.TableView.separatorStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TableView.size","display":"(Property)\tTitanium.UI.TableView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>iPhone only. the style of the table view. constant from <a href=\"Titanium.UI.iPhone.TableViewStyle\">Titanium.UI.iPhone.TableViewStyle</a></p>","insert":"$0","match":"Titanium.UI.TableView.style","display":"(Property)\tTitanium.UI.TableView.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableView.top","display":"(Property)\tTitanium.UI.TableView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TableView.touchEnabled","display":"(Property)\tTitanium.UI.TableView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TableView.transform","display":"(Property)\tTitanium.UI.TableView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TableView.visible","display":"(Property)\tTitanium.UI.TableView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableView.width","display":"(Property)\tTitanium.UI.TableView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TableView.zIndex","display":"(Property)\tTitanium.UI.TableView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Table View allows you to create a scrollable table of content in a list-based fashion. The Table View is created by the method <a href=\"Titanium.UI.createTableView.html\">Titanium.UI.createTableView</a>.</p><hr />","insert":"$0","match":"Ti.UI.TableView","display":"(Namespace)\tTi.UI.TableView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TableView.add","display":"(Method)\t\tTi.UI.TableView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableView.addEventListener","display":"(Method)\t\tTi.UI.TableView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableView.animate","display":"(Method)\t\tTi.UI.TableView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>append a row to the table, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.appendRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to append</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.TableView.appendRow","display":"(Method)\t\tTi.UI.TableView.appendRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>delete an existing row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.deleteRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to delete</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.TableView.deleteRow","display":"(Method)\t\tTi.UI.TableView.deleteRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>programmatically deselect a row</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.deselectRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:int</i></span>\n\t\t<span class='info'>row index to deselect</span>\n)\n</code>","insert":"(${1:${2:row}})","match":"Ti.UI.TableView.deselectRow","display":"(Method)\t\tTi.UI.TableView.deselectRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TableView.fireEvent","display":"(Method)\t\tTi.UI.TableView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableView.hide","display":"(Method)\t\tTi.UI.TableView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>insert a row before another row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.insertRowAfter</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to insert</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:${2:index}, {${3:}\\}, {${0:}\\}})","match":"Ti.UI.TableView.insertRowAfter","display":"(Method)\t\tTi.UI.TableView.insertRowAfter\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>insert a row after another row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.insertRowBefore</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row to insert</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:${2:index}, {${3:}\\}, {${0:}\\}})","match":"Ti.UI.TableView.insertRowBefore","display":"(Method)\t\tTi.UI.TableView.insertRowBefore\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TableView.remove","display":"(Method)\t\tTi.UI.TableView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableView.removeEventListener","display":"(Method)\t\tTi.UI.TableView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scroll to a specific row index and ensure that that row is on screen</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.scrollToIndex</u></b><i>:void()</i><br>(\n\t\t<span><b>index</b><i>:int</i></span>\n\t\t<span class='info'>index</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties. position</tt> property controls the position constant to use for position (on iPhone, use constants from Titanium.UI.iPhone.TableViewScrollPosition).</span>\n)\n</code>","insert":"(${1:${2:index}, {${0:}\\}})","match":"Ti.UI.TableView.scrollToIndex","display":"(Method)\t\tTi.UI.TableView.scrollToIndex\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>scroll the table to a specific top position where 0 is the topmost y position in the table view</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.scrollToTop</u></b><i>:void()</i><br>(\n\t\t<span><b>top</b><i>:float</i></span>\n\t\t<span class='info'>y position</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>optional dictionary with the key animated</tt> (default, true) as boolean to indicate if the scroll should be animated or immediate</span>\n)\n</code>","insert":"(${1:${2:top}, {${0:}\\}})","match":"Ti.UI.TableView.scrollToTop","display":"(Method)\t\tTi.UI.TableView.scrollToTop\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>programmatically select a row</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.selectRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:int</i></span>\n\t\t<span class='info'>row index to select</span>\n)\n</code>","insert":"(${1:${2:row}})","match":"Ti.UI.TableView.selectRow","display":"(Method)\t\tTi.UI.TableView.selectRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the data in the table, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.setData</u></b><i>:void()</i><br>(\n\t\t<span><b>data</b><i>:array</i></span>\n\t\t<span class='info'>data array of rows either as objects or row objects</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:${2:data}, {${0:}\\}})","match":"Ti.UI.TableView.setData","display":"(Method)\t\tTi.UI.TableView.setData\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableView.show","display":"(Method)\t\tTi.UI.TableView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TableView.toImage","display":"(Method)\t\tTi.UI.TableView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>update an existing row, optionally with animation</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableView.updateRow</u></b><i>:void()</i><br>(\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>row data to update</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>animation properties</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.TableView.updateRow","display":"(Method)\t\tTi.UI.TableView.updateRow\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>true if the rows can be selected</p>","insert":"$0","match":"Ti.UI.TableView.allowsSelection","display":"(Property)\tTi.UI.TableView.allowsSelection\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TableView.anchorPoint","display":"(Property)\tTi.UI.TableView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TableView.animatedCenterPoint","display":"(Property)\tTi.UI.TableView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color of the table view</p>","insert":"$0","match":"Ti.UI.TableView.backgroundColor","display":"(Property)\tTi.UI.TableView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TableView.backgroundGradient","display":"(Property)\tTi.UI.TableView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background image to render in the background of the table view</p>","insert":"$0","match":"Ti.UI.TableView.backgroundImage","display":"(Property)\tTi.UI.TableView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TableView.backgroundLeftCap","display":"(Property)\tTi.UI.TableView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TableView.backgroundTopCap","display":"(Property)\tTi.UI.TableView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TableView.borderColor","display":"(Property)\tTi.UI.TableView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TableView.borderRadius","display":"(Property)\tTi.UI.TableView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TableView.borderWidth","display":"(Property)\tTi.UI.TableView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableView.bottom","display":"(Property)\tTi.UI.TableView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TableView.center","display":"(Property)\tTi.UI.TableView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the data array of objects to be used for the rows of the table view</p>","insert":"$0","match":"Ti.UI.TableView.data","display":"(Property)\tTi.UI.TableView.data\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>allow the table view to be editable (this must be true for swipe-to-delete)</p>","insert":"$0","match":"Ti.UI.TableView.editable","display":"(Property)\tTi.UI.TableView.editable\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the editing state of the table view</p>","insert":"$0","match":"Ti.UI.TableView.editing","display":"(Property)\tTi.UI.TableView.editing\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the filter attribute to be used when searching. this property maps to your data object or a property on the row object</p>","insert":"$0","match":"Ti.UI.TableView.filterAttribute","display":"(Property)\tTi.UI.TableView.filterAttribute\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the search should be case sensitive or case insensitive (default)</p>","insert":"$0","match":"Ti.UI.TableView.filterCaseInsensitive","display":"(Property)\tTi.UI.TableView.filterCaseInsensitive\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view footer title</p>","insert":"$0","match":"Ti.UI.TableView.footerTitle","display":"(Property)\tTi.UI.TableView.footerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view footer as a view that will be rendered instead of a label</p>","insert":"$0","match":"Ti.UI.TableView.footerView","display":"(Property)\tTi.UI.TableView.footerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view header title</p>","insert":"$0","match":"Ti.UI.TableView.headerTitle","display":"(Property)\tTi.UI.TableView.headerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the table view header as a view that will be rendered instead of a label</p>","insert":"$0","match":"Ti.UI.TableView.headerView","display":"(Property)\tTi.UI.TableView.headerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.TableView.height","display":"(Property)\tTi.UI.TableView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>an array of objects (with title and index properties) to control the table view index</p>","insert":"$0","match":"Ti.UI.TableView.index","display":"(Property)\tTi.UI.TableView.index\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableView.left","display":"(Property)\tTi.UI.TableView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>max row height for table view rows</p>","insert":"$0","match":"Ti.UI.TableView.maxRowHeight","display":"(Property)\tTi.UI.TableView.maxRowHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>min row height for table view rows</p>","insert":"$0","match":"Ti.UI.TableView.minRowHeight","display":"(Property)\tTi.UI.TableView.minRowHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the moveable state of the table view</p>","insert":"$0","match":"Ti.UI.TableView.moving","display":"(Property)\tTi.UI.TableView.moving\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TableView.opacity","display":"(Property)\tTi.UI.TableView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableView.right","display":"(Property)\tTi.UI.TableView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>default row height for table view rows</p>","insert":"$0","match":"Ti.UI.TableView.rowHeight","display":"(Property)\tTi.UI.TableView.rowHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the search field to use for the table view</p>","insert":"$0","match":"Ti.UI.TableView.search","display":"(Property)\tTi.UI.TableView.search\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to control the visibility of the search field</p>","insert":"$0","match":"Ti.UI.TableView.searchHidden","display":"(Property)\tTi.UI.TableView.searchHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the separator color color as a hex or named value</p>","insert":"$0","match":"Ti.UI.TableView.separatorColor","display":"(Property)\tTi.UI.TableView.separatorColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle</p>","insert":"$0","match":"Ti.UI.TableView.separatorStyle","display":"(Property)\tTi.UI.TableView.separatorStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TableView.size","display":"(Property)\tTi.UI.TableView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>iPhone only. the style of the table view. constant from <a href=\"Titanium.UI.iPhone.TableViewStyle\">Titanium.UI.iPhone.TableViewStyle</a></p>","insert":"$0","match":"Ti.UI.TableView.style","display":"(Property)\tTi.UI.TableView.style\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableView.top","display":"(Property)\tTi.UI.TableView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TableView.touchEnabled","display":"(Property)\tTi.UI.TableView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TableView.transform","display":"(Property)\tTi.UI.TableView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TableView.visible","display":"(Property)\tTi.UI.TableView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableView.width","display":"(Property)\tTi.UI.TableView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TableView.zIndex","display":"(Property)\tTi.UI.TableView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A TableView row object created by the method <a href=\"Titanium.UI.createTableViewRow.html\">Titanium.UI.createTableViewRow</a>.</p><hr /><p>Make sure you set the tableClass on each row instance if using more than one type of row layout. You can use the same value for each instance of a row where the layout is the same - even if the value of the elements inside the row have different values.  For example, if the text is the only thing different between two cells but the layout is the same, both row instances should have the same value for tableClass.</p>\n<p>You can listen for table row events on all rows by adding an event listener to the table view instance.  Events automatically propagate to parent views.</p>","insert":"$0","match":"Titanium.UI.TableViewRow","display":"(Namespace)\tTitanium.UI.TableViewRow","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TableViewRow.add","display":"(Method)\t\tTitanium.UI.TableViewRow.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableViewRow.addEventListener","display":"(Method)\t\tTitanium.UI.TableViewRow.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableViewRow.animate","display":"(Method)\t\tTitanium.UI.TableViewRow.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TableViewRow.fireEvent","display":"(Method)\t\tTitanium.UI.TableViewRow.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableViewRow.hide","display":"(Method)\t\tTitanium.UI.TableViewRow.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TableViewRow.remove","display":"(Method)\t\tTitanium.UI.TableViewRow.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableViewRow.removeEventListener","display":"(Method)\t\tTitanium.UI.TableViewRow.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableViewRow.show","display":"(Method)\t\tTitanium.UI.TableViewRow.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewRow.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TableViewRow.toImage","display":"(Method)\t\tTitanium.UI.TableViewRow.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TableViewRow.anchorPoint","display":"(Property)\tTitanium.UI.TableViewRow.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TableViewRow.animatedCenterPoint","display":"(Property)\tTitanium.UI.TableViewRow.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background cell color</p>","insert":"$0","match":"Titanium.UI.TableViewRow.backgroundColor","display":"(Property)\tTitanium.UI.TableViewRow.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TableViewRow.backgroundGradient","display":"(Property)\tTitanium.UI.TableViewRow.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background cell image</p>","insert":"$0","match":"Titanium.UI.TableViewRow.backgroundImage","display":"(Property)\tTitanium.UI.TableViewRow.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TableViewRow.backgroundLeftCap","display":"(Property)\tTitanium.UI.TableViewRow.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TableViewRow.backgroundTopCap","display":"(Property)\tTitanium.UI.TableViewRow.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TableViewRow.borderColor","display":"(Property)\tTitanium.UI.TableViewRow.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TableViewRow.borderRadius","display":"(Property)\tTitanium.UI.TableViewRow.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TableViewRow.borderWidth","display":"(Property)\tTitanium.UI.TableViewRow.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewRow.bottom","display":"(Property)\tTitanium.UI.TableViewRow.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TableViewRow.center","display":"(Property)\tTitanium.UI.TableViewRow.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.</p>","insert":"$0","match":"Titanium.UI.TableViewRow.className","display":"(Property)\tTitanium.UI.TableViewRow.className\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>default color of the row when not selected</p>","insert":"$0","match":"Titanium.UI.TableViewRow.color","display":"(Property)\tTitanium.UI.TableViewRow.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>render a system provided check mark in the right image area of the row cell</p>","insert":"$0","match":"Titanium.UI.TableViewRow.hasCheck","display":"(Property)\tTitanium.UI.TableViewRow.hasCheck\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>render a system provided right arrow in the right image area of the row cell</p>","insert":"$0","match":"Titanium.UI.TableViewRow.hasChild","display":"(Property)\tTitanium.UI.TableViewRow.hasChild\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>render a system provided blue indicator icon in the right image area of the row cell</p>","insert":"$0","match":"Titanium.UI.TableViewRow.hasDetail","display":"(Property)\tTitanium.UI.TableViewRow.hasDetail\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the row. specify <tt>auto</tt> to calculate the row height based on the size of the child views of the row</p>","insert":"$0","match":"Titanium.UI.TableViewRow.height","display":"(Property)\tTitanium.UI.TableViewRow.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the indention level for the cell (defaults to 0)</p>","insert":"$0","match":"Titanium.UI.TableViewRow.indentionLevel","display":"(Property)\tTitanium.UI.TableViewRow.indentionLevel\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the layout algorithm to use for the layout. either absolute (default) or vertical.</p>","insert":"$0","match":"Titanium.UI.TableViewRow.layout","display":"(Property)\tTitanium.UI.TableViewRow.layout\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewRow.left","display":"(Property)\tTitanium.UI.TableViewRow.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image url to render in the left image area of the row cell</p>","insert":"$0","match":"Titanium.UI.TableViewRow.leftImage","display":"(Property)\tTitanium.UI.TableViewRow.leftImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TableViewRow.opacity","display":"(Property)\tTitanium.UI.TableViewRow.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewRow.right","display":"(Property)\tTitanium.UI.TableViewRow.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image url to render in the right image area of the row cell</p>","insert":"$0","match":"Titanium.UI.TableViewRow.rightImage","display":"(Property)\tTitanium.UI.TableViewRow.rightImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color to render when the row cell is selected</p>","insert":"$0","match":"Titanium.UI.TableViewRow.selectedBackgroundColor","display":"(Property)\tTitanium.UI.TableViewRow.selectedBackgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background image to render when the row cell is selected</p>","insert":"$0","match":"Titanium.UI.TableViewRow.selectedBackgroundImage","display":"(Property)\tTitanium.UI.TableViewRow.selectedBackgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>color of the row during selection</p>","insert":"$0","match":"Titanium.UI.TableViewRow.selectedColor","display":"(Property)\tTitanium.UI.TableViewRow.selectedColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle</p>","insert":"$0","match":"Titanium.UI.TableViewRow.selectionStyle","display":"(Property)\tTitanium.UI.TableViewRow.selectionStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TableViewRow.size","display":"(Property)\tTitanium.UI.TableViewRow.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title cell value. do not specify if using views as children of the row</p>","insert":"$0","match":"Titanium.UI.TableViewRow.title","display":"(Property)\tTitanium.UI.TableViewRow.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewRow.top","display":"(Property)\tTitanium.UI.TableViewRow.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TableViewRow.touchEnabled","display":"(Property)\tTitanium.UI.TableViewRow.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TableViewRow.transform","display":"(Property)\tTitanium.UI.TableViewRow.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TableViewRow.visible","display":"(Property)\tTitanium.UI.TableViewRow.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewRow.width","display":"(Property)\tTitanium.UI.TableViewRow.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TableViewRow.zIndex","display":"(Property)\tTitanium.UI.TableViewRow.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A TableView row object created by the method <a href=\"Titanium.UI.createTableViewRow.html\">Titanium.UI.createTableViewRow</a>.</p><hr /><p>Make sure you set the tableClass on each row instance if using more than one type of row layout. You can use the same value for each instance of a row where the layout is the same - even if the value of the elements inside the row have different values.  For example, if the text is the only thing different between two cells but the layout is the same, both row instances should have the same value for tableClass.</p>\n<p>You can listen for table row events on all rows by adding an event listener to the table view instance.  Events automatically propagate to parent views.</p>","insert":"$0","match":"Ti.UI.TableViewRow","display":"(Namespace)\tTi.UI.TableViewRow","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TableViewRow.add","display":"(Method)\t\tTi.UI.TableViewRow.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableViewRow.addEventListener","display":"(Method)\t\tTi.UI.TableViewRow.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableViewRow.animate","display":"(Method)\t\tTi.UI.TableViewRow.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TableViewRow.fireEvent","display":"(Method)\t\tTi.UI.TableViewRow.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableViewRow.hide","display":"(Method)\t\tTi.UI.TableViewRow.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TableViewRow.remove","display":"(Method)\t\tTi.UI.TableViewRow.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableViewRow.removeEventListener","display":"(Method)\t\tTi.UI.TableViewRow.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableViewRow.show","display":"(Method)\t\tTi.UI.TableViewRow.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewRow.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TableViewRow.toImage","display":"(Method)\t\tTi.UI.TableViewRow.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TableViewRow.anchorPoint","display":"(Property)\tTi.UI.TableViewRow.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TableViewRow.animatedCenterPoint","display":"(Property)\tTi.UI.TableViewRow.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background cell color</p>","insert":"$0","match":"Ti.UI.TableViewRow.backgroundColor","display":"(Property)\tTi.UI.TableViewRow.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TableViewRow.backgroundGradient","display":"(Property)\tTi.UI.TableViewRow.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background cell image</p>","insert":"$0","match":"Ti.UI.TableViewRow.backgroundImage","display":"(Property)\tTi.UI.TableViewRow.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TableViewRow.backgroundLeftCap","display":"(Property)\tTi.UI.TableViewRow.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TableViewRow.backgroundTopCap","display":"(Property)\tTi.UI.TableViewRow.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TableViewRow.borderColor","display":"(Property)\tTi.UI.TableViewRow.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TableViewRow.borderRadius","display":"(Property)\tTi.UI.TableViewRow.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TableViewRow.borderWidth","display":"(Property)\tTi.UI.TableViewRow.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewRow.bottom","display":"(Property)\tTi.UI.TableViewRow.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TableViewRow.center","display":"(Property)\tTi.UI.TableViewRow.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.</p>","insert":"$0","match":"Ti.UI.TableViewRow.className","display":"(Property)\tTi.UI.TableViewRow.className\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>default color of the row when not selected</p>","insert":"$0","match":"Ti.UI.TableViewRow.color","display":"(Property)\tTi.UI.TableViewRow.color\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>render a system provided check mark in the right image area of the row cell</p>","insert":"$0","match":"Ti.UI.TableViewRow.hasCheck","display":"(Property)\tTi.UI.TableViewRow.hasCheck\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>render a system provided right arrow in the right image area of the row cell</p>","insert":"$0","match":"Ti.UI.TableViewRow.hasChild","display":"(Property)\tTi.UI.TableViewRow.hasChild\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>render a system provided blue indicator icon in the right image area of the row cell</p>","insert":"$0","match":"Ti.UI.TableViewRow.hasDetail","display":"(Property)\tTi.UI.TableViewRow.hasDetail\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the row. specify <tt>auto</tt> to calculate the row height based on the size of the child views of the row</p>","insert":"$0","match":"Ti.UI.TableViewRow.height","display":"(Property)\tTi.UI.TableViewRow.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the indention level for the cell (defaults to 0)</p>","insert":"$0","match":"Ti.UI.TableViewRow.indentionLevel","display":"(Property)\tTi.UI.TableViewRow.indentionLevel\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the layout algorithm to use for the layout. either absolute (default) or vertical.</p>","insert":"$0","match":"Ti.UI.TableViewRow.layout","display":"(Property)\tTi.UI.TableViewRow.layout\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewRow.left","display":"(Property)\tTi.UI.TableViewRow.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image url to render in the left image area of the row cell</p>","insert":"$0","match":"Ti.UI.TableViewRow.leftImage","display":"(Property)\tTi.UI.TableViewRow.leftImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TableViewRow.opacity","display":"(Property)\tTi.UI.TableViewRow.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewRow.right","display":"(Property)\tTi.UI.TableViewRow.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>image url to render in the right image area of the row cell</p>","insert":"$0","match":"Ti.UI.TableViewRow.rightImage","display":"(Property)\tTi.UI.TableViewRow.rightImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color to render when the row cell is selected</p>","insert":"$0","match":"Ti.UI.TableViewRow.selectedBackgroundColor","display":"(Property)\tTi.UI.TableViewRow.selectedBackgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background image to render when the row cell is selected</p>","insert":"$0","match":"Ti.UI.TableViewRow.selectedBackgroundImage","display":"(Property)\tTi.UI.TableViewRow.selectedBackgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>color of the row during selection</p>","insert":"$0","match":"Ti.UI.TableViewRow.selectedColor","display":"(Property)\tTi.UI.TableViewRow.selectedColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle</p>","insert":"$0","match":"Ti.UI.TableViewRow.selectionStyle","display":"(Property)\tTi.UI.TableViewRow.selectionStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TableViewRow.size","display":"(Property)\tTi.UI.TableViewRow.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title cell value. do not specify if using views as children of the row</p>","insert":"$0","match":"Ti.UI.TableViewRow.title","display":"(Property)\tTi.UI.TableViewRow.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewRow.top","display":"(Property)\tTi.UI.TableViewRow.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TableViewRow.touchEnabled","display":"(Property)\tTi.UI.TableViewRow.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TableViewRow.transform","display":"(Property)\tTi.UI.TableViewRow.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TableViewRow.visible","display":"(Property)\tTi.UI.TableViewRow.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewRow.width","display":"(Property)\tTi.UI.TableViewRow.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TableViewRow.zIndex","display":"(Property)\tTi.UI.TableViewRow.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A TableView section object created by the method <a href=\"Titanium.UI.createTableViewSection.html\">Titanium.UI.createTableViewSection</a>.</p><hr />","insert":"$0","match":"Titanium.UI.TableViewSection","display":"(Namespace)\tTitanium.UI.TableViewSection","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a row to the section</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>the row object to add to the section</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.TableViewSection.add","display":"(Method)\t\tTitanium.UI.TableViewSection.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableViewSection.addEventListener","display":"(Method)\t\tTitanium.UI.TableViewSection.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableViewSection.animate","display":"(Method)\t\tTitanium.UI.TableViewSection.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TableViewSection.fireEvent","display":"(Method)\t\tTitanium.UI.TableViewSection.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableViewSection.hide","display":"(Method)\t\tTitanium.UI.TableViewSection.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a remove from the section</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>the row object to remove from the section</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.TableViewSection.remove","display":"(Method)\t\tTitanium.UI.TableViewSection.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TableViewSection.removeEventListener","display":"(Method)\t\tTitanium.UI.TableViewSection.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableViewSection.rowAtIndex","display":"(Method)\t\tTitanium.UI.TableViewSection.rowAtIndex\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TableViewSection.show","display":"(Method)\t\tTitanium.UI.TableViewSection.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TableViewSection.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TableViewSection.toImage","display":"(Method)\t\tTitanium.UI.TableViewSection.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TableViewSection.anchorPoint","display":"(Property)\tTitanium.UI.TableViewSection.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TableViewSection.animatedCenterPoint","display":"(Property)\tTitanium.UI.TableViewSection.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.TableViewSection.backgroundColor","display":"(Property)\tTitanium.UI.TableViewSection.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TableViewSection.backgroundGradient","display":"(Property)\tTitanium.UI.TableViewSection.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.TableViewSection.backgroundImage","display":"(Property)\tTitanium.UI.TableViewSection.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TableViewSection.backgroundLeftCap","display":"(Property)\tTitanium.UI.TableViewSection.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TableViewSection.backgroundTopCap","display":"(Property)\tTitanium.UI.TableViewSection.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TableViewSection.borderColor","display":"(Property)\tTitanium.UI.TableViewSection.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TableViewSection.borderRadius","display":"(Property)\tTitanium.UI.TableViewSection.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TableViewSection.borderWidth","display":"(Property)\tTitanium.UI.TableViewSection.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewSection.bottom","display":"(Property)\tTitanium.UI.TableViewSection.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TableViewSection.center","display":"(Property)\tTitanium.UI.TableViewSection.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the section footer</p>","insert":"$0","match":"Titanium.UI.TableViewSection.footerTitle","display":"(Property)\tTitanium.UI.TableViewSection.footerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a view to use instead of the default label when rendering the section footer</p>","insert":"$0","match":"Titanium.UI.TableViewSection.footerView","display":"(Property)\tTitanium.UI.TableViewSection.footerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the section header</p>","insert":"$0","match":"Titanium.UI.TableViewSection.headerTitle","display":"(Property)\tTitanium.UI.TableViewSection.headerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a view to use instead of the default label when rendering the section header</p>","insert":"$0","match":"Titanium.UI.TableViewSection.headerView","display":"(Property)\tTitanium.UI.TableViewSection.headerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewSection.height","display":"(Property)\tTitanium.UI.TableViewSection.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewSection.left","display":"(Property)\tTitanium.UI.TableViewSection.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TableViewSection.opacity","display":"(Property)\tTitanium.UI.TableViewSection.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewSection.right","display":"(Property)\tTitanium.UI.TableViewSection.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the (readonly) number of rows in the section</p>","insert":"$0","match":"Titanium.UI.TableViewSection.rowCount","display":"(Property)\tTitanium.UI.TableViewSection.rowCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TableViewSection.size","display":"(Property)\tTitanium.UI.TableViewSection.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewSection.top","display":"(Property)\tTitanium.UI.TableViewSection.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TableViewSection.touchEnabled","display":"(Property)\tTitanium.UI.TableViewSection.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TableViewSection.transform","display":"(Property)\tTitanium.UI.TableViewSection.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TableViewSection.visible","display":"(Property)\tTitanium.UI.TableViewSection.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TableViewSection.width","display":"(Property)\tTitanium.UI.TableViewSection.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TableViewSection.zIndex","display":"(Property)\tTitanium.UI.TableViewSection.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A TableView section object created by the method <a href=\"Titanium.UI.createTableViewSection.html\">Titanium.UI.createTableViewSection</a>.</p><hr />","insert":"$0","match":"Ti.UI.TableViewSection","display":"(Namespace)\tTi.UI.TableViewSection","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a row to the section</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>the row object to add to the section</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.TableViewSection.add","display":"(Method)\t\tTi.UI.TableViewSection.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableViewSection.addEventListener","display":"(Method)\t\tTi.UI.TableViewSection.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableViewSection.animate","display":"(Method)\t\tTi.UI.TableViewSection.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TableViewSection.fireEvent","display":"(Method)\t\tTi.UI.TableViewSection.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableViewSection.hide","display":"(Method)\t\tTi.UI.TableViewSection.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a remove from the section</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n\t\t<span><b>row</b><i>:object</i></span>\n\t\t<span class='info'>the row object to remove from the section</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.TableViewSection.remove","display":"(Method)\t\tTi.UI.TableViewSection.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TableViewSection.removeEventListener","display":"(Method)\t\tTi.UI.TableViewSection.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableViewSection.rowAtIndex","display":"(Method)\t\tTi.UI.TableViewSection.rowAtIndex\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TableViewSection.show","display":"(Method)\t\tTi.UI.TableViewSection.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TableViewSection.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TableViewSection.toImage","display":"(Method)\t\tTi.UI.TableViewSection.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TableViewSection.anchorPoint","display":"(Property)\tTi.UI.TableViewSection.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TableViewSection.animatedCenterPoint","display":"(Property)\tTi.UI.TableViewSection.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.TableViewSection.backgroundColor","display":"(Property)\tTi.UI.TableViewSection.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TableViewSection.backgroundGradient","display":"(Property)\tTi.UI.TableViewSection.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.TableViewSection.backgroundImage","display":"(Property)\tTi.UI.TableViewSection.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TableViewSection.backgroundLeftCap","display":"(Property)\tTi.UI.TableViewSection.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TableViewSection.backgroundTopCap","display":"(Property)\tTi.UI.TableViewSection.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TableViewSection.borderColor","display":"(Property)\tTi.UI.TableViewSection.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TableViewSection.borderRadius","display":"(Property)\tTi.UI.TableViewSection.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TableViewSection.borderWidth","display":"(Property)\tTi.UI.TableViewSection.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewSection.bottom","display":"(Property)\tTi.UI.TableViewSection.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TableViewSection.center","display":"(Property)\tTi.UI.TableViewSection.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the section footer</p>","insert":"$0","match":"Ti.UI.TableViewSection.footerTitle","display":"(Property)\tTi.UI.TableViewSection.footerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a view to use instead of the default label when rendering the section footer</p>","insert":"$0","match":"Ti.UI.TableViewSection.footerView","display":"(Property)\tTi.UI.TableViewSection.footerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the section header</p>","insert":"$0","match":"Ti.UI.TableViewSection.headerTitle","display":"(Property)\tTi.UI.TableViewSection.headerTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a view to use instead of the default label when rendering the section header</p>","insert":"$0","match":"Ti.UI.TableViewSection.headerView","display":"(Property)\tTi.UI.TableViewSection.headerView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewSection.height","display":"(Property)\tTi.UI.TableViewSection.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewSection.left","display":"(Property)\tTi.UI.TableViewSection.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TableViewSection.opacity","display":"(Property)\tTi.UI.TableViewSection.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewSection.right","display":"(Property)\tTi.UI.TableViewSection.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the (readonly) number of rows in the section</p>","insert":"$0","match":"Ti.UI.TableViewSection.rowCount","display":"(Property)\tTi.UI.TableViewSection.rowCount\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TableViewSection.size","display":"(Property)\tTi.UI.TableViewSection.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewSection.top","display":"(Property)\tTi.UI.TableViewSection.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TableViewSection.touchEnabled","display":"(Property)\tTi.UI.TableViewSection.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TableViewSection.transform","display":"(Property)\tTi.UI.TableViewSection.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TableViewSection.visible","display":"(Property)\tTi.UI.TableViewSection.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TableViewSection.width","display":"(Property)\tTi.UI.TableViewSection.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TableViewSection.zIndex","display":"(Property)\tTi.UI.TableViewSection.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Text Area is created by the method <a href=\"Titanium.UI.createTextArea.html\">Titanium.UI.createTextArea</a>. The Text Area is a multiline field.</p><hr /><p>Both Text Areas and Text Fields can control the buttons displayed in a button bar above the keyboard when it's visible.</p>\n<p>Example using a custom keyboard toolbar:</p>\n<pre><code>var textfield = Titanium.UI.createTextField({\n    color:'#336699',\n    value:'Focus to see keyboard w/ toolbar',\n    height:35,\n    width:300,\n    top:10,\n    borderStyle:Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,\n    keyboardToolbar:[flexSpace,camera, flexSpace,tf,flexSpace, send,flexSpace],\n    keyboardToolbarColor: '#999',   \n    keyboardToolbarHeight: 40,\n});\n</code></pre>","insert":"$0","match":"Titanium.UI.TextArea","display":"(Namespace)\tTitanium.UI.TextArea","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TextArea.add","display":"(Method)\t\tTitanium.UI.TextArea.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TextArea.addEventListener","display":"(Method)\t\tTitanium.UI.TextArea.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TextArea.animate","display":"(Method)\t\tTitanium.UI.TextArea.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextArea.blur","display":"(Method)\t\tTitanium.UI.TextArea.blur\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TextArea.fireEvent","display":"(Method)\t\tTitanium.UI.TextArea.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextArea.focus","display":"(Method)\t\tTitanium.UI.TextArea.focus\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextArea.hasText","display":"(Method)\t\tTitanium.UI.TextArea.hasText\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextArea.hide","display":"(Method)\t\tTitanium.UI.TextArea.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TextArea.remove","display":"(Method)\t\tTitanium.UI.TextArea.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TextArea.removeEventListener","display":"(Method)\t\tTitanium.UI.TextArea.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextArea.show","display":"(Method)\t\tTitanium.UI.TextArea.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextArea.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TextArea.toImage","display":"(Method)\t\tTitanium.UI.TextArea.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TextArea.anchorPoint","display":"(Property)\tTitanium.UI.TextArea.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TextArea.animatedCenterPoint","display":"(Property)\tTitanium.UI.TextArea.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the background color of the field</p>","insert":"$0","match":"Titanium.UI.TextArea.backgroundColor","display":"(Property)\tTitanium.UI.TextArea.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TextArea.backgroundGradient","display":"(Property)\tTitanium.UI.TextArea.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.TextArea.backgroundImage","display":"(Property)\tTitanium.UI.TextArea.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TextArea.backgroundLeftCap","display":"(Property)\tTitanium.UI.TextArea.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TextArea.backgroundTopCap","display":"(Property)\tTitanium.UI.TextArea.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TextArea.borderColor","display":"(Property)\tTitanium.UI.TextArea.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TextArea.borderRadius","display":"(Property)\tTitanium.UI.TextArea.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TextArea.borderWidth","display":"(Property)\tTitanium.UI.TextArea.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextArea.bottom","display":"(Property)\tTitanium.UI.TextArea.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TextArea.center","display":"(Property)\tTitanium.UI.TextArea.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating if the field is editable</p>","insert":"$0","match":"Titanium.UI.TextArea.editable","display":"(Property)\tTitanium.UI.TextArea.editable\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating the enabled state of the field</p>","insert":"$0","match":"Titanium.UI.TextArea.enabled","display":"(Property)\tTitanium.UI.TextArea.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextArea.height","display":"(Property)\tTitanium.UI.TextArea.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of toolbar button objects to be used when the keyboard is displayed</p>","insert":"$0","match":"Titanium.UI.TextArea.keyboardToolbar","display":"(Property)\tTitanium.UI.TextArea.keyboardToolbar\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the keyboard toolbar</p>","insert":"$0","match":"Titanium.UI.TextArea.keyboardToolbarColor","display":"(Property)\tTitanium.UI.TextArea.keyboardToolbarColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the keyboard toolbar</p>","insert":"$0","match":"Titanium.UI.TextArea.keyboardToolbarHeight","display":"(Property)\tTitanium.UI.TextArea.keyboardToolbarHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextArea.left","display":"(Property)\tTitanium.UI.TextArea.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TextArea.opacity","display":"(Property)\tTitanium.UI.TextArea.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextArea.right","display":"(Property)\tTitanium.UI.TextArea.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TextArea.size","display":"(Property)\tTitanium.UI.TextArea.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the return key should be suppressed during entry</p>","insert":"$0","match":"Titanium.UI.TextArea.suppressReturn","display":"(Property)\tTitanium.UI.TextArea.suppressReturn\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextArea.top","display":"(Property)\tTitanium.UI.TextArea.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TextArea.touchEnabled","display":"(Property)\tTitanium.UI.TextArea.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TextArea.transform","display":"(Property)\tTitanium.UI.TextArea.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the field</p>","insert":"$0","match":"Titanium.UI.TextArea.value","display":"(Property)\tTitanium.UI.TextArea.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TextArea.visible","display":"(Property)\tTitanium.UI.TextArea.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextArea.width","display":"(Property)\tTitanium.UI.TextArea.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TextArea.zIndex","display":"(Property)\tTitanium.UI.TextArea.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Text Area is created by the method <a href=\"Titanium.UI.createTextArea.html\">Titanium.UI.createTextArea</a>. The Text Area is a multiline field.</p><hr /><p>Both Text Areas and Text Fields can control the buttons displayed in a button bar above the keyboard when it's visible.</p>\n<p>Example using a custom keyboard toolbar:</p>\n<pre><code>var textfield = Titanium.UI.createTextField({\n    color:'#336699',\n    value:'Focus to see keyboard w/ toolbar',\n    height:35,\n    width:300,\n    top:10,\n    borderStyle:Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,\n    keyboardToolbar:[flexSpace,camera, flexSpace,tf,flexSpace, send,flexSpace],\n    keyboardToolbarColor: '#999',   \n    keyboardToolbarHeight: 40,\n});\n</code></pre>","insert":"$0","match":"Ti.UI.TextArea","display":"(Namespace)\tTi.UI.TextArea","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TextArea.add","display":"(Method)\t\tTi.UI.TextArea.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TextArea.addEventListener","display":"(Method)\t\tTi.UI.TextArea.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TextArea.animate","display":"(Method)\t\tTi.UI.TextArea.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextArea.blur","display":"(Method)\t\tTi.UI.TextArea.blur\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TextArea.fireEvent","display":"(Method)\t\tTi.UI.TextArea.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextArea.focus","display":"(Method)\t\tTi.UI.TextArea.focus\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextArea.hasText","display":"(Method)\t\tTi.UI.TextArea.hasText\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextArea.hide","display":"(Method)\t\tTi.UI.TextArea.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TextArea.remove","display":"(Method)\t\tTi.UI.TextArea.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TextArea.removeEventListener","display":"(Method)\t\tTi.UI.TextArea.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextArea.show","display":"(Method)\t\tTi.UI.TextArea.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextArea.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TextArea.toImage","display":"(Method)\t\tTi.UI.TextArea.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TextArea.anchorPoint","display":"(Property)\tTi.UI.TextArea.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TextArea.animatedCenterPoint","display":"(Property)\tTi.UI.TextArea.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the background color of the field</p>","insert":"$0","match":"Ti.UI.TextArea.backgroundColor","display":"(Property)\tTi.UI.TextArea.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TextArea.backgroundGradient","display":"(Property)\tTi.UI.TextArea.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.TextArea.backgroundImage","display":"(Property)\tTi.UI.TextArea.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TextArea.backgroundLeftCap","display":"(Property)\tTi.UI.TextArea.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TextArea.backgroundTopCap","display":"(Property)\tTi.UI.TextArea.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TextArea.borderColor","display":"(Property)\tTi.UI.TextArea.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TextArea.borderRadius","display":"(Property)\tTi.UI.TextArea.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TextArea.borderWidth","display":"(Property)\tTi.UI.TextArea.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextArea.bottom","display":"(Property)\tTi.UI.TextArea.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TextArea.center","display":"(Property)\tTi.UI.TextArea.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating if the field is editable</p>","insert":"$0","match":"Ti.UI.TextArea.editable","display":"(Property)\tTi.UI.TextArea.editable\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating the enabled state of the field</p>","insert":"$0","match":"Ti.UI.TextArea.enabled","display":"(Property)\tTi.UI.TextArea.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.TextArea.height","display":"(Property)\tTi.UI.TextArea.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of toolbar button objects to be used when the keyboard is displayed</p>","insert":"$0","match":"Ti.UI.TextArea.keyboardToolbar","display":"(Property)\tTi.UI.TextArea.keyboardToolbar\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the keyboard toolbar</p>","insert":"$0","match":"Ti.UI.TextArea.keyboardToolbarColor","display":"(Property)\tTi.UI.TextArea.keyboardToolbarColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the keyboard toolbar</p>","insert":"$0","match":"Ti.UI.TextArea.keyboardToolbarHeight","display":"(Property)\tTi.UI.TextArea.keyboardToolbarHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextArea.left","display":"(Property)\tTi.UI.TextArea.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TextArea.opacity","display":"(Property)\tTi.UI.TextArea.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextArea.right","display":"(Property)\tTi.UI.TextArea.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TextArea.size","display":"(Property)\tTi.UI.TextArea.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the return key should be suppressed during entry</p>","insert":"$0","match":"Ti.UI.TextArea.suppressReturn","display":"(Property)\tTi.UI.TextArea.suppressReturn\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextArea.top","display":"(Property)\tTi.UI.TextArea.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TextArea.touchEnabled","display":"(Property)\tTi.UI.TextArea.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TextArea.transform","display":"(Property)\tTi.UI.TextArea.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the field</p>","insert":"$0","match":"Ti.UI.TextArea.value","display":"(Property)\tTi.UI.TextArea.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TextArea.visible","display":"(Property)\tTi.UI.TextArea.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextArea.width","display":"(Property)\tTi.UI.TextArea.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TextArea.zIndex","display":"(Property)\tTi.UI.TextArea.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Text Area is created by the method <a href=\"Titanium.UI.createTextField.html\">Titanium.UI.createTextField</a>. The Text Field is a single line field.</p><hr /><p>On iPhone, the borderStyle can be set with a constant from <a href=\"Titanium.UI\">Titanium.UI</a>.</p>\n<p>Both Text Areas and Text Fields can control the buttons displayed in a button bar above the keyboard when it's visible.</p>\n<p>Example using a custom keyboard toolbar:</p>\n<pre><code>var textfield = Titanium.UI.createTextField({\n    color:'#336699',\n    value:'Focus to see keyboard w/ toolbar',\n    height:35,\n    width:300,\n    top:10,\n    borderStyle:Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,\n    keyboardToolbar:[flexSpace,camera, flexSpace,tf,flexSpace, send,flexSpace],\n    keyboardToolbarColor: '#999',   \n    keyboardToolbarHeight: 40,\n});\n</code></pre>","insert":"$0","match":"Titanium.UI.TextField","display":"(Namespace)\tTitanium.UI.TextField","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TextField.add","display":"(Method)\t\tTitanium.UI.TextField.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TextField.addEventListener","display":"(Method)\t\tTitanium.UI.TextField.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TextField.animate","display":"(Method)\t\tTitanium.UI.TextField.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextField.blur","display":"(Method)\t\tTitanium.UI.TextField.blur\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.TextField.fireEvent","display":"(Method)\t\tTitanium.UI.TextField.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextField.focus","display":"(Method)\t\tTitanium.UI.TextField.focus\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextField.hasText","display":"(Method)\t\tTitanium.UI.TextField.hasText\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextField.hide","display":"(Method)\t\tTitanium.UI.TextField.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.TextField.remove","display":"(Method)\t\tTitanium.UI.TextField.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.TextField.removeEventListener","display":"(Method)\t\tTitanium.UI.TextField.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.TextField.show","display":"(Method)\t\tTitanium.UI.TextField.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.TextField.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.TextField.toImage","display":"(Method)\t\tTitanium.UI.TextField.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.TextField.anchorPoint","display":"(Property)\tTitanium.UI.TextField.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.TextField.animatedCenterPoint","display":"(Property)\tTitanium.UI.TextField.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the background color of the field</p>","insert":"$0","match":"Titanium.UI.TextField.backgroundColor","display":"(Property)\tTitanium.UI.TextField.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url to the background image of the field when in the disabled state</p>","insert":"$0","match":"Titanium.UI.TextField.backgroundDisabledImage","display":"(Property)\tTitanium.UI.TextField.backgroundDisabledImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.TextField.backgroundGradient","display":"(Property)\tTitanium.UI.TextField.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url to the background image of the field</p>","insert":"$0","match":"Titanium.UI.TextField.backgroundImage","display":"(Property)\tTitanium.UI.TextField.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.TextField.backgroundLeftCap","display":"(Property)\tTitanium.UI.TextField.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.TextField.backgroundTopCap","display":"(Property)\tTitanium.UI.TextField.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.TextField.borderColor","display":"(Property)\tTitanium.UI.TextField.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.TextField.borderRadius","display":"(Property)\tTitanium.UI.TextField.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the border style constant for the field</p>","insert":"$0","match":"Titanium.UI.TextField.borderStyle","display":"(Property)\tTitanium.UI.TextField.borderStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.TextField.borderWidth","display":"(Property)\tTitanium.UI.TextField.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextField.bottom","display":"(Property)\tTitanium.UI.TextField.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.TextField.center","display":"(Property)\tTitanium.UI.TextField.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the mode constant for how to handle displaying the clear button</p>","insert":"$0","match":"Titanium.UI.TextField.clearButtonMode","display":"(Property)\tTitanium.UI.TextField.clearButtonMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean that indicates if the value of the field is cleared upon editing</p>","insert":"$0","match":"Titanium.UI.TextField.clearOnEdit","display":"(Property)\tTitanium.UI.TextField.clearOnEdit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating if the field is editable</p>","insert":"$0","match":"Titanium.UI.TextField.editable","display":"(Property)\tTitanium.UI.TextField.editable\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating the enabled state of the field</p>","insert":"$0","match":"Titanium.UI.TextField.enabled","display":"(Property)\tTitanium.UI.TextField.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextField.height","display":"(Property)\tTitanium.UI.TextField.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the hint text to display when the field is unfocused</p>","insert":"$0","match":"Titanium.UI.TextField.hintText","display":"(Property)\tTitanium.UI.TextField.hintText\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of toolbar button objects to be used when the keyboard is displayed</p>","insert":"$0","match":"Titanium.UI.TextField.keyboardToolbar","display":"(Property)\tTitanium.UI.TextField.keyboardToolbar\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the keyboard toolbar</p>","insert":"$0","match":"Titanium.UI.TextField.keyboardToolbarColor","display":"(Property)\tTitanium.UI.TextField.keyboardToolbarColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the keyboard toolbar</p>","insert":"$0","match":"Titanium.UI.TextField.keyboardToolbarHeight","display":"(Property)\tTitanium.UI.TextField.keyboardToolbarHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextField.left","display":"(Property)\tTitanium.UI.TextField.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left button view</p>","insert":"$0","match":"Titanium.UI.TextField.leftButton","display":"(Property)\tTitanium.UI.TextField.leftButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the mode of the left button view</p>","insert":"$0","match":"Titanium.UI.TextField.leftButtonMode","display":"(Property)\tTitanium.UI.TextField.leftButtonMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left padding of the space between the button and the edge of the field</p>","insert":"$0","match":"Titanium.UI.TextField.leftButtonPadding","display":"(Property)\tTitanium.UI.TextField.leftButtonPadding\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum size of the font when the font is sized based on the contents</p>","insert":"$0","match":"Titanium.UI.TextField.minimumFontSize","display":"(Property)\tTitanium.UI.TextField.minimumFontSize\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.TextField.opacity","display":"(Property)\tTitanium.UI.TextField.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left padding of the text field</p>","insert":"$0","match":"Titanium.UI.TextField.paddingLeft","display":"(Property)\tTitanium.UI.TextField.paddingLeft\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right padding of the text field</p>","insert":"$0","match":"Titanium.UI.TextField.paddingRight","display":"(Property)\tTitanium.UI.TextField.paddingRight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextField.right","display":"(Property)\tTitanium.UI.TextField.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right button view</p>","insert":"$0","match":"Titanium.UI.TextField.rightButton","display":"(Property)\tTitanium.UI.TextField.rightButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the mode of the right button view</p>","insert":"$0","match":"Titanium.UI.TextField.rightButtonMode","display":"(Property)\tTitanium.UI.TextField.rightButtonMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right padding of the space between the button and the edge of the field</p>","insert":"$0","match":"Titanium.UI.TextField.rightButtonPadding","display":"(Property)\tTitanium.UI.TextField.rightButtonPadding\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.TextField.size","display":"(Property)\tTitanium.UI.TextField.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the return key should be suppressed during entry</p>","insert":"$0","match":"Titanium.UI.TextField.suppressReturn","display":"(Property)\tTitanium.UI.TextField.suppressReturn\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextField.top","display":"(Property)\tTitanium.UI.TextField.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.TextField.touchEnabled","display":"(Property)\tTitanium.UI.TextField.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.TextField.transform","display":"(Property)\tTitanium.UI.TextField.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the field</p>","insert":"$0","match":"Titanium.UI.TextField.value","display":"(Property)\tTitanium.UI.TextField.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the constant or string value for the fields vertical alignment.</p>","insert":"$0","match":"Titanium.UI.TextField.verticalAlign","display":"(Property)\tTitanium.UI.TextField.verticalAlign\t:int,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.TextField.visible","display":"(Property)\tTitanium.UI.TextField.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.TextField.width","display":"(Property)\tTitanium.UI.TextField.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.TextField.zIndex","display":"(Property)\tTitanium.UI.TextField.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Text Area is created by the method <a href=\"Titanium.UI.createTextField.html\">Titanium.UI.createTextField</a>. The Text Field is a single line field.</p><hr /><p>On iPhone, the borderStyle can be set with a constant from <a href=\"Titanium.UI\">Titanium.UI</a>.</p>\n<p>Both Text Areas and Text Fields can control the buttons displayed in a button bar above the keyboard when it's visible.</p>\n<p>Example using a custom keyboard toolbar:</p>\n<pre><code>var textfield = Titanium.UI.createTextField({\n    color:'#336699',\n    value:'Focus to see keyboard w/ toolbar',\n    height:35,\n    width:300,\n    top:10,\n    borderStyle:Titanium.UI.INPUT_BORDERSTYLE_ROUNDED,\n    keyboardToolbar:[flexSpace,camera, flexSpace,tf,flexSpace, send,flexSpace],\n    keyboardToolbarColor: '#999',   \n    keyboardToolbarHeight: 40,\n});\n</code></pre>","insert":"$0","match":"Ti.UI.TextField","display":"(Namespace)\tTi.UI.TextField","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TextField.add","display":"(Method)\t\tTi.UI.TextField.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TextField.addEventListener","display":"(Method)\t\tTi.UI.TextField.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TextField.animate","display":"(Method)\t\tTi.UI.TextField.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextField.blur","display":"(Method)\t\tTi.UI.TextField.blur\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.TextField.fireEvent","display":"(Method)\t\tTi.UI.TextField.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextField.focus","display":"(Method)\t\tTi.UI.TextField.focus\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextField.hasText","display":"(Method)\t\tTi.UI.TextField.hasText\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextField.hide","display":"(Method)\t\tTi.UI.TextField.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.TextField.remove","display":"(Method)\t\tTi.UI.TextField.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.TextField.removeEventListener","display":"(Method)\t\tTi.UI.TextField.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.TextField.show","display":"(Method)\t\tTi.UI.TextField.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.TextField.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.TextField.toImage","display":"(Method)\t\tTi.UI.TextField.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.TextField.anchorPoint","display":"(Property)\tTi.UI.TextField.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.TextField.animatedCenterPoint","display":"(Property)\tTi.UI.TextField.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the background color of the field</p>","insert":"$0","match":"Ti.UI.TextField.backgroundColor","display":"(Property)\tTi.UI.TextField.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url to the background image of the field when in the disabled state</p>","insert":"$0","match":"Ti.UI.TextField.backgroundDisabledImage","display":"(Property)\tTi.UI.TextField.backgroundDisabledImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.TextField.backgroundGradient","display":"(Property)\tTi.UI.TextField.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the image url to the background image of the field</p>","insert":"$0","match":"Ti.UI.TextField.backgroundImage","display":"(Property)\tTi.UI.TextField.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.TextField.backgroundLeftCap","display":"(Property)\tTi.UI.TextField.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.TextField.backgroundTopCap","display":"(Property)\tTi.UI.TextField.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.TextField.borderColor","display":"(Property)\tTi.UI.TextField.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.TextField.borderRadius","display":"(Property)\tTi.UI.TextField.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the border style constant for the field</p>","insert":"$0","match":"Ti.UI.TextField.borderStyle","display":"(Property)\tTi.UI.TextField.borderStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.TextField.borderWidth","display":"(Property)\tTi.UI.TextField.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextField.bottom","display":"(Property)\tTi.UI.TextField.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.TextField.center","display":"(Property)\tTi.UI.TextField.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the mode constant for how to handle displaying the clear button</p>","insert":"$0","match":"Ti.UI.TextField.clearButtonMode","display":"(Property)\tTi.UI.TextField.clearButtonMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean that indicates if the value of the field is cleared upon editing</p>","insert":"$0","match":"Ti.UI.TextField.clearOnEdit","display":"(Property)\tTi.UI.TextField.clearOnEdit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating if the field is editable</p>","insert":"$0","match":"Ti.UI.TextField.editable","display":"(Property)\tTi.UI.TextField.editable\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating the enabled state of the field</p>","insert":"$0","match":"Ti.UI.TextField.enabled","display":"(Property)\tTi.UI.TextField.enabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.TextField.height","display":"(Property)\tTi.UI.TextField.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the hint text to display when the field is unfocused</p>","insert":"$0","match":"Ti.UI.TextField.hintText","display":"(Property)\tTi.UI.TextField.hintText\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of toolbar button objects to be used when the keyboard is displayed</p>","insert":"$0","match":"Ti.UI.TextField.keyboardToolbar","display":"(Property)\tTi.UI.TextField.keyboardToolbar\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the color of the keyboard toolbar</p>","insert":"$0","match":"Ti.UI.TextField.keyboardToolbarColor","display":"(Property)\tTi.UI.TextField.keyboardToolbarColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the height of the keyboard toolbar</p>","insert":"$0","match":"Ti.UI.TextField.keyboardToolbarHeight","display":"(Property)\tTi.UI.TextField.keyboardToolbarHeight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextField.left","display":"(Property)\tTi.UI.TextField.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left button view</p>","insert":"$0","match":"Ti.UI.TextField.leftButton","display":"(Property)\tTi.UI.TextField.leftButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the mode of the left button view</p>","insert":"$0","match":"Ti.UI.TextField.leftButtonMode","display":"(Property)\tTi.UI.TextField.leftButtonMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left padding of the space between the button and the edge of the field</p>","insert":"$0","match":"Ti.UI.TextField.leftButtonPadding","display":"(Property)\tTi.UI.TextField.leftButtonPadding\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the minimum size of the font when the font is sized based on the contents</p>","insert":"$0","match":"Ti.UI.TextField.minimumFontSize","display":"(Property)\tTi.UI.TextField.minimumFontSize\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.TextField.opacity","display":"(Property)\tTi.UI.TextField.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left padding of the text field</p>","insert":"$0","match":"Ti.UI.TextField.paddingLeft","display":"(Property)\tTi.UI.TextField.paddingLeft\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right padding of the text field</p>","insert":"$0","match":"Ti.UI.TextField.paddingRight","display":"(Property)\tTi.UI.TextField.paddingRight\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextField.right","display":"(Property)\tTi.UI.TextField.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right button view</p>","insert":"$0","match":"Ti.UI.TextField.rightButton","display":"(Property)\tTi.UI.TextField.rightButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the mode of the right button view</p>","insert":"$0","match":"Ti.UI.TextField.rightButtonMode","display":"(Property)\tTi.UI.TextField.rightButtonMode\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right padding of the space between the button and the edge of the field</p>","insert":"$0","match":"Ti.UI.TextField.rightButtonPadding","display":"(Property)\tTi.UI.TextField.rightButtonPadding\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.TextField.size","display":"(Property)\tTi.UI.TextField.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the return key should be suppressed during entry</p>","insert":"$0","match":"Ti.UI.TextField.suppressReturn","display":"(Property)\tTi.UI.TextField.suppressReturn\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextField.top","display":"(Property)\tTi.UI.TextField.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.TextField.touchEnabled","display":"(Property)\tTi.UI.TextField.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.TextField.transform","display":"(Property)\tTi.UI.TextField.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>value of the field</p>","insert":"$0","match":"Ti.UI.TextField.value","display":"(Property)\tTi.UI.TextField.value\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the constant or string value for the fields vertical alignment.</p>","insert":"$0","match":"Ti.UI.TextField.verticalAlign","display":"(Property)\tTi.UI.TextField.verticalAlign\t:int,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.TextField.visible","display":"(Property)\tTi.UI.TextField.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.TextField.width","display":"(Property)\tTi.UI.TextField.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.TextField.zIndex","display":"(Property)\tTi.UI.TextField.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Toolbar is created by the method <a href=\"Titanium.UI.createToolbar.html\">Titanium.UI.createToolbar</a>.  A Toolbar can be placed at the bottom of a window and contain buttons.</p><hr />","insert":"$0","match":"Titanium.UI.Toolbar","display":"(Namespace)\tTitanium.UI.Toolbar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Toolbar.add","display":"(Method)\t\tTitanium.UI.Toolbar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Toolbar.addEventListener","display":"(Method)\t\tTitanium.UI.Toolbar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Toolbar.animate","display":"(Method)\t\tTitanium.UI.Toolbar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Toolbar.fireEvent","display":"(Method)\t\tTitanium.UI.Toolbar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Toolbar.hide","display":"(Method)\t\tTitanium.UI.Toolbar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Toolbar.remove","display":"(Method)\t\tTitanium.UI.Toolbar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Toolbar.removeEventListener","display":"(Method)\t\tTitanium.UI.Toolbar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Toolbar.show","display":"(Method)\t\tTitanium.UI.Toolbar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Toolbar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Toolbar.toImage","display":"(Method)\t\tTitanium.UI.Toolbar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Toolbar.anchorPoint","display":"(Property)\tTitanium.UI.Toolbar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Toolbar.animatedCenterPoint","display":"(Property)\tTitanium.UI.Toolbar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.Toolbar.backgroundColor","display":"(Property)\tTitanium.UI.Toolbar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Toolbar.backgroundGradient","display":"(Property)\tTitanium.UI.Toolbar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.Toolbar.backgroundImage","display":"(Property)\tTitanium.UI.Toolbar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Toolbar.backgroundLeftCap","display":"(Property)\tTitanium.UI.Toolbar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Toolbar.backgroundTopCap","display":"(Property)\tTitanium.UI.Toolbar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Toolbar.borderColor","display":"(Property)\tTitanium.UI.Toolbar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Toolbar.borderRadius","display":"(Property)\tTitanium.UI.Toolbar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Toolbar.borderWidth","display":"(Property)\tTitanium.UI.Toolbar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Toolbar.bottom","display":"(Property)\tTitanium.UI.Toolbar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Toolbar.center","display":"(Property)\tTitanium.UI.Toolbar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Toolbar.height","display":"(Property)\tTitanium.UI.Toolbar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Toolbar.left","display":"(Property)\tTitanium.UI.Toolbar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Toolbar.opacity","display":"(Property)\tTitanium.UI.Toolbar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Toolbar.right","display":"(Property)\tTitanium.UI.Toolbar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Toolbar.size","display":"(Property)\tTitanium.UI.Toolbar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Toolbar.top","display":"(Property)\tTitanium.UI.Toolbar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Toolbar.touchEnabled","display":"(Property)\tTitanium.UI.Toolbar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Toolbar.transform","display":"(Property)\tTitanium.UI.Toolbar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Toolbar.visible","display":"(Property)\tTitanium.UI.Toolbar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Toolbar.width","display":"(Property)\tTitanium.UI.Toolbar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Toolbar.zIndex","display":"(Property)\tTitanium.UI.Toolbar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Toolbar is created by the method <a href=\"Titanium.UI.createToolbar.html\">Titanium.UI.createToolbar</a>.  A Toolbar can be placed at the bottom of a window and contain buttons.</p><hr />","insert":"$0","match":"Ti.UI.Toolbar","display":"(Namespace)\tTi.UI.Toolbar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Toolbar.add","display":"(Method)\t\tTi.UI.Toolbar.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Toolbar.addEventListener","display":"(Method)\t\tTi.UI.Toolbar.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Toolbar.animate","display":"(Method)\t\tTi.UI.Toolbar.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Toolbar.fireEvent","display":"(Method)\t\tTi.UI.Toolbar.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Toolbar.hide","display":"(Method)\t\tTi.UI.Toolbar.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Toolbar.remove","display":"(Method)\t\tTi.UI.Toolbar.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Toolbar.removeEventListener","display":"(Method)\t\tTi.UI.Toolbar.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Toolbar.show","display":"(Method)\t\tTi.UI.Toolbar.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Toolbar.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Toolbar.toImage","display":"(Method)\t\tTi.UI.Toolbar.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Toolbar.anchorPoint","display":"(Property)\tTi.UI.Toolbar.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Toolbar.animatedCenterPoint","display":"(Property)\tTi.UI.Toolbar.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.Toolbar.backgroundColor","display":"(Property)\tTi.UI.Toolbar.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Toolbar.backgroundGradient","display":"(Property)\tTi.UI.Toolbar.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.Toolbar.backgroundImage","display":"(Property)\tTi.UI.Toolbar.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Toolbar.backgroundLeftCap","display":"(Property)\tTi.UI.Toolbar.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Toolbar.backgroundTopCap","display":"(Property)\tTi.UI.Toolbar.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Toolbar.borderColor","display":"(Property)\tTi.UI.Toolbar.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Toolbar.borderRadius","display":"(Property)\tTi.UI.Toolbar.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Toolbar.borderWidth","display":"(Property)\tTi.UI.Toolbar.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Toolbar.bottom","display":"(Property)\tTi.UI.Toolbar.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Toolbar.center","display":"(Property)\tTi.UI.Toolbar.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Toolbar.height","display":"(Property)\tTi.UI.Toolbar.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Toolbar.left","display":"(Property)\tTi.UI.Toolbar.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Toolbar.opacity","display":"(Property)\tTi.UI.Toolbar.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Toolbar.right","display":"(Property)\tTi.UI.Toolbar.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Toolbar.size","display":"(Property)\tTi.UI.Toolbar.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Toolbar.top","display":"(Property)\tTi.UI.Toolbar.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Toolbar.touchEnabled","display":"(Property)\tTi.UI.Toolbar.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Toolbar.transform","display":"(Property)\tTi.UI.Toolbar.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Toolbar.visible","display":"(Property)\tTi.UI.Toolbar.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Toolbar.width","display":"(Property)\tTi.UI.Toolbar.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Toolbar.zIndex","display":"(Property)\tTi.UI.Toolbar.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The View is an empty drawing surface or container. The View is created by the method <a href=\"Titanium.UI.createView.html\">Titanium.UI.createView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.View","display":"(Namespace)\tTitanium.UI.View","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.View.add","display":"(Method)\t\tTitanium.UI.View.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.View.addEventListener","display":"(Method)\t\tTitanium.UI.View.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.View.animate","display":"(Method)\t\tTitanium.UI.View.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.View.fireEvent","display":"(Method)\t\tTitanium.UI.View.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.View.hide","display":"(Method)\t\tTitanium.UI.View.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.View.remove","display":"(Method)\t\tTitanium.UI.View.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.View.removeEventListener","display":"(Method)\t\tTitanium.UI.View.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.View.show","display":"(Method)\t\tTitanium.UI.View.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.View.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.View.toImage","display":"(Method)\t\tTitanium.UI.View.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.View.anchorPoint","display":"(Property)\tTitanium.UI.View.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.View.animatedCenterPoint","display":"(Property)\tTitanium.UI.View.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.View.backgroundColor","display":"(Property)\tTitanium.UI.View.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.View.backgroundGradient","display":"(Property)\tTitanium.UI.View.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.View.backgroundImage","display":"(Property)\tTitanium.UI.View.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.View.backgroundLeftCap","display":"(Property)\tTitanium.UI.View.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.View.backgroundTopCap","display":"(Property)\tTitanium.UI.View.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.View.borderColor","display":"(Property)\tTitanium.UI.View.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.View.borderRadius","display":"(Property)\tTitanium.UI.View.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.View.borderWidth","display":"(Property)\tTitanium.UI.View.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.View.bottom","display":"(Property)\tTitanium.UI.View.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.View.center","display":"(Property)\tTitanium.UI.View.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.View.height","display":"(Property)\tTitanium.UI.View.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.View.left","display":"(Property)\tTitanium.UI.View.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.View.opacity","display":"(Property)\tTitanium.UI.View.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.View.right","display":"(Property)\tTitanium.UI.View.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.View.size","display":"(Property)\tTitanium.UI.View.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.View.top","display":"(Property)\tTitanium.UI.View.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.View.touchEnabled","display":"(Property)\tTitanium.UI.View.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.View.transform","display":"(Property)\tTitanium.UI.View.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.View.visible","display":"(Property)\tTitanium.UI.View.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.View.width","display":"(Property)\tTitanium.UI.View.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.View.zIndex","display":"(Property)\tTitanium.UI.View.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The View is an empty drawing surface or container. The View is created by the method <a href=\"Titanium.UI.createView.html\">Titanium.UI.createView</a>.</p><hr />","insert":"$0","match":"Ti.UI.View","display":"(Namespace)\tTi.UI.View","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.View.add","display":"(Method)\t\tTi.UI.View.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.View.addEventListener","display":"(Method)\t\tTi.UI.View.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.View.animate","display":"(Method)\t\tTi.UI.View.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.View.fireEvent","display":"(Method)\t\tTi.UI.View.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.View.hide","display":"(Method)\t\tTi.UI.View.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.View.remove","display":"(Method)\t\tTi.UI.View.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.View.removeEventListener","display":"(Method)\t\tTi.UI.View.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.View.show","display":"(Method)\t\tTi.UI.View.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.View.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.View.toImage","display":"(Method)\t\tTi.UI.View.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.View.anchorPoint","display":"(Property)\tTi.UI.View.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.View.animatedCenterPoint","display":"(Property)\tTi.UI.View.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.View.backgroundColor","display":"(Property)\tTi.UI.View.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.View.backgroundGradient","display":"(Property)\tTi.UI.View.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.View.backgroundImage","display":"(Property)\tTi.UI.View.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.View.backgroundLeftCap","display":"(Property)\tTi.UI.View.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.View.backgroundTopCap","display":"(Property)\tTi.UI.View.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.View.borderColor","display":"(Property)\tTi.UI.View.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.View.borderRadius","display":"(Property)\tTi.UI.View.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.View.borderWidth","display":"(Property)\tTi.UI.View.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.View.bottom","display":"(Property)\tTi.UI.View.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.View.center","display":"(Property)\tTi.UI.View.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.View.height","display":"(Property)\tTi.UI.View.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.View.left","display":"(Property)\tTi.UI.View.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.View.opacity","display":"(Property)\tTi.UI.View.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.View.right","display":"(Property)\tTi.UI.View.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.View.size","display":"(Property)\tTi.UI.View.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.View.top","display":"(Property)\tTi.UI.View.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.View.touchEnabled","display":"(Property)\tTi.UI.View.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.View.transform","display":"(Property)\tTi.UI.View.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.View.visible","display":"(Property)\tTi.UI.View.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.View.width","display":"(Property)\tTi.UI.View.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.View.zIndex","display":"(Property)\tTi.UI.View.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Web View allows you to open an HTML5 based view which can load either local or remote content. The content can be any valid web content such as HTML, PDF, SVG or other WebKit supported content types. The Web View is created by the method <a href=\"Titanium.UI.createWebView.html\">Titanium.UI.createWebView</a>.</p><hr /><p>Creating webviews are more expensive than creating pure native views because of the requirement toload the HTML browser into memory.</p>\n<p>Since a webview internally wants to handle its own events, scrolling and other related touch events against it's own view surface, you cannot have both Titanium style events against the webview instance and internal Javascript events in the DOM.  You must choose between one or the other.</p>","insert":"$0","match":"Titanium.UI.WebView","display":"(Namespace)\tTitanium.UI.WebView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.WebView.add","display":"(Method)\t\tTitanium.UI.WebView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.WebView.addEventListener","display":"(Method)\t\tTitanium.UI.WebView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.WebView.animate","display":"(Method)\t\tTitanium.UI.WebView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.canGoBack","display":"(Method)\t\tTitanium.UI.WebView.canGoBack\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.canGoForward","display":"(Method)\t\tTitanium.UI.WebView.canGoForward\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>invoke JavaScript inside the context of the webview and optionally, return a result</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.evalJS</u></b><i>:string()</i><br>(\n\t\t<span><b>content</b><i>:string</i></span>\n\t\t<span class='info'>JavaScript code as a string. The code will be evaluated inside the webview context.</span>\n)\n</code>","insert":"(${1:'${0:content}'})","match":"Titanium.UI.WebView.evalJS","display":"(Method)\t\tTitanium.UI.WebView.evalJS\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.WebView.fireEvent","display":"(Method)\t\tTitanium.UI.WebView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.goBack","display":"(Method)\t\tTitanium.UI.WebView.goBack\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.goForward","display":"(Method)\t\tTitanium.UI.WebView.goForward\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.hide","display":"(Method)\t\tTitanium.UI.WebView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.reload","display":"(Method)\t\tTitanium.UI.WebView.reload\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.WebView.remove","display":"(Method)\t\tTitanium.UI.WebView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.WebView.removeEventListener","display":"(Method)\t\tTitanium.UI.WebView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.repaint","display":"(Method)\t\tTitanium.UI.WebView.repaint\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the basic authentication for the webview instance to be used on subsequent url requests</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.setBasicAuthentication</u></b><i>:void()</i><br>(\n\t\t<span><b>username</b><i>:string</i></span>\n\t\t<span class='info'>the username</span>\n\t\t<span><b>password</b><i>:string</i></span>\n\t\t<span class='info'>the password</span>\n)\n</code>","insert":"(${1:'${2:username}', '${0:password}'})","match":"Titanium.UI.WebView.setBasicAuthentication","display":"(Method)\t\tTitanium.UI.WebView.setBasicAuthentication\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.show","display":"(Method)\t\tTitanium.UI.WebView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.WebView.stopLoading","display":"(Method)\t\tTitanium.UI.WebView.stopLoading\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.WebView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.WebView.toImage","display":"(Method)\t\tTitanium.UI.WebView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.WebView.anchorPoint","display":"(Property)\tTitanium.UI.WebView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.WebView.animatedCenterPoint","display":"(Property)\tTitanium.UI.WebView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color for the webview</p>","insert":"$0","match":"Titanium.UI.WebView.backgroundColor","display":"(Property)\tTitanium.UI.WebView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.WebView.backgroundGradient","display":"(Property)\tTitanium.UI.WebView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.WebView.backgroundImage","display":"(Property)\tTitanium.UI.WebView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.WebView.backgroundLeftCap","display":"(Property)\tTitanium.UI.WebView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.WebView.backgroundTopCap","display":"(Property)\tTitanium.UI.WebView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.WebView.borderColor","display":"(Property)\tTitanium.UI.WebView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.WebView.borderRadius","display":"(Property)\tTitanium.UI.WebView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.WebView.borderWidth","display":"(Property)\tTitanium.UI.WebView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.WebView.bottom","display":"(Property)\tTitanium.UI.WebView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.WebView.center","display":"(Property)\tTitanium.UI.WebView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a data blob or file that is used to load the web document</p>","insert":"$0","match":"Titanium.UI.WebView.data","display":"(Property)\tTitanium.UI.WebView.data\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.WebView.height","display":"(Property)\tTitanium.UI.WebView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the html content of the web document</p>","insert":"$0","match":"Titanium.UI.WebView.html","display":"(Property)\tTitanium.UI.WebView.html\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.WebView.left","display":"(Property)\tTitanium.UI.WebView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating if the webview is loading content</p>","insert":"$0","match":"Titanium.UI.WebView.loading","display":"(Property)\tTitanium.UI.WebView.loading\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.WebView.opacity","display":"(Property)\tTitanium.UI.WebView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.WebView.right","display":"(Property)\tTitanium.UI.WebView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>whether the webview should scale it's contents or not</p>","insert":"$0","match":"Titanium.UI.WebView.scalesPageToFit","display":"(Property)\tTitanium.UI.WebView.scalesPageToFit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.WebView.size","display":"(Property)\tTitanium.UI.WebView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.WebView.top","display":"(Property)\tTitanium.UI.WebView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.WebView.touchEnabled","display":"(Property)\tTitanium.UI.WebView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.WebView.transform","display":"(Property)\tTitanium.UI.WebView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)</p>","insert":"$0","match":"Titanium.UI.WebView.url","display":"(Property)\tTitanium.UI.WebView.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.WebView.visible","display":"(Property)\tTitanium.UI.WebView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.WebView.width","display":"(Property)\tTitanium.UI.WebView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.WebView.zIndex","display":"(Property)\tTitanium.UI.WebView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Web View allows you to open an HTML5 based view which can load either local or remote content. The content can be any valid web content such as HTML, PDF, SVG or other WebKit supported content types. The Web View is created by the method <a href=\"Titanium.UI.createWebView.html\">Titanium.UI.createWebView</a>.</p><hr /><p>Creating webviews are more expensive than creating pure native views because of the requirement toload the HTML browser into memory.</p>\n<p>Since a webview internally wants to handle its own events, scrolling and other related touch events against it's own view surface, you cannot have both Titanium style events against the webview instance and internal Javascript events in the DOM.  You must choose between one or the other.</p>","insert":"$0","match":"Ti.UI.WebView","display":"(Namespace)\tTi.UI.WebView","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.WebView.add","display":"(Method)\t\tTi.UI.WebView.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.WebView.addEventListener","display":"(Method)\t\tTi.UI.WebView.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.WebView.animate","display":"(Method)\t\tTi.UI.WebView.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.canGoBack","display":"(Method)\t\tTi.UI.WebView.canGoBack\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.canGoForward","display":"(Method)\t\tTi.UI.WebView.canGoForward\t:boolean()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>invoke JavaScript inside the context of the webview and optionally, return a result</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.evalJS</u></b><i>:string()</i><br>(\n\t\t<span><b>content</b><i>:string</i></span>\n\t\t<span class='info'>JavaScript code as a string. The code will be evaluated inside the webview context.</span>\n)\n</code>","insert":"(${1:'${0:content}'})","match":"Ti.UI.WebView.evalJS","display":"(Method)\t\tTi.UI.WebView.evalJS\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.WebView.fireEvent","display":"(Method)\t\tTi.UI.WebView.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.goBack","display":"(Method)\t\tTi.UI.WebView.goBack\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.goForward","display":"(Method)\t\tTi.UI.WebView.goForward\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.hide","display":"(Method)\t\tTi.UI.WebView.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.reload","display":"(Method)\t\tTi.UI.WebView.reload\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.WebView.remove","display":"(Method)\t\tTi.UI.WebView.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.WebView.removeEventListener","display":"(Method)\t\tTi.UI.WebView.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.repaint","display":"(Method)\t\tTi.UI.WebView.repaint\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>set the basic authentication for the webview instance to be used on subsequent url requests</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.setBasicAuthentication</u></b><i>:void()</i><br>(\n\t\t<span><b>username</b><i>:string</i></span>\n\t\t<span class='info'>the username</span>\n\t\t<span><b>password</b><i>:string</i></span>\n\t\t<span class='info'>the password</span>\n)\n</code>","insert":"(${1:'${2:username}', '${0:password}'})","match":"Ti.UI.WebView.setBasicAuthentication","display":"(Method)\t\tTi.UI.WebView.setBasicAuthentication\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.show","display":"(Method)\t\tTi.UI.WebView.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.WebView.stopLoading","display":"(Method)\t\tTi.UI.WebView.stopLoading\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.WebView.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.WebView.toImage","display":"(Method)\t\tTi.UI.WebView.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.WebView.anchorPoint","display":"(Property)\tTi.UI.WebView.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.WebView.animatedCenterPoint","display":"(Property)\tTi.UI.WebView.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the background color for the webview</p>","insert":"$0","match":"Ti.UI.WebView.backgroundColor","display":"(Property)\tTi.UI.WebView.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.WebView.backgroundGradient","display":"(Property)\tTi.UI.WebView.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.WebView.backgroundImage","display":"(Property)\tTi.UI.WebView.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.WebView.backgroundLeftCap","display":"(Property)\tTi.UI.WebView.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.WebView.backgroundTopCap","display":"(Property)\tTi.UI.WebView.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.WebView.borderColor","display":"(Property)\tTi.UI.WebView.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.WebView.borderRadius","display":"(Property)\tTi.UI.WebView.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.WebView.borderWidth","display":"(Property)\tTi.UI.WebView.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.WebView.bottom","display":"(Property)\tTi.UI.WebView.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.WebView.center","display":"(Property)\tTi.UI.WebView.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>a data blob or file that is used to load the web document</p>","insert":"$0","match":"Ti.UI.WebView.data","display":"(Property)\tTi.UI.WebView.data\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.WebView.height","display":"(Property)\tTi.UI.WebView.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the html content of the web document</p>","insert":"$0","match":"Ti.UI.WebView.html","display":"(Property)\tTi.UI.WebView.html\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.WebView.left","display":"(Property)\tTi.UI.WebView.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicating if the webview is loading content</p>","insert":"$0","match":"Ti.UI.WebView.loading","display":"(Property)\tTi.UI.WebView.loading\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.WebView.opacity","display":"(Property)\tTi.UI.WebView.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.WebView.right","display":"(Property)\tTi.UI.WebView.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>whether the webview should scale it's contents or not</p>","insert":"$0","match":"Ti.UI.WebView.scalesPageToFit","display":"(Property)\tTi.UI.WebView.scalesPageToFit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.WebView.size","display":"(Property)\tTi.UI.WebView.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.WebView.top","display":"(Property)\tTi.UI.WebView.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.WebView.touchEnabled","display":"(Property)\tTi.UI.WebView.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.WebView.transform","display":"(Property)\tTi.UI.WebView.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)</p>","insert":"$0","match":"Ti.UI.WebView.url","display":"(Property)\tTi.UI.WebView.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.WebView.visible","display":"(Property)\tTi.UI.WebView.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.WebView.width","display":"(Property)\tTi.UI.WebView.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.WebView.zIndex","display":"(Property)\tTi.UI.WebView.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Window is an empty drawing surface or container. The Window is created by the method <a href=\"Titanium.UI.createWindow.html\">Titanium.UI.createWindow</a>. Unlike <a href=\"Titanium.UI.View-object\">Views</a>, Windows can be opened and closed and can have special display properties such as <tt>fullscreen</tt> or <tt>modal</tt>.</p><hr /><h3 id=\"sub-contexts\">Sub-contexts</h3>\n<p>Windows can be loaded from another Javascript file by specifying the property <tt>url</tt> and reference a file relative to your application <tt>Resources</tt> folder.  It's important to note that Titanium will refuse to load Javascript files from a remote URL. Loading remote Javascript from a URL and providing it with the full capabilities of the Titanium API would be very dangerous. </p>\n<p>When you Window is loaded from a separate Javascript file, the code will be executed in a separate Javascript context (called a \"sub-context\") than your <tt>app.js</tt> global context.  It will also execute in its own separate thread.<br>\n</p>\n<p>The special property <a href=\"Titanium.UI.currentWindow.html\">Titanium.UI.currentWindow</a> is available inside a sub-context that points to the Javascript instance by reference in the global context.<br>\n</p>\n<h3 id=\"passing_data\">Passing Data</h3>\n<p>By default, sub-context variables cannot access Javascript references in the global context.  However, the global context can allow its sub-contexts the ability to have access to properties and functions in the global context by reference assignment.  An example best illustrates how to do this.</p>\n<p>In <tt>app.js</tt>, you could define a function and a property.</p>\n<pre><code>var a = 1;\nfunction b()\n{\n    return \"hello\";\n}\n</code></pre>\n\n<p>Now, you can create a new Window - let's call it <tt>foo.js</tt> - in your <tt>app.js</tt>.</p>\n<pre><code>var w = Titanium.UI.createWindow({\n    url:'foo.js'\n});\n</code></pre>\n\n<p>To <em>give</em> your new window access to both <tt>a</tt> and <tt>b</tt>, you would need to assign them to the new window reference <tt>w</tt>.</p>\n<pre><code>w.a = a;\nw.b = b;\n</code></pre>\n\n<p>Of course, you could give them a different name than their original names.  However, what name you give them in your <tt>app.js</tt> is how you will reference them in <tt>foo.js</tt>.  Now, let's look at the code for <tt>foo.js</tt>.</p>\n<pre><code>alert(\"b() = \"+Titanium.UI.currentWindow.b());\n</code></pre>\n\n<p>In the above code, the <tt>foo.js</tt> will execute the function <tt>b</tt> in the global context and return the result.  Since <tt>b</tt> is a reference (vs. a copy by value), any changes made to these Javascript references will be immediately available in all sub-contexts.</p>\n<h3 id=\"events\">Events</h3>\n<p>If you'd like to send events to a window from the global context and vice versa, you could use the built-in event mechanism.  For example, you could define a custom event called <tt>foo</tt>. The window could listen for this event and then respond with some action.  For example, in your sub-context you might define:</p>\n<pre><code>Titanium.UI.currentWindow.addEventListener('foo',function(e)\n{\n    Titanium.API.info(\"foo event received = \"+JSON.stringify(e));\n});\n</code></pre>\n\n<p>You could now fire the event from <tt>app.js</tt> like this:</p>\n<pre><code>var window = Titanium.UI.createWindow({\n    url:'bar.js'\n});\nwindow.open();\nwindow.fireEvent('foo',{a:'b'});\n</code></pre>\n\n<p>It's worth noting two important limitations of the example above:</p>\n<ul>\n<li>You must open the event before you can send events to it. You also may have to fire the event after a specified amount of time if you intend to immediately send data to the window.  This is because windows are opened asynchronously and on a separate thread than the caller thread.</li>\n<li>You can only send JSON-serializable data in a fireEvent.  If you attempt to send objects that have function references, they will be null.</li>\n</ul>\n<h3 id=\"animations\">Animations</h3>\n<p>Windows can be animated like any normal <a href=\"Titanium.UI.View\">View</a>.  To transition between 2 windows, you can use the <tt>transition</tt> property on an animation.  For example, to flip right-to-left between two windows, you could do the following:</p>\n<pre><code>var window2 = Titanium.UI.createWindow({url:'foo.js'});\nvar t = Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT;\nwindow1.animate({view:window2,transition:t});\n</code></pre>\n\n<p>In the above example, the <tt>window2</tt> view will be animated from the right-to-left over <tt>window1</tt>.</p>\n<p>Windows can be opened or closed with animation.  In the example below, we create a window that will open from small to large with a bounce effect.  This is done by applying a transformation at initialization time that scales the original size of the window to 0.  When the window is opened, a new 2D transformation is applied that will scale the window size from 0 to 110% of it's original size and then, after 1/20th of a second, will scale it back to it's original size at 100%. This gives the bounce effect during animation. </p>\n<pre><code>var t = Titanium.UI.create2DMatrix().scale(0);\n\n// create a window with the initial transform scaled to 0\nvar w = Titanium.UI.createWindow({\n    backgroundColor:'#336699',\n    borderWidth:8,\n    borderColor:'#999',\n    height:400,\n    width:300,\n    borderRadius:10,\n    opacity:0.92,\n    transform:t\n});\n\n// create first transform to go beyond normal size\nvar t1 = Titanium.UI.create2DMatrix().scale(1.1);\n\nvar a = Titanium.UI.createAnimation();\na.transform = t1;\na.duration = 200;\n\n// when this animation completes, scale to normal size\na.addEventListener('complete', function()\n{\n    // we can use the identity transform to take it back to it's real size\n    var t2 = Titanium.UI.create2DMatrix();\n    w.animate({transform:t2, duration:200});\n});\n</code></pre>\n\n<h3 id=\"ipad_modal_windows\">iPad Modal Windows</h3>\n<p>For iPad, iPhone SDK 3.2 and Titanium 1.2 introduced several new ways of presenting modal windows.<br>\n</p>\n<p>The example below is a modal window.</p>\n<p><img alt=\"modal\" src=\"http://img.skitch.com/20100406-bqb3f8pb6e4ger7wkcdcw5mbar.png\"></p>\n<p>You can create this type of modal window on iPad with the following code snippet:</p>\n<pre><code>var window = Titanium.UI.createWindow();\nwindow.open({\n    modal:true,\n    modalTransitionStyle: Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,\n    modalStyle: Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET\n})\n</code></pre>","insert":"$0","match":"Titanium.UI.Window","display":"(Namespace)\tTitanium.UI.Window","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Window.add","display":"(Method)\t\tTitanium.UI.Window.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Window.addEventListener","display":"(Method)\t\tTitanium.UI.Window.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Window.animate","display":"(Method)\t\tTitanium.UI.Window.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>close the window</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.close</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>close the window with optional animation or display properties</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Window.close","display":"(Method)\t\tTitanium.UI.Window.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.Window.fireEvent","display":"(Method)\t\tTitanium.UI.Window.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Window.hide","display":"(Method)\t\tTitanium.UI.Window.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the window</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.open</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>open the window with optional animation or display properties</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Window.open","display":"(Method)\t\tTitanium.UI.Window.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.Window.remove","display":"(Method)\t\tTitanium.UI.Window.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.Window.removeEventListener","display":"(Method)\t\tTitanium.UI.Window.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.Window.show","display":"(Method)\t\tTitanium.UI.Window.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.Window.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.Window.toImage","display":"(Method)\t\tTitanium.UI.Window.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.Window.anchorPoint","display":"(Property)\tTitanium.UI.Window.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.Window.animatedCenterPoint","display":"(Property)\tTitanium.UI.Window.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Titanium.UI.Window.backButtonTitle","display":"(Property)\tTitanium.UI.Window.backButtonTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Titanium.UI.Window.backButtonTitleImage","display":"(Property)\tTitanium.UI.Window.backButtonTitleImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.Window.backgroundColor","display":"(Property)\tTitanium.UI.Window.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.Window.backgroundGradient","display":"(Property)\tTitanium.UI.Window.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.Window.backgroundImage","display":"(Property)\tTitanium.UI.Window.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.Window.backgroundLeftCap","display":"(Property)\tTitanium.UI.Window.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.Window.backgroundTopCap","display":"(Property)\tTitanium.UI.Window.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>web named color or hex value for the color of the nav bar. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.barColor","display":"(Property)\tTitanium.UI.Window.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.Window.borderColor","display":"(Property)\tTitanium.UI.Window.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.Window.borderRadius","display":"(Property)\tTitanium.UI.Window.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.Window.borderWidth","display":"(Property)\tTitanium.UI.Window.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Window.bottom","display":"(Property)\tTitanium.UI.Window.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.Window.center","display":"(Property)\tTitanium.UI.Window.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicates if the window is fullscreen (no device chrome)</p>","insert":"$0","match":"Titanium.UI.Window.fullscreen","display":"(Property)\tTitanium.UI.Window.fullscreen\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.Window.height","display":"(Property)\tTitanium.UI.Window.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Window.left","display":"(Property)\tTitanium.UI.Window.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view to show in the left nav bar area. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.leftNavButton","display":"(Property)\tTitanium.UI.Window.leftNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the window should be opened modal in front of other windows</p>","insert":"$0","match":"Titanium.UI.Window.modal","display":"(Property)\tTitanium.UI.Window.modal\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>for modal windows, hide the nav bar (true) or show the nav bar (false, default).</p>","insert":"$0","match":"Titanium.UI.Window.navBarHidden","display":"(Property)\tTitanium.UI.Window.navBarHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.Window.opacity","display":"(Property)\tTitanium.UI.Window.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of orientation mode constants defined in [Titanium.UI]</p>","insert":"$0","match":"Titanium.UI.Window.orientationModes","display":"(Property)\tTitanium.UI.Window.orientationModes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Window.right","display":"(Property)\tTitanium.UI.Window.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view to show in the right nav bar area. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.rightNavButton","display":"(Property)\tTitanium.UI.Window.rightNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.Window.size","display":"(Property)\tTitanium.UI.Window.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Titanium.UI.Window.tabBarHidden","display":"(Property)\tTitanium.UI.Window.tabBarHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>title of the window.</p>","insert":"$0","match":"Titanium.UI.Window.title","display":"(Property)\tTitanium.UI.Window.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view to show in the title area. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.titleControl","display":"(Property)\tTitanium.UI.Window.titleControl\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a image that show in the title area. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.titleImage","display":"(Property)\tTitanium.UI.Window.titleImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>title prompt for the window. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.titlePrompt","display":"(Property)\tTitanium.UI.Window.titlePrompt\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Titanium.UI.Window.toolbar","display":"(Property)\tTitanium.UI.Window.toolbar\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Window.top","display":"(Property)\tTitanium.UI.Window.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.Window.touchEnabled","display":"(Property)\tTitanium.UI.Window.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.Window.transform","display":"(Property)\tTitanium.UI.Window.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the nav bar is translucent. only available in iPhone.</p>","insert":"$0","match":"Titanium.UI.Window.translucent","display":"(Property)\tTitanium.UI.Window.translucent\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.</p>","insert":"$0","match":"Titanium.UI.Window.url","display":"(Property)\tTitanium.UI.Window.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.Window.visible","display":"(Property)\tTitanium.UI.Window.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.Window.width","display":"(Property)\tTitanium.UI.Window.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.Window.zIndex","display":"(Property)\tTitanium.UI.Window.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The Window is an empty drawing surface or container. The Window is created by the method <a href=\"Titanium.UI.createWindow.html\">Titanium.UI.createWindow</a>. Unlike <a href=\"Titanium.UI.View-object\">Views</a>, Windows can be opened and closed and can have special display properties such as <tt>fullscreen</tt> or <tt>modal</tt>.</p><hr /><h3 id=\"sub-contexts\">Sub-contexts</h3>\n<p>Windows can be loaded from another Javascript file by specifying the property <tt>url</tt> and reference a file relative to your application <tt>Resources</tt> folder.  It's important to note that Titanium will refuse to load Javascript files from a remote URL. Loading remote Javascript from a URL and providing it with the full capabilities of the Titanium API would be very dangerous. </p>\n<p>When you Window is loaded from a separate Javascript file, the code will be executed in a separate Javascript context (called a \"sub-context\") than your <tt>app.js</tt> global context.  It will also execute in its own separate thread.<br>\n</p>\n<p>The special property <a href=\"Titanium.UI.currentWindow.html\">Titanium.UI.currentWindow</a> is available inside a sub-context that points to the Javascript instance by reference in the global context.<br>\n</p>\n<h3 id=\"passing_data\">Passing Data</h3>\n<p>By default, sub-context variables cannot access Javascript references in the global context.  However, the global context can allow its sub-contexts the ability to have access to properties and functions in the global context by reference assignment.  An example best illustrates how to do this.</p>\n<p>In <tt>app.js</tt>, you could define a function and a property.</p>\n<pre><code>var a = 1;\nfunction b()\n{\n    return \"hello\";\n}\n</code></pre>\n\n<p>Now, you can create a new Window - let's call it <tt>foo.js</tt> - in your <tt>app.js</tt>.</p>\n<pre><code>var w = Titanium.UI.createWindow({\n    url:'foo.js'\n});\n</code></pre>\n\n<p>To <em>give</em> your new window access to both <tt>a</tt> and <tt>b</tt>, you would need to assign them to the new window reference <tt>w</tt>.</p>\n<pre><code>w.a = a;\nw.b = b;\n</code></pre>\n\n<p>Of course, you could give them a different name than their original names.  However, what name you give them in your <tt>app.js</tt> is how you will reference them in <tt>foo.js</tt>.  Now, let's look at the code for <tt>foo.js</tt>.</p>\n<pre><code>alert(\"b() = \"+Titanium.UI.currentWindow.b());\n</code></pre>\n\n<p>In the above code, the <tt>foo.js</tt> will execute the function <tt>b</tt> in the global context and return the result.  Since <tt>b</tt> is a reference (vs. a copy by value), any changes made to these Javascript references will be immediately available in all sub-contexts.</p>\n<h3 id=\"events\">Events</h3>\n<p>If you'd like to send events to a window from the global context and vice versa, you could use the built-in event mechanism.  For example, you could define a custom event called <tt>foo</tt>. The window could listen for this event and then respond with some action.  For example, in your sub-context you might define:</p>\n<pre><code>Titanium.UI.currentWindow.addEventListener('foo',function(e)\n{\n    Titanium.API.info(\"foo event received = \"+JSON.stringify(e));\n});\n</code></pre>\n\n<p>You could now fire the event from <tt>app.js</tt> like this:</p>\n<pre><code>var window = Titanium.UI.createWindow({\n    url:'bar.js'\n});\nwindow.open();\nwindow.fireEvent('foo',{a:'b'});\n</code></pre>\n\n<p>It's worth noting two important limitations of the example above:</p>\n<ul>\n<li>You must open the event before you can send events to it. You also may have to fire the event after a specified amount of time if you intend to immediately send data to the window.  This is because windows are opened asynchronously and on a separate thread than the caller thread.</li>\n<li>You can only send JSON-serializable data in a fireEvent.  If you attempt to send objects that have function references, they will be null.</li>\n</ul>\n<h3 id=\"animations\">Animations</h3>\n<p>Windows can be animated like any normal <a href=\"Titanium.UI.View\">View</a>.  To transition between 2 windows, you can use the <tt>transition</tt> property on an animation.  For example, to flip right-to-left between two windows, you could do the following:</p>\n<pre><code>var window2 = Titanium.UI.createWindow({url:'foo.js'});\nvar t = Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT;\nwindow1.animate({view:window2,transition:t});\n</code></pre>\n\n<p>In the above example, the <tt>window2</tt> view will be animated from the right-to-left over <tt>window1</tt>.</p>\n<p>Windows can be opened or closed with animation.  In the example below, we create a window that will open from small to large with a bounce effect.  This is done by applying a transformation at initialization time that scales the original size of the window to 0.  When the window is opened, a new 2D transformation is applied that will scale the window size from 0 to 110% of it's original size and then, after 1/20th of a second, will scale it back to it's original size at 100%. This gives the bounce effect during animation. </p>\n<pre><code>var t = Titanium.UI.create2DMatrix().scale(0);\n\n// create a window with the initial transform scaled to 0\nvar w = Titanium.UI.createWindow({\n    backgroundColor:'#336699',\n    borderWidth:8,\n    borderColor:'#999',\n    height:400,\n    width:300,\n    borderRadius:10,\n    opacity:0.92,\n    transform:t\n});\n\n// create first transform to go beyond normal size\nvar t1 = Titanium.UI.create2DMatrix().scale(1.1);\n\nvar a = Titanium.UI.createAnimation();\na.transform = t1;\na.duration = 200;\n\n// when this animation completes, scale to normal size\na.addEventListener('complete', function()\n{\n    // we can use the identity transform to take it back to it's real size\n    var t2 = Titanium.UI.create2DMatrix();\n    w.animate({transform:t2, duration:200});\n});\n</code></pre>\n\n<h3 id=\"ipad_modal_windows\">iPad Modal Windows</h3>\n<p>For iPad, iPhone SDK 3.2 and Titanium 1.2 introduced several new ways of presenting modal windows.<br>\n</p>\n<p>The example below is a modal window.</p>\n<p><img alt=\"modal\" src=\"http://img.skitch.com/20100406-bqb3f8pb6e4ger7wkcdcw5mbar.png\"></p>\n<p>You can create this type of modal window on iPad with the following code snippet:</p>\n<pre><code>var window = Titanium.UI.createWindow();\nwindow.open({\n    modal:true,\n    modalTransitionStyle: Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,\n    modalStyle: Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET\n})\n</code></pre>","insert":"$0","match":"Ti.UI.Window","display":"(Namespace)\tTi.UI.Window","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Window.add","display":"(Method)\t\tTi.UI.Window.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Window.addEventListener","display":"(Method)\t\tTi.UI.Window.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Window.animate","display":"(Method)\t\tTi.UI.Window.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>close the window</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.close</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>close the window with optional animation or display properties</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Window.close","display":"(Method)\t\tTi.UI.Window.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.Window.fireEvent","display":"(Method)\t\tTi.UI.Window.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Window.hide","display":"(Method)\t\tTi.UI.Window.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open the window</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.open</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>open the window with optional animation or display properties</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Window.open","display":"(Method)\t\tTi.UI.Window.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.Window.remove","display":"(Method)\t\tTi.UI.Window.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.Window.removeEventListener","display":"(Method)\t\tTi.UI.Window.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.Window.show","display":"(Method)\t\tTi.UI.Window.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.Window.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.Window.toImage","display":"(Method)\t\tTi.UI.Window.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.Window.anchorPoint","display":"(Property)\tTi.UI.Window.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.Window.animatedCenterPoint","display":"(Property)\tTi.UI.Window.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Ti.UI.Window.backButtonTitle","display":"(Property)\tTi.UI.Window.backButtonTitle\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Ti.UI.Window.backButtonTitleImage","display":"(Property)\tTi.UI.Window.backButtonTitleImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.Window.backgroundColor","display":"(Property)\tTi.UI.Window.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.Window.backgroundGradient","display":"(Property)\tTi.UI.Window.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.Window.backgroundImage","display":"(Property)\tTi.UI.Window.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.Window.backgroundLeftCap","display":"(Property)\tTi.UI.Window.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.Window.backgroundTopCap","display":"(Property)\tTi.UI.Window.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>web named color or hex value for the color of the nav bar. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.barColor","display":"(Property)\tTi.UI.Window.barColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.Window.borderColor","display":"(Property)\tTi.UI.Window.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.Window.borderRadius","display":"(Property)\tTi.UI.Window.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.Window.borderWidth","display":"(Property)\tTi.UI.Window.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Window.bottom","display":"(Property)\tTi.UI.Window.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.Window.center","display":"(Property)\tTi.UI.Window.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean indicates if the window is fullscreen (no device chrome)</p>","insert":"$0","match":"Ti.UI.Window.fullscreen","display":"(Property)\tTi.UI.Window.fullscreen\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.Window.height","display":"(Property)\tTi.UI.Window.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Window.left","display":"(Property)\tTi.UI.Window.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view to show in the left nav bar area. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.leftNavButton","display":"(Property)\tTi.UI.Window.leftNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the window should be opened modal in front of other windows</p>","insert":"$0","match":"Ti.UI.Window.modal","display":"(Property)\tTi.UI.Window.modal\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>for modal windows, hide the nav bar (true) or show the nav bar (false, default).</p>","insert":"$0","match":"Ti.UI.Window.navBarHidden","display":"(Property)\tTi.UI.Window.navBarHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.Window.opacity","display":"(Property)\tTi.UI.Window.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of orientation mode constants defined in [Titanium.UI]</p>","insert":"$0","match":"Ti.UI.Window.orientationModes","display":"(Property)\tTi.UI.Window.orientationModes\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Window.right","display":"(Property)\tTi.UI.Window.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view to show in the right nav bar area. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.rightNavButton","display":"(Property)\tTi.UI.Window.rightNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.Window.size","display":"(Property)\tTi.UI.Window.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Ti.UI.Window.tabBarHidden","display":"(Property)\tTi.UI.Window.tabBarHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>title of the window.</p>","insert":"$0","match":"Ti.UI.Window.title","display":"(Property)\tTi.UI.Window.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view to show in the title area. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.titleControl","display":"(Property)\tTi.UI.Window.titleControl\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a image that show in the title area. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.titleImage","display":"(Property)\tTi.UI.Window.titleImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>title prompt for the window. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.titlePrompt","display":"(Property)\tTi.UI.Window.titlePrompt\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.</p>","insert":"$0","match":"Ti.UI.Window.toolbar","display":"(Property)\tTi.UI.Window.toolbar\t:array","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.Window.top","display":"(Property)\tTi.UI.Window.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.Window.touchEnabled","display":"(Property)\tTi.UI.Window.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.Window.transform","display":"(Property)\tTi.UI.Window.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the nav bar is translucent. only available in iPhone.</p>","insert":"$0","match":"Ti.UI.Window.translucent","display":"(Property)\tTi.UI.Window.translucent\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.</p>","insert":"$0","match":"Ti.UI.Window.url","display":"(Property)\tTi.UI.Window.url\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.Window.visible","display":"(Property)\tTi.UI.Window.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.Window.width","display":"(Property)\tTi.UI.Window.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.Window.zIndex","display":"(Property)\tTi.UI.Window.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The iPad specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iPad related devices.  To develop for iPad, you will need the Apple iPhone SDK 3.2 or later and Titanium Mobile SDK 1.2 or later. </p>\n<p>For iPad UI programming guidelines, please review the <a href=\"http://developer.apple.com/iphone/library/documentation/General/Conceptual/iPadHIG/Introduction/Introduction.html\">iPad Human Interface Guidelines</a>. </p><hr /><h3 id=\"custom_fonts\">Custom Fonts</h3>\n<p>The iPad supports the ability to embed your own fonts in your iPad application. To add your own fonts, you should add the </p>","insert":"$0","match":"Titanium.UI.iPad","display":"(Namespace)\tTitanium.UI.iPad","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.addEventListener","display":"(Method)\t\tTitanium.UI.iPad.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.iPad.Popover.html\">Titanium.UI.iPad.Popover</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.createPopover</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>arrowDirection</b><i>:int</i></span>\n\t\t<span class='info'>return the arrow direction of the popover</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>height of the popover</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftNavButton</b><i>:object</i></span>\n\t\t<span class='info'>the left button in the nav area of the popover</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightNavButton</b><i>:object</i></span>\n\t\t<span class='info'>the right button in the nav area of the popover</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the nav area of the popover</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the popover is visible</p></span>\n\t<span><b>width</b><i>:float</i></span>\n\t\t<span class='info'>width of the popover</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.createPopover","display":"(Method)\t\tTitanium.UI.iPad.createPopover\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.iPad.SplitWindow.html\">Titanium.UI.iPad.SplitWindow</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.createSplitWindow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>detailView</b><i>:object</i></span>\n\t\t<span class='info'>view for the detail view section of the SplitWindow</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>masterView</b><i>:object</i></span>\n\t\t<span class='info'>view for the master view section of the SplitWindow</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.createSplitWindow","display":"(Method)\t\tTitanium.UI.iPad.createSplitWindow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.iPad.fireEvent","display":"(Method)\t\tTitanium.UI.iPad.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.removeEventListener","display":"(Method)\t\tTitanium.UI.iPad.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points in any direction.</p>","insert":"$0","match":"Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_ANY","display":"(Property)\tTitanium.UI.iPad.POPOVER_ARROW_DIRECTION_ANY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points downward.</p>","insert":"$0","match":"Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN","display":"(Property)\tTitanium.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points toward the left.</p>","insert":"$0","match":"Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT","display":"(Property)\tTitanium.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points toward the right.</p>","insert":"$0","match":"Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT","display":"(Property)\tTitanium.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The status of the arrow is currently unknown.</p>","insert":"$0","match":"Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_UNKNOWN","display":"(Property)\tTitanium.UI.iPad.POPOVER_ARROW_DIRECTION_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points upward.</p>","insert":"$0","match":"Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_UP","display":"(Property)\tTitanium.UI.iPad.POPOVER_ARROW_DIRECTION_UP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The iPad specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iPad related devices.  To develop for iPad, you will need the Apple iPhone SDK 3.2 or later and Titanium Mobile SDK 1.2 or later. </p>\n<p>For iPad UI programming guidelines, please review the <a href=\"http://developer.apple.com/iphone/library/documentation/General/Conceptual/iPadHIG/Introduction/Introduction.html\">iPad Human Interface Guidelines</a>. </p><hr /><h3 id=\"custom_fonts\">Custom Fonts</h3>\n<p>The iPad supports the ability to embed your own fonts in your iPad application. To add your own fonts, you should add the </p>","insert":"$0","match":"Ti.UI.iPad","display":"(Namespace)\tTi.UI.iPad","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.addEventListener","display":"(Method)\t\tTi.UI.iPad.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.iPad.Popover.html\">Titanium.UI.iPad.Popover</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.createPopover</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>arrowDirection</b><i>:int</i></span>\n\t\t<span class='info'>return the arrow direction of the popover</p></span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float</i></span>\n\t\t<span class='info'>height of the popover</p></span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>leftNavButton</b><i>:object</i></span>\n\t\t<span class='info'>the left button in the nav area of the popover</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>rightNavButton</b><i>:object</i></span>\n\t\t<span class='info'>the right button in the nav area of the popover</p></span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>title</b><i>:string</i></span>\n\t\t<span class='info'>the title of the nav area of the popover</p></span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the popover is visible</p></span>\n\t<span><b>width</b><i>:float</i></span>\n\t\t<span class='info'>width of the popover</p></span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.createPopover","display":"(Method)\t\tTi.UI.iPad.createPopover\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.iPad.SplitWindow.html\">Titanium.UI.iPad.SplitWindow</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.createSplitWindow</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>detailView</b><i>:object</i></span>\n\t\t<span class='info'>view for the detail view section of the SplitWindow</p></span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>masterView</b><i>:object</i></span>\n\t\t<span class='info'>view for the master view section of the SplitWindow</p></span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.createSplitWindow","display":"(Method)\t\tTi.UI.iPad.createSplitWindow\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.iPad.fireEvent","display":"(Method)\t\tTi.UI.iPad.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.removeEventListener","display":"(Method)\t\tTi.UI.iPad.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points in any direction.</p>","insert":"$0","match":"Ti.UI.iPad.POPOVER_ARROW_DIRECTION_ANY","display":"(Property)\tTi.UI.iPad.POPOVER_ARROW_DIRECTION_ANY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points downward.</p>","insert":"$0","match":"Ti.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN","display":"(Property)\tTi.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points toward the left.</p>","insert":"$0","match":"Ti.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT","display":"(Property)\tTi.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points toward the right.</p>","insert":"$0","match":"Ti.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT","display":"(Property)\tTi.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The status of the arrow is currently unknown.</p>","insert":"$0","match":"Ti.UI.iPad.POPOVER_ARROW_DIRECTION_UNKNOWN","display":"(Property)\tTi.UI.iPad.POPOVER_ARROW_DIRECTION_UNKNOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>An arrow that points upward.</p>","insert":"$0","match":"Ti.UI.iPad.POPOVER_ARROW_DIRECTION_UP","display":"(Property)\tTi.UI.iPad.POPOVER_ARROW_DIRECTION_UP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Popover is used to manage the presentation of content in a popover. You use popovers to present information temporarily but in a way that does not take over the entire screen like a modal view does. The popover content is layered on top of your existing content in a special type of window. The popover remains visible until the user taps outside of the popover window or you explicitly dismiss it. The Popover is created by the method <a href=\"Titanium.UI.iPad.createPopover-method.html\">Titanium.UI.iPad.createPopover</a>.</p>\n<p><img alt=\"popover\" src=\"http://img.skitch.com/20100406-pmssjk1a3a65s6ui8qnbqi59c4.png\"></p><hr />","insert":"$0","match":"Titanium.UI.iPad.Popover","display":"(Namespace)\tTitanium.UI.iPad.Popover","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.Popover.add","display":"(Method)\t\tTitanium.UI.iPad.Popover.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.Popover.addEventListener","display":"(Method)\t\tTitanium.UI.iPad.Popover.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.Popover.animate","display":"(Method)\t\tTitanium.UI.iPad.Popover.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.iPad.Popover.fireEvent","display":"(Method)\t\tTitanium.UI.iPad.Popover.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>hide the popover</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.hide</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>dictionary with optional boolean property animated</tt> which indicates if the popover should be hidden with animation (defaults to true) or not</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.Popover.hide","display":"(Method)\t\tTitanium.UI.iPad.Popover.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.Popover.remove","display":"(Method)\t\tTitanium.UI.iPad.Popover.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.Popover.removeEventListener","display":"(Method)\t\tTitanium.UI.iPad.Popover.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change the height of the popover</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.setHeight</u></b><i>:void()</i><br>(\n\t\t<span><b>height</b><i>:int,string</i></span>\n\t\t<span class='info'>height of the popover</span>\n)\n</code>","insert":"(${1:${2:height}})","match":"Titanium.UI.iPad.Popover.setHeight","display":"(Method)\t\tTitanium.UI.iPad.Popover.setHeight\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change the width of the popover</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.setWidth</u></b><i>:void()</i><br>(\n\t\t<span><b>width</b><i>:int,string</i></span>\n\t\t<span class='info'>width of the popover</span>\n)\n</code>","insert":"(${1:${2:width}})","match":"Titanium.UI.iPad.Popover.setWidth","display":"(Method)\t\tTitanium.UI.iPad.Popover.setWidth\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>show the popover</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.show</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>dictionary of the following properties: rect</tt>, <tt>animated</tt> and <tt>view</tt>. The <tt>view</tt> property should specify the view relative to where the popover should display.  <tt>animated</tt> is a boolean indicating if the showing of the popover should be animated, defaults to true. The property <tt>rect</tt> is a dictionary with the following properties: <tt>x</tt>, <tt>y</tt>, <tt>width</tt> and <tt>height</tt>, where the rectangle in <tt>view</tt> at which to anchor the popover.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.Popover.show","display":"(Method)\t\tTitanium.UI.iPad.Popover.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.Popover.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.iPad.Popover.toImage","display":"(Method)\t\tTitanium.UI.iPad.Popover.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.iPad.Popover.anchorPoint","display":"(Property)\tTitanium.UI.iPad.Popover.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.iPad.Popover.animatedCenterPoint","display":"(Property)\tTitanium.UI.iPad.Popover.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the arrow direction of the popover</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.arrowDirection","display":"(Property)\tTitanium.UI.iPad.Popover.arrowDirection\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.iPad.Popover.backgroundColor","display":"(Property)\tTitanium.UI.iPad.Popover.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.iPad.Popover.backgroundGradient","display":"(Property)\tTitanium.UI.iPad.Popover.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.iPad.Popover.backgroundImage","display":"(Property)\tTitanium.UI.iPad.Popover.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.iPad.Popover.backgroundLeftCap","display":"(Property)\tTitanium.UI.iPad.Popover.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.iPad.Popover.backgroundTopCap","display":"(Property)\tTitanium.UI.iPad.Popover.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.iPad.Popover.borderColor","display":"(Property)\tTitanium.UI.iPad.Popover.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.iPad.Popover.borderRadius","display":"(Property)\tTitanium.UI.iPad.Popover.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.iPad.Popover.borderWidth","display":"(Property)\tTitanium.UI.iPad.Popover.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.Popover.bottom","display":"(Property)\tTitanium.UI.iPad.Popover.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.iPad.Popover.center","display":"(Property)\tTitanium.UI.iPad.Popover.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>height of the popover</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.height","display":"(Property)\tTitanium.UI.iPad.Popover.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.Popover.left","display":"(Property)\tTitanium.UI.iPad.Popover.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left button in the nav area of the popover</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.leftNavButton","display":"(Property)\tTitanium.UI.iPad.Popover.leftNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.iPad.Popover.opacity","display":"(Property)\tTitanium.UI.iPad.Popover.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.Popover.right","display":"(Property)\tTitanium.UI.iPad.Popover.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right button in the nav area of the popover</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.rightNavButton","display":"(Property)\tTitanium.UI.iPad.Popover.rightNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.iPad.Popover.size","display":"(Property)\tTitanium.UI.iPad.Popover.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the nav area of the popover</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.title","display":"(Property)\tTitanium.UI.iPad.Popover.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.Popover.top","display":"(Property)\tTitanium.UI.iPad.Popover.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.iPad.Popover.touchEnabled","display":"(Property)\tTitanium.UI.iPad.Popover.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.iPad.Popover.transform","display":"(Property)\tTitanium.UI.iPad.Popover.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the popover is visible</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.visible","display":"(Property)\tTitanium.UI.iPad.Popover.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>width of the popover</p>","insert":"$0","match":"Titanium.UI.iPad.Popover.width","display":"(Property)\tTitanium.UI.iPad.Popover.width\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.iPad.Popover.zIndex","display":"(Property)\tTitanium.UI.iPad.Popover.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Popover is used to manage the presentation of content in a popover. You use popovers to present information temporarily but in a way that does not take over the entire screen like a modal view does. The popover content is layered on top of your existing content in a special type of window. The popover remains visible until the user taps outside of the popover window or you explicitly dismiss it. The Popover is created by the method <a href=\"Titanium.UI.iPad.createPopover-method.html\">Titanium.UI.iPad.createPopover</a>.</p>\n<p><img alt=\"popover\" src=\"http://img.skitch.com/20100406-pmssjk1a3a65s6ui8qnbqi59c4.png\"></p><hr />","insert":"$0","match":"Ti.UI.iPad.Popover","display":"(Namespace)\tTi.UI.iPad.Popover","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.Popover.add","display":"(Method)\t\tTi.UI.iPad.Popover.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.Popover.addEventListener","display":"(Method)\t\tTi.UI.iPad.Popover.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.Popover.animate","display":"(Method)\t\tTi.UI.iPad.Popover.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.iPad.Popover.fireEvent","display":"(Method)\t\tTi.UI.iPad.Popover.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>hide the popover</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.hide</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>dictionary with optional boolean property animated</tt> which indicates if the popover should be hidden with animation (defaults to true) or not</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.Popover.hide","display":"(Method)\t\tTi.UI.iPad.Popover.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.Popover.remove","display":"(Method)\t\tTi.UI.iPad.Popover.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.Popover.removeEventListener","display":"(Method)\t\tTi.UI.iPad.Popover.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change the height of the popover</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.setHeight</u></b><i>:void()</i><br>(\n\t\t<span><b>height</b><i>:int,string</i></span>\n\t\t<span class='info'>height of the popover</span>\n)\n</code>","insert":"(${1:${2:height}})","match":"Ti.UI.iPad.Popover.setHeight","display":"(Method)\t\tTi.UI.iPad.Popover.setHeight\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>change the width of the popover</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.setWidth</u></b><i>:void()</i><br>(\n\t\t<span><b>width</b><i>:int,string</i></span>\n\t\t<span class='info'>width of the popover</span>\n)\n</code>","insert":"(${1:${2:width}})","match":"Ti.UI.iPad.Popover.setWidth","display":"(Method)\t\tTi.UI.iPad.Popover.setWidth\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>show the popover</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.show</u></b><i>:void()</i><br>(\n\t\t<span><b>options</b><i>:object</i></span>\n\t\t<span class='info'>dictionary of the following properties: rect</tt>, <tt>animated</tt> and <tt>view</tt>. The <tt>view</tt> property should specify the view relative to where the popover should display.  <tt>animated</tt> is a boolean indicating if the showing of the popover should be animated, defaults to true. The property <tt>rect</tt> is a dictionary with the following properties: <tt>x</tt>, <tt>y</tt>, <tt>width</tt> and <tt>height</tt>, where the rectangle in <tt>view</tt> at which to anchor the popover.</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.Popover.show","display":"(Method)\t\tTi.UI.iPad.Popover.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.Popover.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.iPad.Popover.toImage","display":"(Method)\t\tTi.UI.iPad.Popover.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.iPad.Popover.anchorPoint","display":"(Property)\tTi.UI.iPad.Popover.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.iPad.Popover.animatedCenterPoint","display":"(Property)\tTi.UI.iPad.Popover.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>return the arrow direction of the popover</p>","insert":"$0","match":"Ti.UI.iPad.Popover.arrowDirection","display":"(Property)\tTi.UI.iPad.Popover.arrowDirection\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.iPad.Popover.backgroundColor","display":"(Property)\tTi.UI.iPad.Popover.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.iPad.Popover.backgroundGradient","display":"(Property)\tTi.UI.iPad.Popover.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.iPad.Popover.backgroundImage","display":"(Property)\tTi.UI.iPad.Popover.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.iPad.Popover.backgroundLeftCap","display":"(Property)\tTi.UI.iPad.Popover.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.iPad.Popover.backgroundTopCap","display":"(Property)\tTi.UI.iPad.Popover.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.iPad.Popover.borderColor","display":"(Property)\tTi.UI.iPad.Popover.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.iPad.Popover.borderRadius","display":"(Property)\tTi.UI.iPad.Popover.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.iPad.Popover.borderWidth","display":"(Property)\tTi.UI.iPad.Popover.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.Popover.bottom","display":"(Property)\tTi.UI.iPad.Popover.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.iPad.Popover.center","display":"(Property)\tTi.UI.iPad.Popover.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>height of the popover</p>","insert":"$0","match":"Ti.UI.iPad.Popover.height","display":"(Property)\tTi.UI.iPad.Popover.height\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.Popover.left","display":"(Property)\tTi.UI.iPad.Popover.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the left button in the nav area of the popover</p>","insert":"$0","match":"Ti.UI.iPad.Popover.leftNavButton","display":"(Property)\tTi.UI.iPad.Popover.leftNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.iPad.Popover.opacity","display":"(Property)\tTi.UI.iPad.Popover.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.Popover.right","display":"(Property)\tTi.UI.iPad.Popover.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the right button in the nav area of the popover</p>","insert":"$0","match":"Ti.UI.iPad.Popover.rightNavButton","display":"(Property)\tTi.UI.iPad.Popover.rightNavButton\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.iPad.Popover.size","display":"(Property)\tTi.UI.iPad.Popover.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>the title of the nav area of the popover</p>","insert":"$0","match":"Ti.UI.iPad.Popover.title","display":"(Property)\tTi.UI.iPad.Popover.title\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.Popover.top","display":"(Property)\tTi.UI.iPad.Popover.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.iPad.Popover.touchEnabled","display":"(Property)\tTi.UI.iPad.Popover.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.iPad.Popover.transform","display":"(Property)\tTi.UI.iPad.Popover.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>boolean to indicate if the popover is visible</p>","insert":"$0","match":"Ti.UI.iPad.Popover.visible","display":"(Property)\tTi.UI.iPad.Popover.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>width of the popover</p>","insert":"$0","match":"Ti.UI.iPad.Popover.width","display":"(Property)\tTi.UI.iPad.Popover.width\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.iPad.Popover.zIndex","display":"(Property)\tTi.UI.iPad.Popover.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A SplitWindow is a window that manages the presentation of two side-by-side view controllers. You use this class to implement a master-detail interface, in which the left-side view presents a list of items and the right-side presents details of the selected item. The SplitView is for use exclusively on iPad devices. The SplitWindow is created by the method <a href=\"Titanium.UI.iPad.createSplitWindow-method.html\">Titanium.UI.iPad.createSplitWindow</a>.</p>\n<p><img alt=\"splitview\" src=\"http://img.skitch.com/20100406-1f85bm9cx8t768xgsjqax1ng6y.png\"></p><hr /><p>The SplitWindow inherits its methods and properties from <a href=\"Titanium.UI.Window-object.html\">Titanium.UI.Window</a>.</p>\n<p>The <tt>masterView</tt> and <tt>detailView</tt> properties are required in the constructor of the SplitWindow and cannot be changed once set.</p>\n<p>The SplitWindow is a top-level window and cannot be contained within another window or view.<br>\n</p>","insert":"$0","match":"Titanium.UI.iPad.SplitWindow","display":"(Namespace)\tTitanium.UI.iPad.SplitWindow","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.add","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.addEventListener","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.animate","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.fireEvent","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.iPad.SplitWindow.hide","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.remove","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.removeEventListener","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.iPad.SplitWindow.show","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPad.SplitWindow.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.iPad.SplitWindow.toImage","display":"(Method)\t\tTitanium.UI.iPad.SplitWindow.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.anchorPoint","display":"(Property)\tTitanium.UI.iPad.SplitWindow.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.animatedCenterPoint","display":"(Property)\tTitanium.UI.iPad.SplitWindow.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.backgroundColor","display":"(Property)\tTitanium.UI.iPad.SplitWindow.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.backgroundGradient","display":"(Property)\tTitanium.UI.iPad.SplitWindow.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.backgroundImage","display":"(Property)\tTitanium.UI.iPad.SplitWindow.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.backgroundLeftCap","display":"(Property)\tTitanium.UI.iPad.SplitWindow.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.backgroundTopCap","display":"(Property)\tTitanium.UI.iPad.SplitWindow.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.borderColor","display":"(Property)\tTitanium.UI.iPad.SplitWindow.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.borderRadius","display":"(Property)\tTitanium.UI.iPad.SplitWindow.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.borderWidth","display":"(Property)\tTitanium.UI.iPad.SplitWindow.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.bottom","display":"(Property)\tTitanium.UI.iPad.SplitWindow.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.center","display":"(Property)\tTitanium.UI.iPad.SplitWindow.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view for the detail view section of the SplitWindow</p>","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.detailView","display":"(Property)\tTitanium.UI.iPad.SplitWindow.detailView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.height","display":"(Property)\tTitanium.UI.iPad.SplitWindow.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.left","display":"(Property)\tTitanium.UI.iPad.SplitWindow.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view for the master view section of the SplitWindow</p>","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.masterView","display":"(Property)\tTitanium.UI.iPad.SplitWindow.masterView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.opacity","display":"(Property)\tTitanium.UI.iPad.SplitWindow.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.right","display":"(Property)\tTitanium.UI.iPad.SplitWindow.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.size","display":"(Property)\tTitanium.UI.iPad.SplitWindow.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.top","display":"(Property)\tTitanium.UI.iPad.SplitWindow.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.touchEnabled","display":"(Property)\tTitanium.UI.iPad.SplitWindow.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.transform","display":"(Property)\tTitanium.UI.iPad.SplitWindow.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.visible","display":"(Property)\tTitanium.UI.iPad.SplitWindow.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.width","display":"(Property)\tTitanium.UI.iPad.SplitWindow.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.iPad.SplitWindow.zIndex","display":"(Property)\tTitanium.UI.iPad.SplitWindow.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A SplitWindow is a window that manages the presentation of two side-by-side view controllers. You use this class to implement a master-detail interface, in which the left-side view presents a list of items and the right-side presents details of the selected item. The SplitView is for use exclusively on iPad devices. The SplitWindow is created by the method <a href=\"Titanium.UI.iPad.createSplitWindow-method.html\">Titanium.UI.iPad.createSplitWindow</a>.</p>\n<p><img alt=\"splitview\" src=\"http://img.skitch.com/20100406-1f85bm9cx8t768xgsjqax1ng6y.png\"></p><hr /><p>The SplitWindow inherits its methods and properties from <a href=\"Titanium.UI.Window-object.html\">Titanium.UI.Window</a>.</p>\n<p>The <tt>masterView</tt> and <tt>detailView</tt> properties are required in the constructor of the SplitWindow and cannot be changed once set.</p>\n<p>The SplitWindow is a top-level window and cannot be contained within another window or view.<br>\n</p>","insert":"$0","match":"Ti.UI.iPad.SplitWindow","display":"(Namespace)\tTi.UI.iPad.SplitWindow","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.add","display":"(Method)\t\tTi.UI.iPad.SplitWindow.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.addEventListener","display":"(Method)\t\tTi.UI.iPad.SplitWindow.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.animate","display":"(Method)\t\tTi.UI.iPad.SplitWindow.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.fireEvent","display":"(Method)\t\tTi.UI.iPad.SplitWindow.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.iPad.SplitWindow.hide","display":"(Method)\t\tTi.UI.iPad.SplitWindow.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.remove","display":"(Method)\t\tTi.UI.iPad.SplitWindow.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.removeEventListener","display":"(Method)\t\tTi.UI.iPad.SplitWindow.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.iPad.SplitWindow.show","display":"(Method)\t\tTi.UI.iPad.SplitWindow.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPad.SplitWindow.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.iPad.SplitWindow.toImage","display":"(Method)\t\tTi.UI.iPad.SplitWindow.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.iPad.SplitWindow.anchorPoint","display":"(Property)\tTi.UI.iPad.SplitWindow.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.iPad.SplitWindow.animatedCenterPoint","display":"(Property)\tTi.UI.iPad.SplitWindow.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.backgroundColor","display":"(Property)\tTi.UI.iPad.SplitWindow.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.backgroundGradient","display":"(Property)\tTi.UI.iPad.SplitWindow.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.backgroundImage","display":"(Property)\tTi.UI.iPad.SplitWindow.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.iPad.SplitWindow.backgroundLeftCap","display":"(Property)\tTi.UI.iPad.SplitWindow.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.iPad.SplitWindow.backgroundTopCap","display":"(Property)\tTi.UI.iPad.SplitWindow.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.borderColor","display":"(Property)\tTi.UI.iPad.SplitWindow.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.borderRadius","display":"(Property)\tTi.UI.iPad.SplitWindow.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.borderWidth","display":"(Property)\tTi.UI.iPad.SplitWindow.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.bottom","display":"(Property)\tTi.UI.iPad.SplitWindow.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.center","display":"(Property)\tTi.UI.iPad.SplitWindow.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view for the detail view section of the SplitWindow</p>","insert":"$0","match":"Ti.UI.iPad.SplitWindow.detailView","display":"(Property)\tTi.UI.iPad.SplitWindow.detailView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.height","display":"(Property)\tTi.UI.iPad.SplitWindow.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.left","display":"(Property)\tTi.UI.iPad.SplitWindow.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>view for the master view section of the SplitWindow</p>","insert":"$0","match":"Ti.UI.iPad.SplitWindow.masterView","display":"(Property)\tTi.UI.iPad.SplitWindow.masterView\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.iPad.SplitWindow.opacity","display":"(Property)\tTi.UI.iPad.SplitWindow.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.right","display":"(Property)\tTi.UI.iPad.SplitWindow.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.iPad.SplitWindow.size","display":"(Property)\tTi.UI.iPad.SplitWindow.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.top","display":"(Property)\tTi.UI.iPad.SplitWindow.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.iPad.SplitWindow.touchEnabled","display":"(Property)\tTi.UI.iPad.SplitWindow.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.transform","display":"(Property)\tTi.UI.iPad.SplitWindow.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.iPad.SplitWindow.visible","display":"(Property)\tTi.UI.iPad.SplitWindow.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPad.SplitWindow.width","display":"(Property)\tTi.UI.iPad.SplitWindow.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.iPad.SplitWindow.zIndex","display":"(Property)\tTi.UI.iPad.SplitWindow.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The iPhone/iPad specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iPhone or iPad related devices.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone","display":"(Namespace)\tTitanium.UI.iPhone","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPhone.addEventListener","display":"(Method)\t\tTitanium.UI.iPhone.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.iPhone.NavigationGroup.html\">Titanium.UI.iPhone.NavigationGroup</a><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.createNavigationGroup</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPhone.createNavigationGroup","display":"(Method)\t\tTitanium.UI.iPhone.createNavigationGroup\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.iPhone.fireEvent","display":"(Method)\t\tTitanium.UI.iPhone.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>convenience method to hide the status bar</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.hideStatusBar</u></b><i>:void()</i><br>(\n\t\t<span><b>animated</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the action should be animated</span>\n\t\t<span><b>animationStyle</b><i>:int</i></span>\n\t\t<span class='info'>the animation style</span>\n)\n</code>","insert":"(${1:${2:animated}, ${3:animationStyle}})","match":"Titanium.UI.iPhone.hideStatusBar","display":"(Method)\t\tTitanium.UI.iPhone.hideStatusBar\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPhone.removeEventListener","display":"(Method)\t\tTitanium.UI.iPhone.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>convenience method to show the status bar</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.showStatusBar</u></b><i>:void()</i><br>(\n\t\t<span><b>animated</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the action should be animated</span>\n\t\t<span><b>animationStyle</b><i>:int</i></span>\n\t\t<span class='info'>the animation style</span>\n)\n</code>","insert":"(${1:${2:animated}, ${3:animationStyle}})","match":"Titanium.UI.iPhone.showStatusBar","display":"(Method)\t\tTitanium.UI.iPhone.showStatusBar\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The view is presented using the same style as its parent window. This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT","display":"(Property)\tTitanium.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The width and height of the presented window are smaller than those of the screen and the view is centered on the screen. If the device is in a landscape orientation and the keyboard is visible, the position of the view is adjusted upward so that the view remains visible. All uncovered areas are dimmed to prevent the user from interacting with them. This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_PRESENTATION_FORMSHEET","display":"(Property)\tTitanium.UI.iPhone.MODAL_PRESENTATION_FORMSHEET\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The presented window covers the screen. This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN","display":"(Property)\tTitanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The height of the presented window is set to the height of the screen and the view's width is set to the width of the screen in a portrait orientation. Any uncovered areas are dimmed to prevent the user from interacting with them. (In portrait orientations, this option is essentially the same as <a href=\"Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN-property.html\">Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN</a>). This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_PRESENTATION_PAGESHEET","display":"(Property)\tTitanium.UI.iPhone.MODAL_PRESENTATION_PAGESHEET\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, its view slides up from the bottom of the screen. On dismissal, the view slides back down. This is the default transition style. This is currently only available currently on iPhone/iPad.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL","display":"(Property)\tTitanium.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view. This is currently only available currently on iPhone/iPad.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE","display":"(Property)\tTitanium.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view. This is currently only available currently on iPhone/iPad.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL","display":"(Property)\tTitanium.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, one corner of the current view curls up to reveal the modal view underneath. On dismissal, the curled up page unfurls itself back on top of the modal view. A modal view presented using this transition is itself prevented from presenting any additional modal views. This transition style is supported only if the window is presenting a <a href=\"Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN.html\">Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN</a> modal presentation style.  This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL","display":"(Property)\tTitanium.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set the application badge for the application's icon in the springboard</p>","insert":"$0","match":"Titanium.UI.iPhone.appBadge","display":"(Property)\tTitanium.UI.iPhone.appBadge\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>control whether the shake to edit system wide capability is enabled</p>","insert":"$0","match":"Titanium.UI.iPhone.appSupportsShakeToEdit","display":"(Property)\tTitanium.UI.iPhone.appSupportsShakeToEdit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>control the status bar visibility</p>","insert":"$0","match":"Titanium.UI.iPhone.statusBarHidden","display":"(Property)\tTitanium.UI.iPhone.statusBarHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant that controls the status bar color style</p>","insert":"$0","match":"Titanium.UI.iPhone.statusBarStyle","display":"(Property)\tTitanium.UI.iPhone.statusBarStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The iPhone/iPad specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iPhone or iPad related devices.</p><hr />","insert":"$0","match":"Ti.UI.iPhone","display":"(Namespace)\tTi.UI.iPhone","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPhone.addEventListener","display":"(Method)\t\tTi.UI.iPhone.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>create and return an instance of <a href=\"Titanium.UI.iPhone.NavigationGroup.html\">Titanium.UI.iPhone.NavigationGroup</a><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.createNavigationGroup</u></b><i>:object()</i><br>(\n{\n\t<span><b>anchorPoint</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5</span>\n\t<span><b>animatedCenterPoint</b><i>:object</i></span>\n\t\t<span class='info'>read-only object with x and y properties of where the view is during animation</span>\n\t<span><b>backgroundColor</b><i>:string</i></span>\n\t\t<span class='info'>the background color of the view</span>\n\t<span><b>backgroundGradient</b><i>:object</i></span>\n\t\t<span class='info'>a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.</span>\n\t<span><b>backgroundImage</b><i>:string</i></span>\n\t\t<span class='info'>the background image url of the view</span>\n\t<span><b>backgroundLeftCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image</span>\n\t<span><b>backgroundTopCap</b><i>:float</i></span>\n\t\t<span class='info'>End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image</span>\n\t<span><b>borderColor</b><i>:string</i></span>\n\t\t<span class='info'>the border color of the view</span>\n\t<span><b>borderRadius</b><i>:float</i></span>\n\t\t<span class='info'>the border radius of the view</span>\n\t<span><b>borderWidth</b><i>:float</i></span>\n\t\t<span class='info'>the border width of the view</span>\n\t<span><b>bottom</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>center</b><i>:object</i></span>\n\t\t<span class='info'>a dictionary with properties x and y to indicate the center of the views position relative to the parent view</span>\n\t<span><b>height</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view height. can be either float value or a string of the width.</span>\n\t<span><b>left</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>opacity</b><i>:float</i></span>\n\t\t<span class='info'>the opacity from 0.0-1.0</span>\n\t<span><b>right</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>size</b><i>:object</i></span>\n\t\t<span class='info'>the size of the view as a dictionary of width and height properties</span>\n\t<span><b>top</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.</span>\n\t<span><b>touchEnabled</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)</span>\n\t<span><b>transform</b><i>:object</i></span>\n\t\t<span class='info'>the transformation matrix to apply to the view</span>\n\t<span><b>visible</b><i>:boolean</i></span>\n\t\t<span class='info'>a boolean of the visibility of the view</span>\n\t<span><b>width</b><i>:float,string</i></span>\n\t\t<span class='info'>property for the view width. can either be `auto`, a float value or a string of the width.</span>\n\t<span><b>zIndex</b><i>:int</i></span>\n\t\t<span class='info'>the z index position relative to other sibling views</span>\n}\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPhone.createNavigationGroup","display":"(Method)\t\tTi.UI.iPhone.createNavigationGroup\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.iPhone.fireEvent","display":"(Method)\t\tTi.UI.iPhone.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>convenience method to hide the status bar</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.hideStatusBar</u></b><i>:void()</i><br>(\n\t\t<span><b>animated</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the action should be animated</span>\n\t\t<span><b>animationStyle</b><i>:int</i></span>\n\t\t<span class='info'>the animation style</span>\n)\n</code>","insert":"(${1:${2:animated}, ${3:animationStyle}})","match":"Ti.UI.iPhone.hideStatusBar","display":"(Method)\t\tTi.UI.iPhone.hideStatusBar\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPhone.removeEventListener","display":"(Method)\t\tTi.UI.iPhone.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>convenience method to show the status bar</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.showStatusBar</u></b><i>:void()</i><br>(\n\t\t<span><b>animated</b><i>:boolean</i></span>\n\t\t<span class='info'>boolean to indicate if the action should be animated</span>\n\t\t<span><b>animationStyle</b><i>:int</i></span>\n\t\t<span class='info'>the animation style</span>\n)\n</code>","insert":"(${1:${2:animated}, ${3:animationStyle}})","match":"Ti.UI.iPhone.showStatusBar","display":"(Method)\t\tTi.UI.iPhone.showStatusBar\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The view is presented using the same style as its parent window. This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT","display":"(Property)\tTi.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The width and height of the presented window are smaller than those of the screen and the view is centered on the screen. If the device is in a landscape orientation and the keyboard is visible, the position of the view is adjusted upward so that the view remains visible. All uncovered areas are dimmed to prevent the user from interacting with them. This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET","display":"(Property)\tTi.UI.iPhone.MODAL_PRESENTATION_FORMSHEET\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The presented window covers the screen. This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN","display":"(Property)\tTi.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The height of the presented window is set to the height of the screen and the view's width is set to the width of the screen in a portrait orientation. Any uncovered areas are dimmed to prevent the user from interacting with them. (In portrait orientations, this option is essentially the same as <a href=\"Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN-property.html\">Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN</a>). This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_PRESENTATION_PAGESHEET","display":"(Property)\tTi.UI.iPhone.MODAL_PRESENTATION_PAGESHEET\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, its view slides up from the bottom of the screen. On dismissal, the view slides back down. This is the default transition style. This is currently only available currently on iPhone/iPad.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL","display":"(Property)\tTi.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view. This is currently only available currently on iPhone/iPad.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE","display":"(Property)\tTi.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view. This is currently only available currently on iPhone/iPad.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL","display":"(Property)\tTi.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>When the window is presented, one corner of the current view curls up to reveal the modal view underneath. On dismissal, the curled up page unfurls itself back on top of the modal view. A modal view presented using this transition is itself prevented from presenting any additional modal views. This transition style is supported only if the window is presenting a <a href=\"Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN.html\">Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN</a> modal presentation style.  This is currently only available currently on iPhone/iPad and SDK 3.2+.</p>","insert":"$0","match":"Ti.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL","display":"(Property)\tTi.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>set the application badge for the application's icon in the springboard</p>","insert":"$0","match":"Ti.UI.iPhone.appBadge","display":"(Property)\tTi.UI.iPhone.appBadge\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>control whether the shake to edit system wide capability is enabled</p>","insert":"$0","match":"Ti.UI.iPhone.appSupportsShakeToEdit","display":"(Property)\tTi.UI.iPhone.appSupportsShakeToEdit\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>control the status bar visibility</p>","insert":"$0","match":"Ti.UI.iPhone.statusBarHidden","display":"(Property)\tTi.UI.iPhone.statusBarHidden\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>constant that controls the status bar color style</p>","insert":"$0","match":"Ti.UI.iPhone.statusBarStyle","display":"(Property)\tTi.UI.iPhone.statusBarStyle\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the styles available for <a href=\"Titanium.UI.ActivityIndicator-object.html\">Titanium.UI.ActivityIndicator</a> objects.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.ActivityIndicatorStyle","display":"(Namespace)\tTitanium.UI.iPhone.ActivityIndicatorStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The large white style of indicator.</p>","insert":"$0","match":"Titanium.UI.iPhone.ActivityIndicatorStyle.BIG","display":"(Property)\tTitanium.UI.iPhone.ActivityIndicatorStyle.BIG\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The standard gray style of indicator.</p>","insert":"$0","match":"Titanium.UI.iPhone.ActivityIndicatorStyle.DARK","display":"(Property)\tTitanium.UI.iPhone.ActivityIndicatorStyle.DARK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The standard white style of indicator (the default).</p>","insert":"$0","match":"Titanium.UI.iPhone.ActivityIndicatorStyle.PLAIN","display":"(Property)\tTitanium.UI.iPhone.ActivityIndicatorStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the styles available for <a href=\"Titanium.UI.ActivityIndicator-object.html\">Titanium.UI.ActivityIndicator</a> objects.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.ActivityIndicatorStyle","display":"(Namespace)\tTi.UI.iPhone.ActivityIndicatorStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The large white style of indicator.</p>","insert":"$0","match":"Ti.UI.iPhone.ActivityIndicatorStyle.BIG","display":"(Property)\tTi.UI.iPhone.ActivityIndicatorStyle.BIG\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The standard gray style of indicator.</p>","insert":"$0","match":"Ti.UI.iPhone.ActivityIndicatorStyle.DARK","display":"(Property)\tTi.UI.iPhone.ActivityIndicatorStyle.DARK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The standard white style of indicator (the default).</p>","insert":"$0","match":"Ti.UI.iPhone.ActivityIndicatorStyle.PLAIN","display":"(Property)\tTi.UI.iPhone.ActivityIndicatorStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the Animation Styles used for transitions.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.AnimationStyle","display":"(Namespace)\tTitanium.UI.iPhone.AnimationStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>Curl downwards during a transition animation</p>","insert":"$0","match":"Titanium.UI.iPhone.AnimationStyle.CURL_DOWN","display":"(Property)\tTitanium.UI.iPhone.AnimationStyle.CURL_DOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Curl upwards during a transition animation</p>","insert":"$0","match":"Titanium.UI.iPhone.AnimationStyle.CURL_UP","display":"(Property)\tTitanium.UI.iPhone.AnimationStyle.CURL_UP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Flip from left to right during a transition animation</p>","insert":"$0","match":"Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT","display":"(Property)\tTitanium.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Flip from right to left during a transition animation</p>","insert":"$0","match":"Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT","display":"(Property)\tTitanium.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>No animation</p>","insert":"$0","match":"Titanium.UI.iPhone.AnimationStyle.NONE","display":"(Property)\tTitanium.UI.iPhone.AnimationStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the Animation Styles used for transitions.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.AnimationStyle","display":"(Namespace)\tTi.UI.iPhone.AnimationStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>Curl downwards during a transition animation</p>","insert":"$0","match":"Ti.UI.iPhone.AnimationStyle.CURL_DOWN","display":"(Property)\tTi.UI.iPhone.AnimationStyle.CURL_DOWN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Curl upwards during a transition animation</p>","insert":"$0","match":"Ti.UI.iPhone.AnimationStyle.CURL_UP","display":"(Property)\tTi.UI.iPhone.AnimationStyle.CURL_UP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Flip from left to right during a transition animation</p>","insert":"$0","match":"Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT","display":"(Property)\tTi.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Flip from right to left during a transition animation</p>","insert":"$0","match":"Ti.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT","display":"(Property)\tTi.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>No animation</p>","insert":"$0","match":"Ti.UI.iPhone.AnimationStyle.NONE","display":"(Property)\tTi.UI.iPhone.AnimationStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Navigation Group implements a specialized view that manages the navigation of hierarchical content. The Navigation Group is created by the method <a href=\"Titanium.UI.iPhone.NavigationGroup-object.html\">Titanium.UI.iPhone.NavigationGroup</a>.</p>\n<p><img alt=\"navgroup\" src=\"http://img.skitch.com/20100406-rwe44533tkd94fdnbqqudxynpe.png\"></p>\n<p>A Navigation Group is very similar to Tab Bars with the exception that they do not maintain a group of windows with a interface bar at the bottom.</p><hr /><p>The <tt>window</tt> property must be set initially in the constructor when creating a navigation group to the root level window.  All Navigation Groups must have at least one root window that cannot be removed.</p>","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup","display":"(Namespace)\tTitanium.UI.iPhone.NavigationGroup","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.add","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.addEventListener","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.animate","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>close a window and remove it from the navigation group</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.close</u></b><i>:void()</i><br>(\n\t\t<span><b>window</b><i>:object</i></span>\n\t\t<span class='info'>window to close</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>optional dictionary. the only current property supported is animated</tt> which is a boolean to indicate if the window should be closed animated (default) or not.</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.close","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.fireEvent","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.iPhone.NavigationGroup.hide","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open a window within the navigation group</p><p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.open</u></b><i>:void()</i><br>(\n\t\t<span><b>window</b><i>:object</i></span>\n\t\t<span class='info'>window to open within the tab group</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>optional dictionary. the only current property supported is animated</tt> which is a boolean to indicate if the window should be opened animated (default) or not.</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.open","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.remove","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.removeEventListener","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Titanium.UI.iPhone.NavigationGroup.show","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Titanium.UI.iPhone.NavigationGroup.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Titanium.UI.iPhone.NavigationGroup.toImage","display":"(Method)\t\tTitanium.UI.iPhone.NavigationGroup.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.anchorPoint","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.animatedCenterPoint","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.backgroundColor","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.backgroundGradient","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.backgroundImage","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.backgroundLeftCap","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.backgroundTopCap","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.borderColor","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.borderRadius","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.borderWidth","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.bottom","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.center","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.height","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.left","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.opacity","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.right","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.size","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.top","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.touchEnabled","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.transform","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.visible","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.width","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Titanium.UI.iPhone.NavigationGroup.zIndex","display":"(Property)\tTitanium.UI.iPhone.NavigationGroup.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A Navigation Group implements a specialized view that manages the navigation of hierarchical content. The Navigation Group is created by the method <a href=\"Titanium.UI.iPhone.NavigationGroup-object.html\">Titanium.UI.iPhone.NavigationGroup</a>.</p>\n<p><img alt=\"navgroup\" src=\"http://img.skitch.com/20100406-rwe44533tkd94fdnbqqudxynpe.png\"></p>\n<p>A Navigation Group is very similar to Tab Bars with the exception that they do not maintain a group of windows with a interface bar at the bottom.</p><hr /><p>The <tt>window</tt> property must be set initially in the constructor when creating a navigation group to the root level window.  All Navigation Groups must have at least one root window that cannot be removed.</p>","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup","display":"(Namespace)\tTi.UI.iPhone.NavigationGroup","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add a child to the view hierarchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.add</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to add to this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.add","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.add\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.addEventListener","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>animate the view<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.animate</u></b><i>:void()</i><br>(\n\t\t<span><b>obj</b><i>:object</i></span>\n\t\t<span class='info'>either a dictionary of animation properties or an Animation object</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion of the animation</span>\n)\n</code>","insert":"(${1:{${2:}\\}, function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.animate","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.animate\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>close a window and remove it from the navigation group</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.close</u></b><i>:void()</i><br>(\n\t\t<span><b>window</b><i>:object</i></span>\n\t\t<span class='info'>window to close</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>optional dictionary. the only current property supported is animated</tt> which is a boolean to indicate if the window should be closed animated (default) or not.</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.close","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.close\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.fireEvent","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.iPhone.NavigationGroup.hide","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.hide\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>open a window within the navigation group</p><p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.open</u></b><i>:void()</i><br>(\n\t\t<span><b>window</b><i>:object</i></span>\n\t\t<span class='info'>window to open within the tab group</span>\n\t\t<span><b>properties</b><i>:object</i></span>\n\t\t<span class='info'>optional dictionary. the only current property supported is animated</tt> which is a boolean to indicate if the window should be opened animated (default) or not.</span>\n)\n</code>","insert":"(${1:{${2:}\\}, {${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.open","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.open\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously add view from the view hiearchy<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.remove</u></b><i>:void()</i><br>(\n\t\t<span><b>view</b><i>:object</i></span>\n\t\t<span class='info'>the view to remove from this views hiearchy</span>\n)\n</code>","insert":"(${1:{${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.remove","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.remove\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.removeEventListener","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"","insert":"($0)","match":"Ti.UI.iPhone.NavigationGroup.show","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.show\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>return a Blob image of the rendered view<p><code class=\"usage\"><b><u>(Method)Ti.UI.iPhone.NavigationGroup.toImage</u></b><i>:object()</i><br>(\n\t\t<span><b>f</b><i>:function</i></span>\n\t\t<span class='info'>function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately</span>\n)\n</code>","insert":"(${1:function ${2:f}(${3:}){${0:}\\}})","match":"Ti.UI.iPhone.NavigationGroup.toImage","display":"(Method)\t\tTi.UI.iPhone.NavigationGroup.toImage\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.anchorPoint","display":"(Property)\tTi.UI.iPhone.NavigationGroup.anchorPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"read-only object with x and y properties of where the view is during animation","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.animatedCenterPoint","display":"(Property)\tTi.UI.iPhone.NavigationGroup.animatedCenterPoint\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background color of the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.backgroundColor","display":"(Property)\tTi.UI.iPhone.NavigationGroup.backgroundColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.backgroundGradient","display":"(Property)\tTi.UI.iPhone.NavigationGroup.backgroundGradient\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"the background image url of the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.backgroundImage","display":"(Property)\tTi.UI.iPhone.NavigationGroup.backgroundImage\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.backgroundLeftCap","display":"(Property)\tTi.UI.iPhone.NavigationGroup.backgroundLeftCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.backgroundTopCap","display":"(Property)\tTi.UI.iPhone.NavigationGroup.backgroundTopCap\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border color of the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.borderColor","display":"(Property)\tTi.UI.iPhone.NavigationGroup.borderColor\t:string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border radius of the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.borderRadius","display":"(Property)\tTi.UI.iPhone.NavigationGroup.borderRadius\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"the border width of the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.borderWidth","display":"(Property)\tTi.UI.iPhone.NavigationGroup.borderWidth\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view bottom position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.bottom","display":"(Property)\tTi.UI.iPhone.NavigationGroup.bottom\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a dictionary with properties x and y to indicate the center of the views position relative to the parent view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.center","display":"(Property)\tTi.UI.iPhone.NavigationGroup.center\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view height. can be either float value or a string of the width.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.height","display":"(Property)\tTi.UI.iPhone.NavigationGroup.height\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view left position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.left","display":"(Property)\tTi.UI.iPhone.NavigationGroup.left\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the opacity from 0.0-1.0","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.opacity","display":"(Property)\tTi.UI.iPhone.NavigationGroup.opacity\t:float","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view right position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.right","display":"(Property)\tTi.UI.iPhone.NavigationGroup.right\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the size of the view as a dictionary of width and height properties","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.size","display":"(Property)\tTi.UI.iPhone.NavigationGroup.size\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view top position. this position is relative to the views parent. can be either a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.top","display":"(Property)\tTi.UI.iPhone.NavigationGroup.top\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.touchEnabled","display":"(Property)\tTi.UI.iPhone.NavigationGroup.touchEnabled\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"the transformation matrix to apply to the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.transform","display":"(Property)\tTi.UI.iPhone.NavigationGroup.transform\t:object","image":"Property"},{"tool_tip_format":"html","tool_tip":"a boolean of the visibility of the view","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.visible","display":"(Property)\tTi.UI.iPhone.NavigationGroup.visible\t:boolean","image":"Property"},{"tool_tip_format":"html","tool_tip":"property for the view width. can either be `auto`, a float value or a string of the width.","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.width","display":"(Property)\tTi.UI.iPhone.NavigationGroup.width\t:float,string","image":"Property"},{"tool_tip_format":"html","tool_tip":"the z index position relative to other sibling views","insert":"$0","match":"Ti.UI.iPhone.NavigationGroup.zIndex","display":"(Property)\tTi.UI.iPhone.NavigationGroup.zIndex\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the bar styles used on the <tt>style</tt> property of <a href=\"Titanium.UI.ProgressBar-object.html\">Titanium.UI.ProgressBar</a>.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.ProgressBarStyle","display":"(Namespace)\tTitanium.UI.iPhone.ProgressBarStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The style of progress view that is used in a toolbar.</p>","insert":"$0","match":"Titanium.UI.iPhone.ProgressBarStyle.BAR","display":"(Property)\tTitanium.UI.iPhone.ProgressBarStyle.BAR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>he standard progress-view style. This is the default.</p>","insert":"$0","match":"Titanium.UI.iPhone.ProgressBarStyle.DEFAULT","display":"(Property)\tTitanium.UI.iPhone.ProgressBarStyle.DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The standard progress-view style. Same as <tt>DEFAULT</tt>.</p>","insert":"$0","match":"Titanium.UI.iPhone.ProgressBarStyle.PLAIN","display":"(Property)\tTitanium.UI.iPhone.ProgressBarStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the bar styles used on the <tt>style</tt> property of <a href=\"Titanium.UI.ProgressBar-object.html\">Titanium.UI.ProgressBar</a>.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.ProgressBarStyle","display":"(Namespace)\tTi.UI.iPhone.ProgressBarStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The style of progress view that is used in a toolbar.</p>","insert":"$0","match":"Ti.UI.iPhone.ProgressBarStyle.BAR","display":"(Property)\tTi.UI.iPhone.ProgressBarStyle.BAR\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>he standard progress-view style. This is the default.</p>","insert":"$0","match":"Ti.UI.iPhone.ProgressBarStyle.DEFAULT","display":"(Property)\tTi.UI.iPhone.ProgressBarStyle.DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The standard progress-view style. Same as <tt>DEFAULT</tt>.</p>","insert":"$0","match":"Ti.UI.iPhone.ProgressBarStyle.PLAIN","display":"(Property)\tTi.UI.iPhone.ProgressBarStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the Animation Styles used for transition on table view rows.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle","display":"(Namespace)\tTitanium.UI.iPhone.RowAnimationStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the bottom; the deleted row or rows slides out toward the bottom.</p>","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle.BOTTOM","display":"(Property)\tTitanium.UI.iPhone.RowAnimationStyle.BOTTOM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted or deleted row or rows fades into or out of the table view.</p>","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle.FADE","display":"(Property)\tTitanium.UI.iPhone.RowAnimationStyle.FADE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the left; the deleted row or rows slides out to the left.</p>","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle.LEFT","display":"(Property)\tTitanium.UI.iPhone.RowAnimationStyle.LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>No animation is performed. The new cell value appears as if the cell had just been reloaded.</p>","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle.NONE","display":"(Property)\tTitanium.UI.iPhone.RowAnimationStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the right; the deleted row or rows slides out to the right.</p>","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle.RIGHT","display":"(Property)\tTitanium.UI.iPhone.RowAnimationStyle.RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the top; the deleted row or rows slides out toward the top.</p>","insert":"$0","match":"Titanium.UI.iPhone.RowAnimationStyle.TOP","display":"(Property)\tTitanium.UI.iPhone.RowAnimationStyle.TOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the Animation Styles used for transition on table view rows.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle","display":"(Namespace)\tTi.UI.iPhone.RowAnimationStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the bottom; the deleted row or rows slides out toward the bottom.</p>","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle.BOTTOM","display":"(Property)\tTi.UI.iPhone.RowAnimationStyle.BOTTOM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted or deleted row or rows fades into or out of the table view.</p>","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle.FADE","display":"(Property)\tTi.UI.iPhone.RowAnimationStyle.FADE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the left; the deleted row or rows slides out to the left.</p>","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle.LEFT","display":"(Property)\tTi.UI.iPhone.RowAnimationStyle.LEFT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>No animation is performed. The new cell value appears as if the cell had just been reloaded.</p>","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle.NONE","display":"(Property)\tTi.UI.iPhone.RowAnimationStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the right; the deleted row or rows slides out to the right.</p>","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle.RIGHT","display":"(Property)\tTi.UI.iPhone.RowAnimationStyle.RIGHT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The inserted row or rows slides in from the top; the deleted row or rows slides out toward the top.</p>","insert":"$0","match":"Ti.UI.iPhone.RowAnimationStyle.TOP","display":"(Property)\tTi.UI.iPhone.RowAnimationStyle.TOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the styles available for <a href=\"Titanium.UI.ActivityIndicator-object.html\">Titanium.UI.ActivityIndicator</a> objects.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.ScrollIndicatorStyle","display":"(Namespace)\tTitanium.UI.iPhone.ScrollIndicatorStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>A style of indicator which is black smaller than the default style. This style is good against a white content background.</p>","insert":"$0","match":"Titanium.UI.iPhone.ScrollIndicatorStyle.BLACK","display":"(Property)\tTitanium.UI.iPhone.ScrollIndicatorStyle.BLACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The default style of scroll indicator, which is black with a white border. This style is good against any content background.</p>","insert":"$0","match":"Titanium.UI.iPhone.ScrollIndicatorStyle.DEFAULT","display":"(Property)\tTitanium.UI.iPhone.ScrollIndicatorStyle.DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A style of indicator is white and smaller than the default style. This style is good against a black content background.</p>","insert":"$0","match":"Titanium.UI.iPhone.ScrollIndicatorStyle.WHITE","display":"(Property)\tTitanium.UI.iPhone.ScrollIndicatorStyle.WHITE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the styles available for <a href=\"Titanium.UI.ActivityIndicator-object.html\">Titanium.UI.ActivityIndicator</a> objects.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.ScrollIndicatorStyle","display":"(Namespace)\tTi.UI.iPhone.ScrollIndicatorStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>A style of indicator which is black smaller than the default style. This style is good against a white content background.</p>","insert":"$0","match":"Ti.UI.iPhone.ScrollIndicatorStyle.BLACK","display":"(Property)\tTi.UI.iPhone.ScrollIndicatorStyle.BLACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The default style of scroll indicator, which is black with a white border. This style is good against any content background.</p>","insert":"$0","match":"Ti.UI.iPhone.ScrollIndicatorStyle.DEFAULT","display":"(Property)\tTi.UI.iPhone.ScrollIndicatorStyle.DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A style of indicator is white and smaller than the default style. This style is good against a black content background.</p>","insert":"$0","match":"Ti.UI.iPhone.ScrollIndicatorStyle.WHITE","display":"(Property)\tTi.UI.iPhone.ScrollIndicatorStyle.WHITE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the status bar style.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.StatusBar","display":"(Namespace)\tTitanium.UI.iPhone.StatusBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The default status bar style</p>","insert":"$0","match":"Titanium.UI.iPhone.StatusBar.DEFAULT","display":"(Property)\tTitanium.UI.iPhone.StatusBar.DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The gray colored status bar style</p>","insert":"$0","match":"Titanium.UI.iPhone.StatusBar.GRAY","display":"(Property)\tTitanium.UI.iPhone.StatusBar.GRAY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The opaque black status bar style.</p>","insert":"$0","match":"Titanium.UI.iPhone.StatusBar.OPAQUE_BLACK","display":"(Property)\tTitanium.UI.iPhone.StatusBar.OPAQUE_BLACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The translucent black status bar style. This style provides some level of transparency to the device background.</p>","insert":"$0","match":"Titanium.UI.iPhone.StatusBar.TRANSLUCENT_BLACK","display":"(Property)\tTitanium.UI.iPhone.StatusBar.TRANSLUCENT_BLACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the status bar style.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.StatusBar","display":"(Namespace)\tTi.UI.iPhone.StatusBar","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The default status bar style</p>","insert":"$0","match":"Ti.UI.iPhone.StatusBar.DEFAULT","display":"(Property)\tTi.UI.iPhone.StatusBar.DEFAULT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The gray colored status bar style</p>","insert":"$0","match":"Ti.UI.iPhone.StatusBar.GRAY","display":"(Property)\tTi.UI.iPhone.StatusBar.GRAY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The opaque black status bar style.</p>","insert":"$0","match":"Ti.UI.iPhone.StatusBar.OPAQUE_BLACK","display":"(Property)\tTi.UI.iPhone.StatusBar.OPAQUE_BLACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The translucent black status bar style. This style provides some level of transparency to the device background.</p>","insert":"$0","match":"Ti.UI.iPhone.StatusBar.TRANSLUCENT_BLACK","display":"(Property)\tTi.UI.iPhone.StatusBar.TRANSLUCENT_BLACK\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the system button styles that can be used for the button <tt>style</tt> property.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.SystemButtonStyle","display":"(Namespace)\tTitanium.UI.iPhone.SystemButtonStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>A simple button style with a border.</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemButtonStyle.BORDERED","display":"(Property)\tTitanium.UI.iPhone.SystemButtonStyle.BORDERED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The style for a done button - for example, a button that completes some task and returns to the previous view.</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemButtonStyle.DONE","display":"(Property)\tTitanium.UI.iPhone.SystemButtonStyle.DONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Glows when tapped. The default item style.</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemButtonStyle.PLAIN","display":"(Property)\tTitanium.UI.iPhone.SystemButtonStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the system button styles that can be used for the button <tt>style</tt> property.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.SystemButtonStyle","display":"(Namespace)\tTi.UI.iPhone.SystemButtonStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>A simple button style with a border.</p>","insert":"$0","match":"Ti.UI.iPhone.SystemButtonStyle.BORDERED","display":"(Property)\tTi.UI.iPhone.SystemButtonStyle.BORDERED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The style for a done button - for example, a button that completes some task and returns to the previous view.</p>","insert":"$0","match":"Ti.UI.iPhone.SystemButtonStyle.DONE","display":"(Property)\tTi.UI.iPhone.SystemButtonStyle.DONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Glows when tapped. The default item style.</p>","insert":"$0","match":"Ti.UI.iPhone.SystemButtonStyle.PLAIN","display":"(Property)\tTi.UI.iPhone.SystemButtonStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the system icon styles that can be used on a tab group tab.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon","display":"(Namespace)\tTitanium.UI.iPhone.SystemIcon","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>Bookmark style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.BOOKMARKS","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.BOOKMARKS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Contacts style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.CONTACTS","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.CONTACTS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Downloads style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.DOWNLOADS","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.DOWNLOADS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Favorites style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.FAVORITES","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.FAVORITES\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Featured style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.FEATURED","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.FEATURED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>History style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.HISTORY","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.HISTORY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>More style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.MORE","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.MORE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Most recent style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.MOST_RECENT","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.MOST_RECENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Most viewed style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.MOST_VIEWED","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.MOST_VIEWED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Recents style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.RECENTS","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.RECENTS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Search style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.SEARCH","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.SEARCH\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Top rated style icon</p>","insert":"$0","match":"Titanium.UI.iPhone.SystemIcon.TOP_RATED","display":"(Property)\tTitanium.UI.iPhone.SystemIcon.TOP_RATED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the system icon styles that can be used on a tab group tab.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.SystemIcon","display":"(Namespace)\tTi.UI.iPhone.SystemIcon","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>Bookmark style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.BOOKMARKS","display":"(Property)\tTi.UI.iPhone.SystemIcon.BOOKMARKS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Contacts style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.CONTACTS","display":"(Property)\tTi.UI.iPhone.SystemIcon.CONTACTS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Downloads style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.DOWNLOADS","display":"(Property)\tTi.UI.iPhone.SystemIcon.DOWNLOADS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Favorites style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.FAVORITES","display":"(Property)\tTi.UI.iPhone.SystemIcon.FAVORITES\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Featured style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.FEATURED","display":"(Property)\tTi.UI.iPhone.SystemIcon.FEATURED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>History style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.HISTORY","display":"(Property)\tTi.UI.iPhone.SystemIcon.HISTORY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>More style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.MORE","display":"(Property)\tTi.UI.iPhone.SystemIcon.MORE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Most recent style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.MOST_RECENT","display":"(Property)\tTi.UI.iPhone.SystemIcon.MOST_RECENT\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Most viewed style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.MOST_VIEWED","display":"(Property)\tTi.UI.iPhone.SystemIcon.MOST_VIEWED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Recents style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.RECENTS","display":"(Property)\tTi.UI.iPhone.SystemIcon.RECENTS\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Search style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.SEARCH","display":"(Property)\tTi.UI.iPhone.SystemIcon.SEARCH\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Top rated style icon</p>","insert":"$0","match":"Ti.UI.iPhone.SystemIcon.TOP_RATED","display":"(Property)\tTi.UI.iPhone.SystemIcon.TOP_RATED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the style that can be used for the <tt>selectionStyle</tt> property of <a href=\"Titanium.UI.TableViewRow-object.html\">Titanium.UI.TableViewRow</a>.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.TableViewCellSelectionStyle","display":"(Namespace)\tTitanium.UI.iPhone.TableViewCellSelectionStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The cell when selected has a blue background. This is the default value.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewCellSelectionStyle.BLUE","display":"(Property)\tTitanium.UI.iPhone.TableViewCellSelectionStyle.BLUE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Then cell when selected has a gray background.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewCellSelectionStyle.GRAY","display":"(Property)\tTitanium.UI.iPhone.TableViewCellSelectionStyle.GRAY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The cell has no distinct style for when it is selected.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewCellSelectionStyle.NONE","display":"(Property)\tTitanium.UI.iPhone.TableViewCellSelectionStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the style that can be used for the <tt>selectionStyle</tt> property of <a href=\"Titanium.UI.TableViewRow-object.html\">Titanium.UI.TableViewRow</a>.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.TableViewCellSelectionStyle","display":"(Namespace)\tTi.UI.iPhone.TableViewCellSelectionStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The cell when selected has a blue background. This is the default value.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewCellSelectionStyle.BLUE","display":"(Property)\tTi.UI.iPhone.TableViewCellSelectionStyle.BLUE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>Then cell when selected has a gray background.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewCellSelectionStyle.GRAY","display":"(Property)\tTi.UI.iPhone.TableViewCellSelectionStyle.GRAY\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The cell has no distinct style for when it is selected.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewCellSelectionStyle.NONE","display":"(Property)\tTi.UI.iPhone.TableViewCellSelectionStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the position value that can be used for the <tt>position</tt> property of <a href=\"Titanium.UI.TableView-object.html\">Titanium.UI.TableView</a> when invoking <tt>scrollToIndex</tt>.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.TableViewScrollPosition","display":"(Namespace)\tTitanium.UI.iPhone.TableViewScrollPosition","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to the bottom of the visible table view.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewScrollPosition.BOTTOM","display":"(Property)\tTitanium.UI.iPhone.TableViewScrollPosition.BOTTOM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to the middle of the visible table view.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewScrollPosition.MIDDLE","display":"(Property)\tTitanium.UI.iPhone.TableViewScrollPosition.MIDDLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by <tt>TOP</tt>. This is the default.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewScrollPosition.NONE","display":"(Property)\tTitanium.UI.iPhone.TableViewScrollPosition.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to the top of the visible table view.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewScrollPosition.TOP","display":"(Property)\tTitanium.UI.iPhone.TableViewScrollPosition.TOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the position value that can be used for the <tt>position</tt> property of <a href=\"Titanium.UI.TableView-object.html\">Titanium.UI.TableView</a> when invoking <tt>scrollToIndex</tt>.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.TableViewScrollPosition","display":"(Namespace)\tTi.UI.iPhone.TableViewScrollPosition","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to the bottom of the visible table view.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewScrollPosition.BOTTOM","display":"(Property)\tTi.UI.iPhone.TableViewScrollPosition.BOTTOM\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to the middle of the visible table view.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewScrollPosition.MIDDLE","display":"(Property)\tTi.UI.iPhone.TableViewScrollPosition.MIDDLE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by <tt>TOP</tt>. This is the default.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewScrollPosition.NONE","display":"(Property)\tTi.UI.iPhone.TableViewScrollPosition.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The table view scrolls the row of interest to the top of the visible table view.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewScrollPosition.TOP","display":"(Property)\tTi.UI.iPhone.TableViewScrollPosition.TOP\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the style that can be used for the <tt>separatorStyle</tt> property of <a href=\"Titanium.UI.TableView-object.html\">Titanium.UI.TableView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.TableViewSeparatorStyle","display":"(Namespace)\tTitanium.UI.iPhone.TableViewSeparatorStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The separator cell has no distinct style.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewSeparatorStyle.NONE","display":"(Property)\tTitanium.UI.iPhone.TableViewSeparatorStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The separator cell has a single line running across its width. This is the default value.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE","display":"(Property)\tTitanium.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the style that can be used for the <tt>separatorStyle</tt> property of <a href=\"Titanium.UI.TableView-object.html\">Titanium.UI.TableView</a>.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.TableViewSeparatorStyle","display":"(Namespace)\tTi.UI.iPhone.TableViewSeparatorStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The separator cell has no distinct style.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewSeparatorStyle.NONE","display":"(Property)\tTi.UI.iPhone.TableViewSeparatorStyle.NONE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The separator cell has a single line running across its width. This is the default value.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE","display":"(Property)\tTi.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the style that can be used for the button <tt>style</tt> property of <a href=\"Titanium.UI.TableView-object.html\">Titanium.UI.TableView</a>.</p><hr />","insert":"$0","match":"Titanium.UI.iPhone.TableViewStyle","display":"(Namespace)\tTitanium.UI.iPhone.TableViewStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>A table view whose sections present distinct groups of rows. The section headers and footers do not float.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewStyle.GROUPED","display":"(Property)\tTitanium.UI.iPhone.TableViewStyle.GROUPED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A plain table view. Any section headers or footers are displayed as inline separators and float when the table view is scrolled.</p>","insert":"$0","match":"Titanium.UI.iPhone.TableViewStyle.PLAIN","display":"(Property)\tTitanium.UI.iPhone.TableViewStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A set of constants for the style that can be used for the button <tt>style</tt> property of <a href=\"Titanium.UI.TableView-object.html\">Titanium.UI.TableView</a>.</p><hr />","insert":"$0","match":"Ti.UI.iPhone.TableViewStyle","display":"(Namespace)\tTi.UI.iPhone.TableViewStyle","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>A table view whose sections present distinct groups of rows. The section headers and footers do not float.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewStyle.GROUPED","display":"(Property)\tTi.UI.iPhone.TableViewStyle.GROUPED\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>A plain table view. Any section headers or footers are displayed as inline separators and float when the table view is scrolled.</p>","insert":"$0","match":"Ti.UI.iPhone.TableViewStyle.PLAIN","display":"(Property)\tTi.UI.iPhone.TableViewStyle.PLAIN\t:int","image":"Property"},{"tool_tip_format":"html","tool_tip":"<p>The top level Utils module.  The Utils module is a set of common JavaScript functions that are \nuseful for applications.</p><hr />","insert":"$0","match":"Titanium.Utils","display":"(Namespace)\tTitanium.Utils","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Utils.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Utils.addEventListener","display":"(Method)\t\tTitanium.Utils.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>decode a Base64 string</p><p><code class=\"usage\"><b><u>(Method)Titanium.Utils.base64decode</u></b><i>:string()</i><br>(\n\t\t<span><b>str</b><i>:string</i></span>\n\t\t<span class='info'>the string to use for the input</span>\n)\n</code>","insert":"(${1:'${0:str}'})","match":"Titanium.Utils.base64decode","display":"(Method)\t\tTitanium.Utils.base64decode\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>encode a string into Base64</p><p><code class=\"usage\"><b><u>(Method)Titanium.Utils.base64encode</u></b><i>:string()</i><br>(\n\t\t<span><b>str</b><i>:string</i></span>\n\t\t<span class='info'>the string to use for the input</span>\n)\n</code>","insert":"(${1:'${0:str}'})","match":"Titanium.Utils.base64encode","display":"(Method)\t\tTitanium.Utils.base64encode\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Utils.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Utils.fireEvent","display":"(Method)\t\tTitanium.Utils.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>compute a MD5 hash algorithm against the input and return a hex-based string</p><p><code class=\"usage\"><b><u>(Method)Titanium.Utils.md5HexDigest</u></b><i>:string()</i><br>(\n\t\t<span><b>str</b><i>:string</i></span>\n\t\t<span class='info'>the string to use for the input</span>\n)\n</code>","insert":"(${1:'${0:str}'})","match":"Titanium.Utils.md5HexDigest","display":"(Method)\t\tTitanium.Utils.md5HexDigest\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Utils.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Utils.removeEventListener","display":"(Method)\t\tTitanium.Utils.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Utils module.  The Utils module is a set of common JavaScript functions that are \nuseful for applications.</p><hr />","insert":"$0","match":"Ti.Utils","display":"(Namespace)\tTi.Utils","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Utils.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Utils.addEventListener","display":"(Method)\t\tTi.Utils.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>decode a Base64 string</p><p><code class=\"usage\"><b><u>(Method)Ti.Utils.base64decode</u></b><i>:string()</i><br>(\n\t\t<span><b>str</b><i>:string</i></span>\n\t\t<span class='info'>the string to use for the input</span>\n)\n</code>","insert":"(${1:'${0:str}'})","match":"Ti.Utils.base64decode","display":"(Method)\t\tTi.Utils.base64decode\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>encode a string into Base64</p><p><code class=\"usage\"><b><u>(Method)Ti.Utils.base64encode</u></b><i>:string()</i><br>(\n\t\t<span><b>str</b><i>:string</i></span>\n\t\t<span class='info'>the string to use for the input</span>\n)\n</code>","insert":"(${1:'${0:str}'})","match":"Ti.Utils.base64encode","display":"(Method)\t\tTi.Utils.base64encode\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Utils.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Utils.fireEvent","display":"(Method)\t\tTi.Utils.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>compute a MD5 hash algorithm against the input and return a hex-based string</p><p><code class=\"usage\"><b><u>(Method)Ti.Utils.md5HexDigest</u></b><i>:string()</i><br>(\n\t\t<span><b>str</b><i>:string</i></span>\n\t\t<span class='info'>the string to use for the input</span>\n)\n</code>","insert":"(${1:'${0:str}'})","match":"Ti.Utils.md5HexDigest","display":"(Method)\t\tTi.Utils.md5HexDigest\t:string()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Utils.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Utils.removeEventListener","display":"(Method)\t\tTi.Utils.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level XML module.  The XML module is used parsing and processing XML-based content.</p><hr />","insert":"$0","match":"Titanium.XML","display":"(Namespace)\tTitanium.XML","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.XML.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.XML.addEventListener","display":"(Method)\t\tTitanium.XML.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.XML.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.XML.fireEvent","display":"(Method)\t\tTitanium.XML.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>parse an XML string into a DOMDocument</p><p><code class=\"usage\"><b><u>(Method)Titanium.XML.parseString</u></b><i>:object()</i><br>(\n\t\t<span><b>xml</b><i>:string</i></span>\n\t\t<span class='info'>the XML content as a string</span>\n)\n</code>","insert":"(${1:'${0:xml}'})","match":"Titanium.XML.parseString","display":"(Method)\t\tTitanium.XML.parseString\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.XML.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.XML.removeEventListener","display":"(Method)\t\tTitanium.XML.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level XML module.  The XML module is used parsing and processing XML-based content.</p><hr />","insert":"$0","match":"Ti.XML","display":"(Namespace)\tTi.XML","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.XML.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.XML.addEventListener","display":"(Method)\t\tTi.XML.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.XML.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.XML.fireEvent","display":"(Method)\t\tTi.XML.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>parse an XML string into a DOMDocument</p><p><code class=\"usage\"><b><u>(Method)Ti.XML.parseString</u></b><i>:object()</i><br>(\n\t\t<span><b>xml</b><i>:string</i></span>\n\t\t<span class='info'>the XML content as a string</span>\n)\n</code>","insert":"(${1:'${0:xml}'})","match":"Ti.XML.parseString","display":"(Method)\t\tTi.XML.parseString\t:object()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.XML.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.XML.removeEventListener","display":"(Method)\t\tTi.XML.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The DOMDocument returned from <a href=\"Titanium.XML.parseString.html\">Titanium.XML.parseString</a>. The result is an object that implementes the DOM Level 2 API.</p><hr />","insert":"$0","match":"Titanium.XML.DOMDocument","display":"(Namespace)\tTitanium.XML.DOMDocument","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The DOMDocument returned from <a href=\"Titanium.XML.parseString.html\">Titanium.XML.parseString</a>. The result is an object that implementes the DOM Level 2 API.</p><hr />","insert":"$0","match":"Ti.XML.DOMDocument","display":"(Namespace)\tTi.XML.DOMDocument","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>The top level Yahoo module.  The Yahoo module is used for accessing Yahoo related API services.</p><hr />","insert":"$0","match":"Titanium.Yahoo","display":"(Namespace)\tTitanium.Yahoo","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Titanium.Yahoo.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Yahoo.addEventListener","display":"(Method)\t\tTitanium.Yahoo.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Titanium.Yahoo.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Titanium.Yahoo.fireEvent","display":"(Method)\t\tTitanium.Yahoo.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Titanium.Yahoo.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Yahoo.removeEventListener","display":"(Method)\t\tTitanium.Yahoo.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>invoke a Yahoo YQL query</p><p><code class=\"usage\"><b><u>(Method)Titanium.Yahoo.yql</u></b><i>:void()</i><br>(\n\t\t<span><b>yql</b><i>:string</i></span>\n\t\t<span class='info'>the YQL query to execute</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the function to execute when the query completes. The event will contain the boolean property success</tt> if successful. If <tt>success</tt> is false, the <tt>message</tt> property will contain the error message. If <tt>success</tt> is true, the <tt>data</tt> property will contain the data payload received from the YQL.</span>\n)\n</code>","insert":"(${1:'${2:yql}', function ${3:callback}(${4:}){${0:}\\}})","match":"Titanium.Yahoo.yql","display":"(Method)\t\tTitanium.Yahoo.yql\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>The top level Yahoo module.  The Yahoo module is used for accessing Yahoo related API services.</p><hr />","insert":"$0","match":"Ti.Yahoo","display":"(Namespace)\tTi.Yahoo","image":"Namespace"},{"tool_tip_format":"html","tool_tip":"<p>add an event listener for the instance to receive view triggered events<p><code class=\"usage\"><b><u>(Method)Ti.Yahoo.addEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function to invoke when the event is fired</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Yahoo.addEventListener","display":"(Method)\t\tTi.Yahoo.addEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>fire a synthesized event to the views listener<p><code class=\"usage\"><b><u>(Method)Ti.Yahoo.fireEvent</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>event</b><i>:object</i></span>\n\t\t<span class='info'>event object</span>\n)\n</code>","insert":"(${1:'${2:name}', {${0:}\\}})","match":"Ti.Yahoo.fireEvent","display":"(Method)\t\tTi.Yahoo.fireEvent\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>remove a previously added event listener<p><code class=\"usage\"><b><u>(Method)Ti.Yahoo.removeEventListener</u></b><i>:void()</i><br>(\n\t\t<span><b>name</b><i>:string</i></span>\n\t\t<span class='info'>name of the event</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>callback function passed in addEventListener</span>\n)\n</code>","insert":"(${1:'${2:name}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Yahoo.removeEventListener","display":"(Method)\t\tTi.Yahoo.removeEventListener\t:void()","image":"Method"},{"tool_tip_format":"html","tool_tip":"<p>invoke a Yahoo YQL query</p><p><code class=\"usage\"><b><u>(Method)Ti.Yahoo.yql</u></b><i>:void()</i><br>(\n\t\t<span><b>yql</b><i>:string</i></span>\n\t\t<span class='info'>the YQL query to execute</span>\n\t\t<span><b>callback</b><i>:function</i></span>\n\t\t<span class='info'>the function to execute when the query completes. The event will contain the boolean property success</tt> if successful. If <tt>success</tt> is false, the <tt>message</tt> property will contain the error message. If <tt>success</tt> is true, the <tt>data</tt> property will contain the data payload received from the YQL.</span>\n)\n</code>","insert":"(${1:'${2:yql}', function ${3:callback}(${4:}){${0:}\\}})","match":"Ti.Yahoo.yql","display":"(Method)\t\tTi.Yahoo.yql\t:void()","image":"Method"}]}